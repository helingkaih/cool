{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata } from 'tslib';\nimport { FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, ElementRef, Output, forwardRef, Optional, ChangeDetectorRef, ViewChild, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/common';\nvar _c0 = [\"*\"];\nvar _c1 = [\"inputElement\"];\nvar _c2 = [\"nz-checkbox\", \"\"];\n\nfunction NzCheckboxGroupComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 1);\n    ɵngcc0.ɵɵlistener(\"nzCheckedChange\", function NzCheckboxGroupComponent_label_0_Template_label_nzCheckedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var o_r1 = ctx.$implicit;\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onCheckedChange(o_r1, $event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var o_r1 = ctx.$implicit;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzDisabled\", o_r1.disabled || ctx_r0.nzDisabled)(\"nzChecked\", o_r1.checked);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(o_r1.label);\n  }\n}\n\nvar NzCheckboxWrapperComponent = /*@__PURE__*/function () {\n  var NzCheckboxWrapperComponent = /*#__PURE__*/function () {\n    function NzCheckboxWrapperComponent(renderer, elementRef) {\n      _classCallCheck(this, NzCheckboxWrapperComponent);\n\n      this.nzOnChange = new EventEmitter();\n      this.checkboxList = [];\n      renderer.addClass(elementRef.nativeElement, 'ant-checkbox-group');\n    }\n\n    _createClass(NzCheckboxWrapperComponent, [{\n      key: \"addCheckbox\",\n      value: function addCheckbox(value) {\n        this.checkboxList.push(value);\n      }\n    }, {\n      key: \"removeCheckbox\",\n      value: function removeCheckbox(value) {\n        this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n      }\n    }, {\n      key: \"onChange\",\n      value: function onChange() {\n        var listOfCheckedValue = this.checkboxList.filter(function (item) {\n          return item.nzChecked;\n        }).map(function (item) {\n          return item.nzValue;\n        });\n        this.nzOnChange.emit(listOfCheckedValue);\n      }\n    }]);\n\n    return NzCheckboxWrapperComponent;\n  }();\n\n  NzCheckboxWrapperComponent.ɵfac = function NzCheckboxWrapperComponent_Factory(t) {\n    return new (t || NzCheckboxWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzCheckboxWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzCheckboxWrapperComponent,\n    selectors: [[\"nz-checkbox-wrapper\"]],\n    outputs: {\n      nzOnChange: \"nzOnChange\"\n    },\n    exportAs: [\"nzCheckboxWrapper\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzCheckboxWrapperComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzCheckboxWrapperComponent;\n}();\n\nvar NzCheckboxComponent = /*@__PURE__*/function () {\n  var NzCheckboxComponent = /*#__PURE__*/function () {\n    function NzCheckboxComponent(elementRef, nzCheckboxWrapperComponent, cdr, focusMonitor, directionality) {\n      _classCallCheck(this, NzCheckboxComponent);\n\n      this.elementRef = elementRef;\n      this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n\n      this.nzCheckedChange = new EventEmitter();\n      this.nzValue = null;\n      this.nzAutoFocus = false;\n      this.nzDisabled = false;\n      this.nzIndeterminate = false;\n      this.nzChecked = false; // TODO: move to host after View Engine deprecation\n\n      this.elementRef.nativeElement.classList.add('ant-checkbox-wrapper');\n    }\n\n    _createClass(NzCheckboxComponent, [{\n      key: \"hostClick\",\n      value: function hostClick(e) {\n        e.preventDefault();\n        this.focus();\n        this.innerCheckedChange(!this.nzChecked);\n      }\n    }, {\n      key: \"innerCheckedChange\",\n      value: function innerCheckedChange(checked) {\n        if (!this.nzDisabled) {\n          this.nzChecked = checked;\n          this.onChange(this.nzChecked);\n          this.nzCheckedChange.emit(this.nzChecked);\n\n          if (this.nzCheckboxWrapperComponent) {\n            this.nzCheckboxWrapperComponent.onChange();\n          }\n        }\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.nzChecked = value;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(disabled) {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.inputElement.nativeElement.blur();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        var _a;\n\n        this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(function (focusOrigin) {\n          if (!focusOrigin) {\n            Promise.resolve().then(function () {\n              return _this.onTouched();\n            });\n          }\n        });\n\n        if (this.nzCheckboxWrapperComponent) {\n          this.nzCheckboxWrapperComponent.addCheckbox(this);\n        }\n\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this.dir = direction;\n\n          _this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.nzAutoFocus) {\n          this.focus();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n\n        if (this.nzCheckboxWrapperComponent) {\n          this.nzCheckboxWrapperComponent.removeCheckbox(this);\n        }\n\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzCheckboxComponent;\n  }();\n\n  NzCheckboxComponent.ɵfac = function NzCheckboxComponent_Factory(t) {\n    return new (t || NzCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzCheckboxWrapperComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  NzCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzCheckboxComponent,\n    selectors: [[\"\", \"nz-checkbox\", \"\"]],\n    viewQuery: function NzCheckboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 3);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function NzCheckboxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzCheckboxComponent_click_HostBindingHandler($event) {\n          return ctx.hostClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-wrapper-checked\", ctx.nzChecked)(\"ant-checkbox-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzValue: \"nzValue\",\n      nzAutoFocus: \"nzAutoFocus\",\n      nzDisabled: \"nzDisabled\",\n      nzIndeterminate: \"nzIndeterminate\",\n      nzChecked: \"nzChecked\"\n    },\n    outputs: {\n      nzCheckedChange: \"nzCheckedChange\"\n    },\n    exportAs: [\"nzCheckbox\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return NzCheckboxComponent;\n      }),\n      multi: true\n    }])],\n    attrs: _c2,\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 10,\n    consts: [[1, \"ant-checkbox\"], [\"type\", \"checkbox\", 1, \"ant-checkbox-input\", 3, \"checked\", \"ngModel\", \"disabled\", \"ngModelChange\", \"click\"], [\"inputElement\", \"\"], [1, \"ant-checkbox-inner\"]],\n    template: function NzCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function NzCheckboxComponent_Template_input_ngModelChange_1_listener($event) {\n          return ctx.innerCheckedChange($event);\n        })(\"click\", function NzCheckboxComponent_Template_input_click_1_listener($event) {\n          return $event.stopPropagation();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"span\");\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-checked\", ctx.nzChecked && !ctx.nzIndeterminate)(\"ant-checkbox-disabled\", ctx.nzDisabled)(\"ant-checkbox-indeterminate\", ctx.nzIndeterminate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"checked\", ctx.nzChecked)(\"ngModel\", ctx.nzChecked)(\"disabled\", ctx.nzDisabled);\n        ɵngcc0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null);\n      }\n    },\n    directives: [ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzAutoFocus\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzDisabled\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzIndeterminate\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzChecked\", void 0);\n\n  return NzCheckboxComponent;\n}();\n\nvar NzCheckboxGroupComponent = /*@__PURE__*/function () {\n  var NzCheckboxGroupComponent = /*#__PURE__*/function () {\n    function NzCheckboxGroupComponent(elementRef, focusMonitor, cdr, directionality) {\n      _classCallCheck(this, NzCheckboxGroupComponent);\n\n      this.elementRef = elementRef;\n      this.focusMonitor = focusMonitor;\n      this.cdr = cdr;\n      this.directionality = directionality;\n\n      this.onChange = function () {};\n\n      this.onTouched = function () {};\n\n      this.options = [];\n      this.nzDisabled = false;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject(); // TODO: move to host after View Engine deprecation\n\n      this.elementRef.nativeElement.classList.add('ant-checkbox-group');\n    }\n\n    _createClass(NzCheckboxGroupComponent, [{\n      key: \"trackByOption\",\n      value: function trackByOption(_, option) {\n        return option.value;\n      }\n    }, {\n      key: \"onCheckedChange\",\n      value: function onCheckedChange(option, checked) {\n        option.checked = checked;\n        this.onChange(this.options);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        var _a;\n\n        this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe(function (focusOrigin) {\n          if (!focusOrigin) {\n            Promise.resolve().then(function () {\n              return _this2.onTouched();\n            });\n          }\n        });\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n          _this2.dir = direction;\n\n          _this2.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.options = value;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(disabled) {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n      }\n    }]);\n\n    return NzCheckboxGroupComponent;\n  }();\n\n  NzCheckboxGroupComponent.ɵfac = function NzCheckboxGroupComponent_Factory(t) {\n    return new (t || NzCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  NzCheckboxGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzCheckboxGroupComponent,\n    selectors: [[\"nz-checkbox-group\"]],\n    hostVars: 2,\n    hostBindings: function NzCheckboxGroupComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-group-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzDisabled: \"nzDisabled\"\n    },\n    exportAs: [\"nzCheckboxGroup\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return NzCheckboxGroupComponent;\n      }),\n      multi: true\n    }])],\n    decls: 1,\n    vars: 2,\n    consts: [[\"nz-checkbox\", \"\", \"class\", \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"nz-checkbox\", \"\", 1, \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\"]],\n    template: function NzCheckboxGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzCheckboxGroupComponent_label_0_Template, 3, 3, \"label\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.options)(\"ngForTrackBy\", ctx.trackByOption);\n      }\n    },\n    directives: [ɵngcc4.NgForOf, NzCheckboxComponent],\n    encapsulation: 2\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxGroupComponent.prototype, \"nzDisabled\", void 0);\n\n  return NzCheckboxGroupComponent;\n}();\n\nvar NzCheckboxModule = /*@__PURE__*/function () {\n  var NzCheckboxModule = function NzCheckboxModule() {\n    _classCallCheck(this, NzCheckboxModule);\n  };\n\n  NzCheckboxModule.ɵfac = function NzCheckboxModule_Factory(t) {\n    return new (t || NzCheckboxModule)();\n  };\n\n  NzCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzCheckboxModule\n  });\n  NzCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, FormsModule, A11yModule]]\n  });\n  return NzCheckboxModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzCheckboxModule, {\n    declarations: function declarations() {\n      return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule, FormsModule, A11yModule];\n    },\n    exports: function exports() {\n      return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxModule, NzCheckboxWrapperComponent }; //# sourceMappingURL=ng-zorro-antd-checkbox.js.map","map":null,"metadata":{},"sourceType":"module"}