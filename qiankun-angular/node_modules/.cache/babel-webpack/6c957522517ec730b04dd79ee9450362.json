{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, NgModule } from '@angular/core';\nimport { coerceElement } from '@angular/cdk/coercion';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar NzResizeObserverFactory = /*@__PURE__*/function () {\n  var NzResizeObserverFactory = /*#__PURE__*/function () {\n    function NzResizeObserverFactory() {\n      _classCallCheck(this, NzResizeObserverFactory);\n    }\n\n    _createClass(NzResizeObserverFactory, [{\n      key: \"create\",\n      value: function create(callback) {\n        return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n      }\n    }]);\n\n    return NzResizeObserverFactory;\n  }();\n\n  NzResizeObserverFactory.ɵfac = function NzResizeObserverFactory_Factory(t) {\n    return new (t || NzResizeObserverFactory)();\n  };\n\n  NzResizeObserverFactory.ɵprov = ɵɵdefineInjectable({\n    factory: function NzResizeObserverFactory_Factory() {\n      return new NzResizeObserverFactory();\n    },\n    token: NzResizeObserverFactory,\n    providedIn: \"root\"\n  });\n  return NzResizeObserverFactory;\n}();\n\nvar NzResizeObserver = /*@__PURE__*/function () {\n  var NzResizeObserver = /*#__PURE__*/function () {\n    function NzResizeObserver(nzResizeObserverFactory) {\n      _classCallCheck(this, NzResizeObserver);\n\n      this.nzResizeObserverFactory = nzResizeObserverFactory;\n      /** Keeps track of the existing ResizeObservers so they can be reused. */\n\n      this.observedElements = new Map();\n    }\n\n    _createClass(NzResizeObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this = this;\n\n        this.observedElements.forEach(function (_, element) {\n          return _this.cleanupObserver(element);\n        });\n      }\n    }, {\n      key: \"observe\",\n      value: function observe(elementOrRef) {\n        var _this2 = this;\n\n        var element = coerceElement(elementOrRef);\n        return new Observable(function (observer) {\n          var stream = _this2.observeElement(element);\n\n          var subscription = stream.subscribe(observer);\n          return function () {\n            subscription.unsubscribe();\n\n            _this2.unobserveElement(element);\n          };\n        });\n      }\n      /**\n       * Observes the given element by using the existing ResizeObserver if available, or creating a\n       * new one if not.\n       */\n\n    }, {\n      key: \"observeElement\",\n      value: function observeElement(element) {\n        if (!this.observedElements.has(element)) {\n          var stream = new Subject();\n          var observer = this.nzResizeObserverFactory.create(function (mutations) {\n            return stream.next(mutations);\n          });\n\n          if (observer) {\n            observer.observe(element);\n          }\n\n          this.observedElements.set(element, {\n            observer: observer,\n            stream: stream,\n            count: 1\n          });\n        } else {\n          this.observedElements.get(element).count++;\n        }\n\n        return this.observedElements.get(element).stream;\n      }\n      /**\n       * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n       * observing this element.\n       */\n\n    }, {\n      key: \"unobserveElement\",\n      value: function unobserveElement(element) {\n        if (this.observedElements.has(element)) {\n          this.observedElements.get(element).count--;\n\n          if (!this.observedElements.get(element).count) {\n            this.cleanupObserver(element);\n          }\n        }\n      }\n      /** Clean up the underlying ResizeObserver for the specified element. */\n\n    }, {\n      key: \"cleanupObserver\",\n      value: function cleanupObserver(element) {\n        if (this.observedElements.has(element)) {\n          var _this$observedElement = this.observedElements.get(element),\n              observer = _this$observedElement.observer,\n              stream = _this$observedElement.stream;\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          stream.complete();\n          this.observedElements.delete(element);\n        }\n      }\n    }]);\n\n    return NzResizeObserver;\n  }();\n\n  NzResizeObserver.ɵfac = function NzResizeObserver_Factory(t) {\n    return new (t || NzResizeObserver)(ɵngcc0.ɵɵinject(NzResizeObserverFactory));\n  };\n\n  NzResizeObserver.ɵprov = ɵɵdefineInjectable({\n    factory: function NzResizeObserver_Factory() {\n      return new NzResizeObserver(ɵɵinject(NzResizeObserverFactory));\n    },\n    token: NzResizeObserver,\n    providedIn: \"root\"\n  });\n  return NzResizeObserver;\n}();\n\nvar NzResizeObserversModule = /*@__PURE__*/function () {\n  var NzResizeObserversModule = function NzResizeObserversModule() {\n    _classCallCheck(this, NzResizeObserversModule);\n  };\n\n  NzResizeObserversModule.ɵfac = function NzResizeObserversModule_Factory(t) {\n    return new (t || NzResizeObserversModule)();\n  };\n\n  NzResizeObserversModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzResizeObserversModule\n  });\n  NzResizeObserversModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    providers: [NzResizeObserverFactory]\n  });\n  return NzResizeObserversModule;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzResizeObserver, NzResizeObserversModule, NzResizeObserverFactory as ɵNzResizeObserverFactory }; //# sourceMappingURL=ng-zorro-antd-core-resize-observers.js.map","map":null,"metadata":{},"sourceType":"module"}