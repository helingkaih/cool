{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Optional, Inject } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { filter, mapTo } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * User should provide an object implements this interface to set global configurations.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar NZ_CONFIG = new InjectionToken('nz-config');\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar isDefined = function isDefined(value) {\n  return value !== undefined;\n};\n\nvar ɵ0 = isDefined;\n\nvar NzConfigService = /*@__PURE__*/function () {\n  var NzConfigService = /*#__PURE__*/function () {\n    function NzConfigService(defaultConfig) {\n      _classCallCheck(this, NzConfigService);\n\n      this.configUpdated$ = new Subject();\n      this.config = defaultConfig || {};\n    }\n\n    _createClass(NzConfigService, [{\n      key: \"getConfigForComponent\",\n      value: function getConfigForComponent(componentName) {\n        return this.config[componentName];\n      }\n    }, {\n      key: \"getConfigChangeEventForComponent\",\n      value: function getConfigChangeEventForComponent(componentName) {\n        return this.configUpdated$.pipe(filter(function (n) {\n          return n === componentName;\n        }), mapTo(undefined));\n      }\n    }, {\n      key: \"set\",\n      value: function set(componentName, value) {\n        this.config[componentName] = Object.assign(Object.assign({}, this.config[componentName]), value);\n        this.configUpdated$.next(componentName);\n      }\n    }]);\n\n    return NzConfigService;\n  }();\n\n  NzConfigService.ɵfac = function NzConfigService_Factory(t) {\n    return new (t || NzConfigService)(ɵngcc0.ɵɵinject(NZ_CONFIG, 8));\n  };\n\n  NzConfigService.ɵprov = ɵɵdefineInjectable({\n    factory: function NzConfigService_Factory() {\n      return new NzConfigService(ɵɵinject(NZ_CONFIG, 8));\n    },\n    token: NzConfigService,\n    providedIn: \"root\"\n  });\n  return NzConfigService;\n}(); // tslint:disable:no-invalid-this\n\n/**\n * This decorator is used to decorate properties. If a property is decorated, it would try to load default value from\n * config.\n */\n// tslint:disable-next-line:typedef\n\n\nfunction WithConfig() {\n  return function ConfigDecorator(target, propName, originalDescriptor) {\n    var privatePropName = \"$$__assignedValue__\".concat(propName);\n    Object.defineProperty(target, privatePropName, {\n      configurable: true,\n      writable: true,\n      enumerable: false\n    });\n    return {\n      get: function get() {\n        var originalValue = (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.get) ? originalDescriptor.get.bind(this)() : this[privatePropName];\n        var assignedByUser = ((this.assignmentCount || {})[propName] || 0) > 1;\n\n        if (assignedByUser && isDefined(originalValue)) {\n          return originalValue;\n        }\n\n        var componentConfig = this.nzConfigService.getConfigForComponent(this._nzModuleName) || {};\n        var configValue = componentConfig[propName];\n        var ret = isDefined(configValue) ? configValue : originalValue;\n        return ret;\n      },\n      set: function set(value) {\n        // If the value is assigned, we consider the newly assigned value as 'assigned by user'.\n        this.assignmentCount = this.assignmentCount || {};\n        this.assignmentCount[propName] = (this.assignmentCount[propName] || 0) + 1;\n\n        if (originalDescriptor === null || originalDescriptor === void 0 ? void 0 : originalDescriptor.set) {\n          originalDescriptor.set.bind(this)(value);\n        } else {\n          this[privatePropName] = value;\n        }\n      },\n      configurable: true,\n      enumerable: true\n    };\n  };\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NZ_CONFIG, NzConfigService, WithConfig, ɵ0 }; //# sourceMappingURL=ng-zorro-antd-core-config.js.map","map":null,"metadata":{},"sourceType":"module"}