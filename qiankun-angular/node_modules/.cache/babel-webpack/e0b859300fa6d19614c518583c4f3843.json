{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { coerceElement, coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, Directive, ElementRef, NgZone, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar MutationObserverFactory = /*@__PURE__*/function () {\n  var MutationObserverFactory = /*#__PURE__*/function () {\n    function MutationObserverFactory() {\n      _classCallCheck(this, MutationObserverFactory);\n    }\n\n    _createClass(MutationObserverFactory, [{\n      key: \"create\",\n      value: function create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n      }\n    }]);\n\n    return MutationObserverFactory;\n  }();\n\n  MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n    return new (t || MutationObserverFactory)();\n  };\n\n  MutationObserverFactory.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function MutationObserverFactory_Factory() {\n      return new MutationObserverFactory();\n    },\n    token: MutationObserverFactory,\n    providedIn: \"root\"\n  });\n  return MutationObserverFactory;\n}();\n\nvar ContentObserver = /*@__PURE__*/function () {\n  var ContentObserver = /*#__PURE__*/function () {\n    function ContentObserver(_mutationObserverFactory) {\n      _classCallCheck(this, ContentObserver);\n\n      this._mutationObserverFactory = _mutationObserverFactory;\n      /** Keeps track of the existing MutationObservers so they can be reused. */\n\n      this._observedElements = new Map();\n    }\n\n    _createClass(ContentObserver, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this = this;\n\n        this._observedElements.forEach(function (_, element) {\n          return _this._cleanupObserver(element);\n        });\n      }\n    }, {\n      key: \"observe\",\n      value: function observe(elementOrRef) {\n        var _this2 = this;\n\n        var element = coerceElement(elementOrRef);\n        return new Observable(function (observer) {\n          var stream = _this2._observeElement(element);\n\n          var subscription = stream.subscribe(observer);\n          return function () {\n            subscription.unsubscribe();\n\n            _this2._unobserveElement(element);\n          };\n        });\n      }\n      /**\n       * Observes the given element by using the existing MutationObserver if available, or creating a\n       * new one if not.\n       */\n\n    }, {\n      key: \"_observeElement\",\n      value: function _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n          var stream = new Subject();\n\n          var observer = this._mutationObserverFactory.create(function (mutations) {\n            return stream.next(mutations);\n          });\n\n          if (observer) {\n            observer.observe(element, {\n              characterData: true,\n              childList: true,\n              subtree: true\n            });\n          }\n\n          this._observedElements.set(element, {\n            observer: observer,\n            stream: stream,\n            count: 1\n          });\n        } else {\n          this._observedElements.get(element).count++;\n        }\n\n        return this._observedElements.get(element).stream;\n      }\n      /**\n       * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n       * observing this element.\n       */\n\n    }, {\n      key: \"_unobserveElement\",\n      value: function _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n          this._observedElements.get(element).count--;\n\n          if (!this._observedElements.get(element).count) {\n            this._cleanupObserver(element);\n          }\n        }\n      }\n      /** Clean up the underlying MutationObserver for the specified element. */\n\n    }, {\n      key: \"_cleanupObserver\",\n      value: function _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n          var _this$_observedElemen = this._observedElements.get(element),\n              observer = _this$_observedElemen.observer,\n              stream = _this$_observedElemen.stream;\n\n          if (observer) {\n            observer.disconnect();\n          }\n\n          stream.complete();\n\n          this._observedElements.delete(element);\n        }\n      }\n    }]);\n\n    return ContentObserver;\n  }();\n\n  ContentObserver.ɵfac = function ContentObserver_Factory(t) {\n    return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n  };\n\n  ContentObserver.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function ContentObserver_Factory() {\n      return new ContentObserver(ɵɵinject(MutationObserverFactory));\n    },\n    token: ContentObserver,\n    providedIn: \"root\"\n  });\n  return ContentObserver;\n}();\n\nvar CdkObserveContent = /*@__PURE__*/function () {\n  var CdkObserveContent = /*#__PURE__*/function () {\n    function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n      _classCallCheck(this, CdkObserveContent);\n\n      this._contentObserver = _contentObserver;\n      this._elementRef = _elementRef;\n      this._ngZone = _ngZone;\n      /** Event emitted for each change in the element's content. */\n\n      this.event = new EventEmitter();\n      this._disabled = false;\n      this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n\n\n    _createClass(CdkObserveContent, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n      }\n      /** Debounce interval for emitting the changes. */\n\n    }, {\n      key: \"debounce\",\n      get: function get() {\n        return this._debounce;\n      },\n      set: function set(value) {\n        this._debounce = coerceNumberProperty(value);\n\n        this._subscribe();\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n          this._subscribe();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._unsubscribe();\n      }\n    }, {\n      key: \"_subscribe\",\n      value: function _subscribe() {\n        var _this3 = this;\n\n        this._unsubscribe();\n\n        var stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n\n\n        this._ngZone.runOutsideAngular(function () {\n          _this3._currentSubscription = (_this3.debounce ? stream.pipe(debounceTime(_this3.debounce)) : stream).subscribe(_this3.event);\n        });\n      }\n    }, {\n      key: \"_unsubscribe\",\n      value: function _unsubscribe() {\n        var _a;\n\n        (_a = this._currentSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      }\n    }]);\n\n    return CdkObserveContent;\n  }();\n\n  CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n    return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkObserveContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkObserveContent,\n    selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n    inputs: {\n      disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n      debounce: \"debounce\"\n    },\n    outputs: {\n      event: \"cdkObserveContent\"\n    },\n    exportAs: [\"cdkObserveContent\"]\n  });\n  return CdkObserveContent;\n}();\n\nvar ObserversModule = /*@__PURE__*/function () {\n  var ObserversModule = function ObserversModule() {\n    _classCallCheck(this, ObserversModule);\n  };\n\n  ObserversModule.ɵfac = function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  };\n\n  ObserversModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ObserversModule\n  });\n  ObserversModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MutationObserverFactory]\n  });\n  return ObserversModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule }; //# sourceMappingURL=observers.js.map","map":null,"metadata":{},"sourceType":"module"}