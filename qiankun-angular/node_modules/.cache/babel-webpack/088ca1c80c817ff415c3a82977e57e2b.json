{"ast":null,"code":"import _construct from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _set from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/set\";\nimport _get from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, IterableDiffers, ChangeDetectorRef, Host, Optional, ElementRef, Renderer2, Directive, ViewContainerRef, Inject, ViewEncapsulation, ViewChild, NgModule } from '@angular/core';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { __decorate, __metadata } from 'tslib';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, animationFrameScheduler, asapScheduler, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, auditTime, take, map } from 'rxjs/operators';\nimport { CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\nimport { DataSource } from '@angular/cdk/collections';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/no-animation';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\n\nfunction NzTreeNodeComponent_nz_tree_node_indents_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-tree-node-indents\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"indents\", ctx_r0.indents);\n  }\n}\n\nfunction NzTreeNodeComponent_nz_tree_node_toggle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"nz-tree-node-toggle\", 3);\n    ɵngcc0.ɵɵelement(1, \"span\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c0 = [[[\"nz-tree-node-toggle\"], [\"\", \"nz-tree-node-toggle\", \"\"]], [[\"nz-tree-node-checkbox\"]], [[\"nz-tree-node-option\"]], \"*\"];\nvar _c1 = [\"nz-tree-node-toggle, [nz-tree-node-toggle]\", \"nz-tree-node-checkbox\", \"nz-tree-node-option\", \"*\"];\n\nfunction NzTreeNodeIndentsComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    var isEnd_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵclassProp(\"ant-tree-indent-unit-end\", !isEnd_r1);\n  }\n}\n\nvar _c2 = [\"*\"];\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template(rf, ctx) {}\n\nfunction NzTreeVirtualScrollViewComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, NzTreeVirtualScrollViewComponent_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 4);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var item_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"data\", item_r1);\n  }\n}\n\nvar NzTreeNodeCheckboxComponent = /*@__PURE__*/function () {\n  var NzTreeNodeCheckboxComponent = /*#__PURE__*/function () {\n    function NzTreeNodeCheckboxComponent() {\n      _classCallCheck(this, NzTreeNodeCheckboxComponent);\n\n      this.nzClick = new EventEmitter();\n    }\n\n    _createClass(NzTreeNodeCheckboxComponent, [{\n      key: \"onClick\",\n      value: function onClick(e) {\n        if (!this.nzDisabled) {\n          this.nzClick.emit(e);\n        }\n      }\n    }]);\n\n    return NzTreeNodeCheckboxComponent;\n  }();\n\n  NzTreeNodeCheckboxComponent.ɵfac = function NzTreeNodeCheckboxComponent_Factory(t) {\n    return new (t || NzTreeNodeCheckboxComponent)();\n  };\n\n  NzTreeNodeCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeNodeCheckboxComponent,\n    selectors: [[\"nz-tree-node-checkbox\", 3, \"builtin\", \"\"]],\n    hostAttrs: [1, \"ant-tree-checkbox\"],\n    hostVars: 6,\n    hostBindings: function NzTreeNodeCheckboxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeCheckboxComponent_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-checkbox-checked\", ctx.nzChecked)(\"ant-tree-checkbox-indeterminate\", ctx.nzIndeterminate)(\"ant-tree-checkbox-disabled\", ctx.nzDisabled);\n      }\n    },\n    inputs: {\n      nzChecked: \"nzChecked\",\n      nzIndeterminate: \"nzIndeterminate\",\n      nzDisabled: \"nzDisabled\"\n    },\n    outputs: {\n      nzClick: \"nzClick\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[1, \"ant-tree-checkbox-inner\"]],\n    template: function NzTreeNodeCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"span\", 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzTreeNodeCheckboxComponent.prototype, \"nzDisabled\", void 0);\n\n  return NzTreeNodeCheckboxComponent;\n}();\n\nvar NzTreeView = /*@__PURE__*/function () {\n  var NzTreeView = /*#__PURE__*/function (_CdkTree) {\n    _inherits(NzTreeView, _CdkTree);\n\n    var _super = _createSuper(NzTreeView);\n\n    function NzTreeView(differs, changeDetectorRef, noAnimation, directionality) {\n      var _this;\n\n      _classCallCheck(this, NzTreeView);\n\n      _this = _super.call(this, differs, changeDetectorRef);\n      _this.differs = differs;\n      _this.changeDetectorRef = changeDetectorRef;\n      _this.noAnimation = noAnimation;\n      _this.directionality = directionality;\n      _this.destroy$ = new Subject();\n      _this.dir = 'ltr';\n      _this._dataSourceChanged = new Subject();\n      _this.nzDirectoryTree = false;\n      _this.nzBlockNode = false;\n      return _this;\n    }\n\n    _createClass(NzTreeView, [{\n      key: \"dataSource\",\n      get: function get() {\n        return _get(_getPrototypeOf(NzTreeView.prototype), \"dataSource\", this);\n      },\n      set: function set(dataSource) {\n        _set(_getPrototypeOf(NzTreeView.prototype), \"dataSource\", dataSource, this, true);\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        var _a;\n\n        _get(_getPrototypeOf(NzTreeView.prototype), \"ngOnInit\", this).call(this);\n\n        if (this.directionality) {\n          this.dir = this.directionality.value;\n          (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n            _this2.dir = direction;\n\n            _this2.changeDetectorRef.detectChanges();\n          });\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        _get(_getPrototypeOf(NzTreeView.prototype), \"ngOnDestroy\", this).call(this);\n\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }, {\n      key: \"renderNodeChanges\",\n      value: function renderNodeChanges(data, dataDiffer, viewContainer, parentData) {\n        _get(_getPrototypeOf(NzTreeView.prototype), \"renderNodeChanges\", this).call(this, data, dataDiffer, viewContainer, parentData);\n\n        this._dataSourceChanged.next();\n      }\n    }]);\n\n    return NzTreeView;\n  }(CdkTree);\n\n  NzTreeView.ɵfac = function NzTreeView_Factory(t) {\n    return new (t || NzTreeView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzNoAnimationDirective, 9), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  NzTreeView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeView,\n    selectors: [[\"ng-component\"]],\n    inputs: {\n      nzDirectoryTree: \"nzDirectoryTree\",\n      nzBlockNode: \"nzBlockNode\",\n      dataSource: [\"nzDataSource\", \"dataSource\"],\n      treeControl: [\"nzTreeControl\", \"treeControl\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function NzTreeView_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeView.prototype, \"nzDirectoryTree\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeView.prototype, \"nzBlockNode\", void 0);\n\n  return NzTreeView;\n}();\n\nvar NzTreeNodeComponent = /*@__PURE__*/function () {\n  var NzTreeNodeComponent = /*#__PURE__*/function (_CdkTreeNode) {\n    _inherits(NzTreeNodeComponent, _CdkTreeNode);\n\n    var _super2 = _createSuper(NzTreeNodeComponent);\n\n    function NzTreeNodeComponent(elementRef, tree, renderer, cdr) {\n      var _this3;\n\n      _classCallCheck(this, NzTreeNodeComponent);\n\n      _this3 = _super2.call(this, elementRef, tree);\n      _this3.elementRef = elementRef;\n      _this3.tree = tree;\n      _this3.renderer = renderer;\n      _this3.cdr = cdr;\n      _this3.indents = [];\n      _this3.disabled = false;\n      _this3.selected = false;\n      _this3.isLeaf = false;\n\n      _this3._elementRef.nativeElement.classList.add('ant-tree-treenode');\n\n      return _this3;\n    }\n\n    _createClass(NzTreeNodeComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n      }\n    }, {\n      key: \"disable\",\n      value: function disable() {\n        this.disabled = true;\n        this.updateDisabledClass();\n      }\n    }, {\n      key: \"enable\",\n      value: function enable() {\n        this.disabled = false;\n        this.updateDisabledClass();\n      }\n    }, {\n      key: \"select\",\n      value: function select() {\n        this.selected = true;\n        this.updateSelectedClass();\n      }\n    }, {\n      key: \"deselect\",\n      value: function deselect() {\n        this.selected = false;\n        this.updateSelectedClass();\n      }\n    }, {\n      key: \"setIndents\",\n      value: function setIndents(indents) {\n        this.indents = indents;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"updateSelectedClass\",\n      value: function updateSelectedClass() {\n        if (this.selected) {\n          this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        } else {\n          this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n        }\n      }\n    }, {\n      key: \"updateDisabledClass\",\n      value: function updateDisabledClass() {\n        if (this.disabled) {\n          this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        } else {\n          this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n        }\n      }\n    }]);\n\n    return NzTreeNodeComponent;\n  }(CdkTreeNode);\n\n  NzTreeNodeComponent.ɵfac = function NzTreeNodeComponent_Factory(t) {\n    return new (t || NzTreeNodeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzTreeView), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  NzTreeNodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeNodeComponent,\n    selectors: [[\"nz-tree-node\", 3, \"builtin\", \"\"]],\n    hostVars: 4,\n    hostBindings: function NzTreeNodeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-switcher-open\", ctx.isExpanded)(\"ant-tree-treenode-switcher-close\", !ctx.isExpanded);\n      }\n    },\n    exportAs: [\"nzTreeNode\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNode,\n      useExisting: NzTreeNodeComponent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 6,\n    vars: 2,\n    consts: [[3, \"indents\", 4, \"ngIf\"], [\"class\", \"nz-tree-leaf-line-icon\", \"nzTreeNodeNoopToggle\", \"\", 4, \"ngIf\"], [3, \"indents\"], [\"nzTreeNodeNoopToggle\", \"\", 1, \"nz-tree-leaf-line-icon\"], [1, \"ant-tree-switcher-leaf-line\"]],\n    template: function NzTreeNodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeComponent_nz_tree_node_indents_0_Template, 1, 1, \"nz-tree-node-indents\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, NzTreeNodeComponent_nz_tree_node_toggle_2_Template, 2, 0, \"nz-tree-node-toggle\", 1);\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵprojection(4, 2);\n        ɵngcc0.ɵɵprojection(5, 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.indents.length && ctx.isLeaf);\n      }\n    },\n    directives: function directives() {\n      return [ɵngcc3.NgIf, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeNodeComponent;\n}();\n\nvar NzTreeNodeDefDirective = /*@__PURE__*/function () {\n  var NzTreeNodeDefDirective = /*#__PURE__*/function (_CdkTreeNodeDef) {\n    _inherits(NzTreeNodeDefDirective, _CdkTreeNodeDef);\n\n    var _super3 = _createSuper(NzTreeNodeDefDirective);\n\n    function NzTreeNodeDefDirective() {\n      _classCallCheck(this, NzTreeNodeDefDirective);\n\n      return _super3.apply(this, arguments);\n    }\n\n    return NzTreeNodeDefDirective;\n  }(CdkTreeNodeDef);\n\n  NzTreeNodeDefDirective.ɵfac = function NzTreeNodeDefDirective_Factory(t) {\n    return ɵNzTreeNodeDefDirective_BaseFactory(t || NzTreeNodeDefDirective);\n  };\n\n  NzTreeNodeDefDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeDefDirective,\n    selectors: [[\"\", \"nzTreeNodeDef\", \"\"]],\n    inputs: {\n      when: [\"nzTreeNodeDefWhen\", \"when\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeDef,\n      useExisting: NzTreeNodeDefDirective\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return NzTreeNodeDefDirective;\n}();\n\nvar NzTreeVirtualScrollNodeOutletDirective = /*@__PURE__*/function () {\n  var NzTreeVirtualScrollNodeOutletDirective = /*#__PURE__*/function () {\n    function NzTreeVirtualScrollNodeOutletDirective(_viewContainerRef) {\n      _classCallCheck(this, NzTreeVirtualScrollNodeOutletDirective);\n\n      this._viewContainerRef = _viewContainerRef;\n      this._viewRef = null;\n    }\n\n    _createClass(NzTreeVirtualScrollNodeOutletDirective, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var recreateView = this.shouldRecreateView(changes);\n\n        if (recreateView) {\n          var viewContainerRef = this._viewContainerRef;\n\n          if (this._viewRef) {\n            viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n          }\n\n          this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n\n          if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n            CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n          }\n        } else if (this._viewRef && this.data.context) {\n          this.updateExistingContext(this.data.context);\n        }\n      }\n    }, {\n      key: \"shouldRecreateView\",\n      value: function shouldRecreateView(changes) {\n        var ctxChange = changes.data;\n        return !!changes.data || ctxChange && this.hasContextShapeChanged(ctxChange);\n      }\n    }, {\n      key: \"hasContextShapeChanged\",\n      value: function hasContextShapeChanged(ctxChange) {\n        var prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        var currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          var _iterator = _createForOfIteratorHelper(currCtxKeys),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var propName = _step.value;\n\n              if (prevCtxKeys.indexOf(propName) === -1) {\n                return true;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"updateExistingContext\",\n      value: function updateExistingContext(ctx) {\n        for (var _i = 0, _Object$keys = Object.keys(ctx); _i < _Object$keys.length; _i++) {\n          var propName = _Object$keys[_i];\n          this._viewRef.context[propName] = this.data.context[propName];\n        }\n      }\n    }]);\n\n    return NzTreeVirtualScrollNodeOutletDirective;\n  }();\n\n  NzTreeVirtualScrollNodeOutletDirective.ɵfac = function NzTreeVirtualScrollNodeOutletDirective_Factory(t) {\n    return new (t || NzTreeVirtualScrollNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  NzTreeVirtualScrollNodeOutletDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeVirtualScrollNodeOutletDirective,\n    selectors: [[\"\", \"nzTreeVirtualScrollNodeOutlet\", \"\"]],\n    inputs: {\n      data: \"data\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return NzTreeVirtualScrollNodeOutletDirective;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction getParent(nodes, node, getLevel) {\n  var index = nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  var level = getLevel(node);\n\n  for (index--; index >= 0; index--) {\n    var preLevel = getLevel(nodes[index]);\n\n    if (preLevel + 1 === level) {\n      return nodes[index];\n    }\n\n    if (preLevel + 1 < level) {\n      return null;\n    }\n  }\n\n  return null;\n}\n\nfunction getNextSibling(nodes, node, getLevel, _index) {\n  var index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n\n  if (index < 0) {\n    return null;\n  }\n\n  var level = getLevel(node);\n\n  for (index++; index < nodes.length; index++) {\n    var nextLevel = getLevel(nodes[index]);\n\n    if (nextLevel < level) {\n      return null;\n    }\n\n    if (nextLevel === level) {\n      return nodes[index];\n    }\n  }\n\n  return null;\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * [true, false, false, true] => 1001\n */\n\n\nfunction booleanArrayToString(arr) {\n  return arr.map(function (i) {\n    return i ? 1 : 0;\n  }).join('');\n}\n\nvar BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\nvar NzTreeNodeIndentsComponent = /*@__PURE__*/function () {\n  var NzTreeNodeIndentsComponent = function NzTreeNodeIndentsComponent() {\n    _classCallCheck(this, NzTreeNodeIndentsComponent);\n\n    this.indents = [];\n  };\n\n  NzTreeNodeIndentsComponent.ɵfac = function NzTreeNodeIndentsComponent_Factory(t) {\n    return new (t || NzTreeNodeIndentsComponent)();\n  };\n\n  NzTreeNodeIndentsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeNodeIndentsComponent,\n    selectors: [[\"nz-tree-node-indents\"]],\n    hostAttrs: [1, \"ant-tree-indent\"],\n    inputs: {\n      indents: \"indents\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"ant-tree-indent-unit\", 3, \"ant-tree-indent-unit-end\", 4, \"ngFor\", \"ngForOf\"], [1, \"ant-tree-indent-unit\"]],\n    template: function NzTreeNodeIndentsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzTreeNodeIndentsComponent_span_0_Template, 1, 2, \"span\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.indents);\n      }\n    },\n    directives: [ɵngcc3.NgForOf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeNodeIndentsComponent;\n}();\n\nvar NzTreeNodeIndentLineDirective = /*@__PURE__*/function () {\n  var NzTreeNodeIndentLineDirective = /*#__PURE__*/function () {\n    function NzTreeNodeIndentLineDirective(treeNode, tree, cdr) {\n      var _this4 = this;\n\n      _classCallCheck(this, NzTreeNodeIndentLineDirective);\n\n      this.treeNode = treeNode;\n      this.tree = tree;\n      this.cdr = cdr;\n      this.isLast = 'unset';\n      this.isLeaf = false;\n      this.preNodeRef = null;\n      this.nextNodeRef = null;\n      this.currentIndents = '';\n      this.buildIndents();\n      this.checkLast();\n      /**\n       * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n       * and setting the indents can cause frame rate loss if it is set too often.\n       */\n\n      this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged).pipe(auditTime(0, BUILD_INDENTS_SCHEDULER)).subscribe(function () {\n        _this4.buildIndents();\n\n        _this4.checkAdjacent();\n\n        _this4.cdr.markForCheck();\n      });\n    }\n\n    _createClass(NzTreeNodeIndentLineDirective, [{\n      key: \"getIndents\",\n      value: function getIndents() {\n        var indents = [];\n        var nodes = this.tree.treeControl.dataNodes;\n        var getLevel = this.tree.treeControl.getLevel;\n        var parent = getParent(nodes, this.treeNode.data, getLevel);\n\n        while (parent) {\n          var parentNextSibling = getNextSibling(nodes, parent, getLevel);\n\n          if (parentNextSibling) {\n            indents.unshift(true);\n          } else {\n            indents.unshift(false);\n          }\n\n          parent = getParent(nodes, parent, getLevel);\n        }\n\n        return indents;\n      }\n    }, {\n      key: \"buildIndents\",\n      value: function buildIndents() {\n        if (this.treeNode.data) {\n          var indents = this.getIndents();\n          var diffString = booleanArrayToString(indents);\n\n          if (diffString !== this.currentIndents) {\n            this.treeNode.setIndents(this.getIndents());\n            this.currentIndents = diffString;\n          }\n        }\n      }\n      /**\n       * We need to add an class name for the last child node,\n       * this result can also be affected when the adjacent nodes are changed.\n       */\n\n    }, {\n      key: \"checkAdjacent\",\n      value: function checkAdjacent() {\n        var nodes = this.tree.treeControl.dataNodes;\n        var index = nodes.indexOf(this.treeNode.data);\n        var preNode = nodes[index - 1] || null;\n        var nextNode = nodes[index + 1] || null;\n\n        if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n          this.checkLast(index);\n        }\n\n        this.preNodeRef = preNode;\n        this.nextNodeRef = nextNode;\n      }\n    }, {\n      key: \"checkLast\",\n      value: function checkLast(index) {\n        var nodes = this.tree.treeControl.dataNodes;\n        this.isLeaf = this.treeNode.isLeaf;\n        this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.preNodeRef = null;\n        this.nextNodeRef = null;\n        this.changeSubscription.unsubscribe();\n      }\n    }]);\n\n    return NzTreeNodeIndentLineDirective;\n  }();\n\n  NzTreeNodeIndentLineDirective.ɵfac = function NzTreeNodeIndentLineDirective_Factory(t) {\n    return new (t || NzTreeNodeIndentLineDirective)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent), ɵngcc0.ɵɵdirectiveInject(NzTreeView), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  NzTreeNodeIndentLineDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeIndentLineDirective,\n    selectors: [[\"nz-tree-node\", \"nzTreeNodeIndentLine\", \"\"]],\n    hostAttrs: [1, \"ant-tree-show-line\"],\n    hostVars: 2,\n    hostBindings: function NzTreeNodeIndentLineDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-treenode-leaf-last\", ctx.isLast && ctx.isLeaf);\n      }\n    }\n  });\n  return NzTreeNodeIndentLineDirective;\n}();\n\nvar NzTreeNodeOptionComponent = /*@__PURE__*/function () {\n  var NzTreeNodeOptionComponent = /*#__PURE__*/function () {\n    function NzTreeNodeOptionComponent(treeNode) {\n      _classCallCheck(this, NzTreeNodeOptionComponent);\n\n      this.treeNode = treeNode;\n      this.nzSelected = false;\n      this.nzDisabled = false;\n      this.nzClick = new EventEmitter();\n    }\n\n    _createClass(NzTreeNodeOptionComponent, [{\n      key: \"isExpanded\",\n      get: function get() {\n        return this.treeNode.isExpanded;\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(e) {\n        if (!this.nzDisabled) {\n          this.nzClick.emit(e);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var nzDisabled = changes.nzDisabled,\n            nzSelected = changes.nzSelected;\n\n        if (nzDisabled) {\n          if (nzDisabled.currentValue) {\n            this.treeNode.disable();\n          } else {\n            this.treeNode.enable();\n          }\n        }\n\n        if (nzSelected) {\n          if (nzSelected.currentValue) {\n            this.treeNode.select();\n          } else {\n            this.treeNode.deselect();\n          }\n        }\n      }\n    }]);\n\n    return NzTreeNodeOptionComponent;\n  }();\n\n  NzTreeNodeOptionComponent.ɵfac = function NzTreeNodeOptionComponent_Factory(t) {\n    return new (t || NzTreeNodeOptionComponent)(ɵngcc0.ɵɵdirectiveInject(NzTreeNodeComponent));\n  };\n\n  NzTreeNodeOptionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeNodeOptionComponent,\n    selectors: [[\"nz-tree-node-option\"]],\n    hostAttrs: [1, \"ant-tree-node-content-wrapper\"],\n    hostVars: 4,\n    hostBindings: function NzTreeNodeOptionComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzTreeNodeOptionComponent_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-node-content-wrapper-open\", ctx.isExpanded)(\"ant-tree-node-selected\", ctx.nzSelected);\n      }\n    },\n    inputs: {\n      nzSelected: \"nzSelected\",\n      nzDisabled: \"nzDisabled\"\n    },\n    outputs: {\n      nzClick: \"nzClick\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"ant-tree-title\"]],\n    template: function NzTreeNodeOptionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeOptionComponent.prototype, \"nzSelected\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzTreeNodeOptionComponent.prototype, \"nzDisabled\", void 0);\n\n  return NzTreeNodeOptionComponent;\n}();\n\nvar ɵNzTreeNodeDefDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeDefDirective);\n\nvar NzTreeNodeOutletDirective = /*@__PURE__*/function () {\n  var NzTreeNodeOutletDirective = function NzTreeNodeOutletDirective(viewContainer, _node) {\n    _classCallCheck(this, NzTreeNodeOutletDirective);\n\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  };\n\n  NzTreeNodeOutletDirective.ɵfac = function NzTreeNodeOutletDirective_Factory(t) {\n    return new (t || NzTreeNodeOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n  };\n\n  NzTreeNodeOutletDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeOutletDirective,\n    selectors: [[\"\", \"nzTreeNodeOutlet\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeOutlet,\n      useExisting: NzTreeNodeOutletDirective\n    }])]\n  });\n  return NzTreeNodeOutletDirective;\n}();\n\nvar NzTreeNodePaddingDirective = /*@__PURE__*/function () {\n  var NzTreeNodePaddingDirective = /*#__PURE__*/function (_CdkTreeNodePadding) {\n    _inherits(NzTreeNodePaddingDirective, _CdkTreeNodePadding);\n\n    var _super4 = _createSuper(NzTreeNodePaddingDirective);\n\n    function NzTreeNodePaddingDirective() {\n      var _this5;\n\n      _classCallCheck(this, NzTreeNodePaddingDirective);\n\n      _this5 = _super4.apply(this, arguments);\n      _this5._indent = 24;\n      return _this5;\n    }\n\n    _createClass(NzTreeNodePaddingDirective, [{\n      key: \"level\",\n      get: function get() {\n        return this._level;\n      },\n      set: function set(value) {\n        this._setLevelInput(value);\n      }\n    }, {\n      key: \"indent\",\n      get: function get() {\n        return this._indent;\n      },\n      set: function set(indent) {\n        this._setIndentInput(indent);\n      }\n    }]);\n\n    return NzTreeNodePaddingDirective;\n  }(CdkTreeNodePadding);\n\n  NzTreeNodePaddingDirective.ɵfac = function NzTreeNodePaddingDirective_Factory(t) {\n    return ɵNzTreeNodePaddingDirective_BaseFactory(t || NzTreeNodePaddingDirective);\n  };\n\n  NzTreeNodePaddingDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodePaddingDirective,\n    selectors: [[\"\", \"nzTreeNodePadding\", \"\"]],\n    inputs: {\n      level: [\"nzTreeNodePadding\", \"level\"],\n      indent: [\"nzTreeNodePaddingIndent\", \"indent\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodePadding,\n      useExisting: NzTreeNodePaddingDirective\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return NzTreeNodePaddingDirective;\n}();\n\nvar ɵNzTreeNodePaddingDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodePaddingDirective);\n\nvar NzTreeNodeNoopToggleDirective = /*@__PURE__*/function () {\n  var NzTreeNodeNoopToggleDirective = function NzTreeNodeNoopToggleDirective() {\n    _classCallCheck(this, NzTreeNodeNoopToggleDirective);\n  };\n\n  NzTreeNodeNoopToggleDirective.ɵfac = function NzTreeNodeNoopToggleDirective_Factory(t) {\n    return new (t || NzTreeNodeNoopToggleDirective)();\n  };\n\n  NzTreeNodeNoopToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeNoopToggleDirective,\n    selectors: [[\"nz-tree-node-toggle\", \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeNoopToggle\", \"\"]],\n    hostAttrs: [1, \"ant-tree-switcher\", \"ant-tree-switcher-noop\"]\n  });\n  return NzTreeNodeNoopToggleDirective;\n}();\n\nvar NzTreeNodeToggleDirective = /*@__PURE__*/function () {\n  var NzTreeNodeToggleDirective = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n    _inherits(NzTreeNodeToggleDirective, _CdkTreeNodeToggle);\n\n    var _super5 = _createSuper(NzTreeNodeToggleDirective);\n\n    function NzTreeNodeToggleDirective() {\n      _classCallCheck(this, NzTreeNodeToggleDirective);\n\n      return _super5.apply(this, arguments);\n    }\n\n    _createClass(NzTreeNodeToggleDirective, [{\n      key: \"recursive\",\n      get: function get() {\n        return this._recursive;\n      },\n      set: function set(value) {\n        this._recursive = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"isExpanded\",\n      get: function get() {\n        return this._treeNode.isExpanded;\n      }\n    }]);\n\n    return NzTreeNodeToggleDirective;\n  }(CdkTreeNodeToggle);\n\n  NzTreeNodeToggleDirective.ɵfac = function NzTreeNodeToggleDirective_Factory(t) {\n    return ɵNzTreeNodeToggleDirective_BaseFactory(t || NzTreeNodeToggleDirective);\n  };\n\n  NzTreeNodeToggleDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeToggleDirective,\n    selectors: [[\"nz-tree-node-toggle\", 3, \"nzTreeNodeNoopToggle\", \"\"], [\"\", \"nzTreeNodeToggle\", \"\"]],\n    hostAttrs: [1, \"ant-tree-switcher\"],\n    hostVars: 4,\n    hostBindings: function NzTreeNodeToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-switcher_open\", ctx.isExpanded)(\"ant-tree-switcher_close\", !ctx.isExpanded);\n      }\n    },\n    inputs: {\n      recursive: [\"nzTreeNodeToggleRecursive\", \"recursive\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTreeNodeToggle,\n      useExisting: NzTreeNodeToggleDirective\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return NzTreeNodeToggleDirective;\n}();\n\nvar ɵNzTreeNodeToggleDirective_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NzTreeNodeToggleDirective);\n\nvar NzTreeNodeToggleRotateIconDirective = /*@__PURE__*/function () {\n  var NzTreeNodeToggleRotateIconDirective = function NzTreeNodeToggleRotateIconDirective() {\n    _classCallCheck(this, NzTreeNodeToggleRotateIconDirective);\n  };\n\n  NzTreeNodeToggleRotateIconDirective.ɵfac = function NzTreeNodeToggleRotateIconDirective_Factory(t) {\n    return new (t || NzTreeNodeToggleRotateIconDirective)();\n  };\n\n  NzTreeNodeToggleRotateIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeToggleRotateIconDirective,\n    selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleRotateIcon\", \"\"]],\n    hostAttrs: [1, \"ant-tree-switcher-icon\"]\n  });\n  return NzTreeNodeToggleRotateIconDirective;\n}();\n\nvar NzTreeNodeToggleActiveIconDirective = /*@__PURE__*/function () {\n  var NzTreeNodeToggleActiveIconDirective = function NzTreeNodeToggleActiveIconDirective() {\n    _classCallCheck(this, NzTreeNodeToggleActiveIconDirective);\n  };\n\n  NzTreeNodeToggleActiveIconDirective.ɵfac = function NzTreeNodeToggleActiveIconDirective_Factory(t) {\n    return new (t || NzTreeNodeToggleActiveIconDirective)();\n  };\n\n  NzTreeNodeToggleActiveIconDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzTreeNodeToggleActiveIconDirective,\n    selectors: [[\"\", \"nz-icon\", \"\", \"nzTreeNodeToggleActiveIcon\", \"\"]],\n    hostAttrs: [1, \"ant-tree-switcher-loading-icon\"]\n  });\n  return NzTreeNodeToggleActiveIconDirective;\n}();\n\nvar NzTreeViewComponent = /*@__PURE__*/function () {\n  var NzTreeViewComponent = /*#__PURE__*/function (_NzTreeView) {\n    _inherits(NzTreeViewComponent, _NzTreeView);\n\n    var _super6 = _createSuper(NzTreeViewComponent);\n\n    function NzTreeViewComponent() {\n      var _this6;\n\n      _classCallCheck(this, NzTreeViewComponent);\n\n      _this6 = _super6.apply(this, arguments);\n      _this6._afterViewInit = false;\n      return _this6;\n    }\n\n    _createClass(NzTreeViewComponent, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this7 = this;\n\n        Promise.resolve().then(function () {\n          _this7._afterViewInit = true;\n\n          _this7.changeDetectorRef.markForCheck();\n        });\n      }\n    }]);\n\n    return NzTreeViewComponent;\n  }(NzTreeView);\n\n  NzTreeViewComponent.ɵfac = function NzTreeViewComponent_Factory(t) {\n    return ɵNzTreeViewComponent_BaseFactory(t || NzTreeViewComponent);\n  };\n\n  NzTreeViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeViewComponent,\n    selectors: [[\"nz-tree-view\"]],\n    viewQuery: function NzTreeViewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 3);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n      }\n    },\n    hostAttrs: [1, \"ant-tree\"],\n    hostVars: 6,\n    hostBindings: function NzTreeViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    exportAs: [\"nzTreeView\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CdkTree,\n      useExisting: NzTreeViewComponent\n    }, {\n      provide: NzTreeView,\n      useExisting: NzTreeViewComponent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"ant-tree-list-holder\"], [1, \"ant-tree-list-holder-inner\"], [\"nzTreeNodeOutlet\", \"\"]],\n    template: function NzTreeViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementContainer(2, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@.disabled\", !ctx._afterViewInit || (ctx.noAnimation == null ? null : ctx.noAnimation.nzNoAnimation))(\"@treeCollapseMotion\", ctx._nodeOutlet.viewContainer.length);\n      }\n    },\n    directives: [NzTreeNodeOutletDirective],\n    encapsulation: 2,\n    data: {\n      animation: [treeCollapseMotion]\n    },\n    changeDetection: 0\n  });\n  return NzTreeViewComponent;\n}();\n\nvar ɵNzTreeViewComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NzTreeViewComponent);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar DEFAULT_SIZE = 28;\n\nvar NzTreeVirtualScrollViewComponent = /*@__PURE__*/function () {\n  var NzTreeVirtualScrollViewComponent = /*#__PURE__*/function (_NzTreeView2) {\n    _inherits(NzTreeVirtualScrollViewComponent, _NzTreeView2);\n\n    var _super7 = _createSuper(NzTreeVirtualScrollViewComponent);\n\n    function NzTreeVirtualScrollViewComponent() {\n      var _this8;\n\n      _classCallCheck(this, NzTreeVirtualScrollViewComponent);\n\n      _this8 = _super7.apply(this, arguments);\n      _this8.itemSize = DEFAULT_SIZE;\n      /**\n       * @deprecated use `nzItemSize` instead\n       * @breaking-change 12.0.0\n       */\n\n      _this8.nzNodeWidth = DEFAULT_SIZE;\n      _this8.nzItemSize = DEFAULT_SIZE;\n      _this8.nzMinBufferPx = DEFAULT_SIZE * 5;\n      _this8.nzMaxBufferPx = DEFAULT_SIZE * 10;\n      _this8.nodes = [];\n      return _this8;\n    }\n\n    _createClass(NzTreeVirtualScrollViewComponent, [{\n      key: \"renderNodeChanges\",\n      value: function renderNodeChanges(data) {\n        var _this9 = this;\n\n        this.nodes = _construct(Array, _toConsumableArray(data)).map(function (n, i) {\n          return _this9.createNode(n, i);\n        });\n      }\n    }, {\n      key: \"createNode\",\n      value: function createNode(nodeData, index) {\n        var node = this._getNodeDef(nodeData, index);\n\n        var context = new CdkTreeNodeOutletContext(nodeData);\n\n        if (this.treeControl.getLevel) {\n          context.level = this.treeControl.getLevel(nodeData);\n        } else {\n          context.level = 0;\n        }\n\n        return {\n          data: nodeData,\n          context: context,\n          nodeDef: node\n        };\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var nzNodeWidth = changes.nzNodeWidth,\n            nzItemSize = changes.nzItemSize;\n\n        if (nzNodeWidth) {\n          warnDeprecation('`nzNodeWidth` in nz-tree-virtual-scroll-view will be removed in 12.0.0, please use `nzItemSize` instead.');\n          this.itemSize = nzNodeWidth.currentValue;\n        }\n\n        if (nzItemSize) {\n          this.itemSize = nzItemSize.currentValue;\n        }\n      }\n    }]);\n\n    return NzTreeVirtualScrollViewComponent;\n  }(NzTreeView);\n\n  NzTreeVirtualScrollViewComponent.ɵfac = function NzTreeVirtualScrollViewComponent_Factory(t) {\n    return ɵNzTreeVirtualScrollViewComponent_BaseFactory(t || NzTreeVirtualScrollViewComponent);\n  };\n\n  NzTreeVirtualScrollViewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzTreeVirtualScrollViewComponent,\n    selectors: [[\"nz-tree-virtual-scroll-view\"]],\n    viewQuery: function NzTreeVirtualScrollViewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NzTreeNodeOutletDirective, 3);\n        ɵngcc0.ɵɵviewQuery(CdkVirtualScrollViewport, 3);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.virtualScrollViewport = _t.first);\n      }\n    },\n    hostAttrs: [1, \"ant-tree\"],\n    hostVars: 6,\n    hostBindings: function NzTreeVirtualScrollViewComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-tree-block-node\", ctx.nzDirectoryTree || ctx.nzBlockNode)(\"ant-tree-directory\", ctx.nzDirectoryTree)(\"ant-tree-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzNodeWidth: \"nzNodeWidth\",\n      nzItemSize: \"nzItemSize\",\n      nzMinBufferPx: \"nzMinBufferPx\",\n      nzMaxBufferPx: \"nzMaxBufferPx\"\n    },\n    exportAs: [\"nzTreeVirtualScrollView\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NzTreeView,\n      useExisting: NzTreeVirtualScrollViewComponent\n    }, {\n      provide: CdkTree,\n      useExisting: NzTreeVirtualScrollViewComponent\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 4,\n    consts: [[1, \"ant-tree-list\"], [1, \"ant-tree-list-holder\", 3, \"itemSize\", \"minBufferPx\", \"maxBufferPx\"], [4, \"cdkVirtualFor\", \"cdkVirtualForOf\"], [\"nzTreeNodeOutlet\", \"\"], [\"nzTreeVirtualScrollNodeOutlet\", \"\", 3, \"data\"]],\n    template: function NzTreeVirtualScrollViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"cdk-virtual-scroll-viewport\", 1);\n        ɵngcc0.ɵɵtemplate(2, NzTreeVirtualScrollViewComponent_ng_container_2_Template, 2, 1, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementContainer(3, 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"itemSize\", ctx.itemSize)(\"minBufferPx\", ctx.nzMinBufferPx)(\"maxBufferPx\", ctx.nzMaxBufferPx);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"cdkVirtualForOf\", ctx.nodes);\n      }\n    },\n    directives: [ɵngcc4.CdkVirtualScrollViewport, ɵngcc4.CdkFixedSizeVirtualScroll, ɵngcc4.CdkVirtualForOf, NzTreeNodeOutletDirective, NzTreeVirtualScrollNodeOutletDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzTreeVirtualScrollViewComponent;\n}();\n\nvar ɵNzTreeVirtualScrollViewComponent_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(NzTreeVirtualScrollViewComponent);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nvar treeWithControlComponents = [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n\nvar NzTreeViewModule = /*@__PURE__*/function () {\n  var NzTreeViewModule = function NzTreeViewModule() {\n    _classCallCheck(this, NzTreeViewModule);\n  };\n\n  NzTreeViewModule.ɵfac = function NzTreeViewModule_Factory(t) {\n    return new (t || NzTreeViewModule)();\n  };\n\n  NzTreeViewModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzTreeViewModule\n  });\n  NzTreeViewModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule]]\n  });\n  return NzTreeViewModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzTreeViewModule, {\n    declarations: function declarations() {\n      return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule];\n    },\n    exports: function exports() {\n      return [NzTreeView, NzTreeNodeOutletDirective, NzTreeViewComponent, NzTreeNodeDefDirective, NzTreeNodeComponent, NzTreeNodeToggleDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleRotateIconDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeOptionComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeCheckboxComponent, NzTreeNodeIndentsComponent, NzTreeVirtualScrollViewComponent, NzTreeVirtualScrollNodeOutletDirective, NzTreeNodeIndentLineDirective];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzTreeFlattener = /*#__PURE__*/function () {\n  function NzTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, NzTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(NzTreeFlattener, [{\n    key: \"flattenNode\",\n    value: function flattenNode(node, level, resultNodes, parentMap) {\n      var _this10 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this10.flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"flattenChildren\",\n    value: function flattenChildren(children, level, resultNodes, parentMap) {\n      var _this11 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index !== children.length - 1);\n\n        _this11.flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this12 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this12.flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this13 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this13.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this13.isExpandable(node)) {\n          currentExpand[_this13.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return NzTreeFlattener;\n}();\n\nvar NzTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(NzTreeFlatDataSource, _DataSource);\n\n  var _super8 = _createSuper(NzTreeFlatDataSource);\n\n  function NzTreeFlatDataSource(_treeControl, _treeFlattener) {\n    var _this14;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, NzTreeFlatDataSource);\n\n    _this14 = _super8.call(this);\n    _this14._treeControl = _treeControl;\n    _this14._treeFlattener = _treeFlattener;\n    _this14._flattenedData = new BehaviorSubject([]);\n    _this14._expandedData = new BehaviorSubject([]);\n    _this14._data = new BehaviorSubject(initialData);\n\n    _this14.flatNodes();\n\n    return _this14;\n  }\n\n  _createClass(NzTreeFlatDataSource, [{\n    key: \"setData\",\n    value: function setData(value) {\n      this._data.next(value);\n\n      this.flatNodes();\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data.getValue();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this15 = this;\n\n      var changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this15._expandedData.next(_this15._treeFlattener.expandFlattenedNodes(_this15._flattenedData.value, _this15._treeControl));\n\n        return _this15._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }, {\n    key: \"flatNodes\",\n    value: function flatNodes() {\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }]);\n\n  return NzTreeFlatDataSource;\n}(DataSource);\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzTreeFlatDataSource, NzTreeFlattener, NzTreeNodeCheckboxComponent, NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent, NzTreeNodeNoopToggleDirective, NzTreeNodeOptionComponent, NzTreeNodeOutletDirective, NzTreeNodePaddingDirective, NzTreeNodeToggleActiveIconDirective, NzTreeNodeToggleDirective, NzTreeNodeToggleRotateIconDirective, NzTreeViewComponent, NzTreeViewModule, NzTreeVirtualScrollNodeOutletDirective, NzTreeVirtualScrollViewComponent, getNextSibling, getParent, NzTreeView as ɵa }; //# sourceMappingURL=ng-zorro-antd-tree-view.js.map","map":null,"metadata":{},"sourceType":"module"}