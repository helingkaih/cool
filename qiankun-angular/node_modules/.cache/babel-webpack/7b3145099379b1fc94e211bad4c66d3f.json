{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { Directive, ElementRef, Renderer2, Optional, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Host, ContentChild, SkipSelf, NgModule } from '@angular/core';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzGridModule } from 'ng-zorro-antd/grid';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { AbstractControl, NgModel, FormControlName, FormControlDirective, NgControl } from '@angular/forms';\nimport { helpMotion } from 'ng-zorro-antd/core/animation';\nimport { InputBoolean, toBoolean } from 'ng-zorro-antd/core/util';\nimport { NzI18nService } from 'ng-zorro-antd/i18n';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil, filter, map, tap, startWith } from 'rxjs/operators';\nimport { __decorate, __metadata } from 'tslib';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ng-zorro-antd/core/config';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from 'ng-zorro-antd/i18n';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from 'ng-zorro-antd/icon';\nimport * as ɵngcc6 from 'ng-zorro-antd/core/outlet';\nimport * as ɵngcc7 from 'ng-zorro-antd/tooltip';\nvar _c0 = [\"*\"];\n\nfunction NzFormControlComponent_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 6);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzType\", ctx_r0.iconType);\n  }\n}\n\nfunction NzFormControlComponent_div_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.innerTip);\n  }\n}\n\nvar _c1 = function _c1(a1) {\n  return [\"ant-form-item-explain\", a1];\n};\n\nvar _c2 = function _c2(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction NzFormControlComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵelementStart(1, \"div\");\n    ɵngcc0.ɵɵtemplate(2, NzFormControlComponent_div_5_ng_container_2_Template, 2, 1, \"ng-container\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(4, _c1, \"ant-form-item-explain-\" + ctx_r1.status));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@helpMotion\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r1.innerTip)(\"nzStringTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(6, _c2, ctx_r1.validateControl));\n  }\n}\n\nfunction NzFormControlComponent_div_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.nzExtra);\n  }\n}\n\nfunction NzFormControlComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(1, NzFormControlComponent_div_6_ng_container_1_Template, 2, 1, \"ng-container\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r2.nzExtra);\n  }\n}\n\nfunction NzFormLabelComponent_span_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"i\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var tooltipIconType_r2 = ctx.$implicit;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzType\", tooltipIconType_r2)(\"nzTheme\", ctx_r1.tooltipIcon.theme);\n  }\n}\n\nfunction NzFormLabelComponent_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 1);\n    ɵngcc0.ɵɵtemplate(1, NzFormLabelComponent_span_2_ng_container_1_Template, 2, 2, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzTooltipTitle\", ctx_r0.nzTooltipTitle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r0.tooltipIcon.type);\n  }\n}\n\nvar NZ_CONFIG_MODULE_NAME = 'form';\nvar DefaultTooltipIcon = {\n  type: 'question-circle',\n  theme: 'outline'\n};\n\nvar NzFormDirective = /*@__PURE__*/function () {\n  var NzFormDirective = /*#__PURE__*/function () {\n    function NzFormDirective(nzConfigService, elementRef, renderer, directionality) {\n      var _this = this;\n\n      _classCallCheck(this, NzFormDirective);\n\n      var _a;\n\n      this.nzConfigService = nzConfigService;\n      this.renderer = renderer;\n      this.directionality = directionality;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzLayout = 'horizontal';\n      this.nzNoColon = false;\n      this.nzAutoTips = {};\n      this.nzDisableAutoTips = false;\n      this.nzTooltipIcon = DefaultTooltipIcon;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.inputChanges$ = new Subject();\n      this.renderer.addClass(elementRef.nativeElement, 'ant-form');\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(function (direction) {\n        _this.dir = direction;\n      });\n    }\n\n    _createClass(NzFormDirective, [{\n      key: \"getInputObservable\",\n      value: function getInputObservable(changeType) {\n        return this.inputChanges$.pipe(filter(function (changes) {\n          return changeType in changes;\n        }), map(function (value) {\n          return value[changeType];\n        }));\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        this.inputChanges$.next(changes);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.inputChanges$.complete();\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzFormDirective;\n  }();\n\n  NzFormDirective.ɵfac = function NzFormDirective_Factory(t) {\n    return new (t || NzFormDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NzConfigService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n  };\n\n  NzFormDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzFormDirective,\n    selectors: [[\"\", \"nz-form\", \"\"]],\n    hostVars: 8,\n    hostBindings: function NzFormDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-form-horizontal\", ctx.nzLayout === \"horizontal\")(\"ant-form-vertical\", ctx.nzLayout === \"vertical\")(\"ant-form-inline\", ctx.nzLayout === \"inline\")(\"ant-form-rtl\", ctx.dir === \"rtl\");\n      }\n    },\n    inputs: {\n      nzLayout: \"nzLayout\",\n      nzNoColon: \"nzNoColon\",\n      nzAutoTips: \"nzAutoTips\",\n      nzDisableAutoTips: \"nzDisableAutoTips\",\n      nzTooltipIcon: \"nzTooltipIcon\"\n    },\n    exportAs: [\"nzForm\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  __decorate([WithConfig(), InputBoolean(), __metadata(\"design:type\", Boolean)], NzFormDirective.prototype, \"nzNoColon\", void 0);\n\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzFormDirective.prototype, \"nzAutoTips\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzFormDirective.prototype, \"nzDisableAutoTips\", void 0);\n\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzFormDirective.prototype, \"nzTooltipIcon\", void 0);\n\n  return NzFormDirective;\n}();\n\nvar NzFormItemComponent = /*@__PURE__*/function () {\n  var NzFormItemComponent = /*#__PURE__*/function () {\n    function NzFormItemComponent(elementRef, renderer, cdr) {\n      _classCallCheck(this, NzFormItemComponent);\n\n      this.cdr = cdr;\n      this.status = null;\n      this.hasFeedback = false;\n      this.withHelpClass = false;\n      this.destroy$ = new Subject();\n      renderer.addClass(elementRef.nativeElement, 'ant-form-item');\n    }\n\n    _createClass(NzFormItemComponent, [{\n      key: \"setWithHelpViaTips\",\n      value: function setWithHelpViaTips(value) {\n        this.withHelpClass = value;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"setStatus\",\n      value: function setStatus(status) {\n        this.status = status;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"setHasFeedback\",\n      value: function setHasFeedback(hasFeedback) {\n        this.hasFeedback = hasFeedback;\n        this.cdr.markForCheck();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzFormItemComponent;\n  }();\n\n  NzFormItemComponent.ɵfac = function NzFormItemComponent_Factory(t) {\n    return new (t || NzFormItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  NzFormItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzFormItemComponent,\n    selectors: [[\"nz-form-item\"]],\n    hostVars: 12,\n    hostBindings: function NzFormItemComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-form-item-has-success\", ctx.status === \"success\")(\"ant-form-item-has-warning\", ctx.status === \"warning\")(\"ant-form-item-has-error\", ctx.status === \"error\")(\"ant-form-item-is-validating\", ctx.status === \"validating\")(\"ant-form-item-has-feedback\", ctx.hasFeedback && ctx.status)(\"ant-form-item-with-help\", ctx.withHelpClass);\n      }\n    },\n    exportAs: [\"nzFormItem\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzFormItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzFormItemComponent;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar iconTypeMap = {\n  error: 'close-circle-fill',\n  validating: 'loading',\n  success: 'check-circle-fill',\n  warning: 'exclamation-circle-fill'\n};\n\nvar NzFormControlComponent = /*@__PURE__*/function () {\n  var NzFormControlComponent = /*#__PURE__*/function () {\n    function NzFormControlComponent(elementRef, nzFormItemComponent, cdr, renderer, i18n, nzFormDirective) {\n      var _this2 = this;\n\n      _classCallCheck(this, NzFormControlComponent);\n\n      var _a, _b;\n\n      this.nzFormItemComponent = nzFormItemComponent;\n      this.cdr = cdr;\n      this.nzFormDirective = nzFormDirective;\n      this._hasFeedback = false;\n      this.validateChanges = Subscription.EMPTY;\n      this.validateString = null;\n      this.destroyed$ = new Subject();\n      this.status = null;\n      this.validateControl = null;\n      this.iconType = null;\n      this.innerTip = null;\n      this.nzAutoTips = {};\n      this.nzDisableAutoTips = 'default';\n      renderer.addClass(elementRef.nativeElement, 'ant-form-item-control');\n      this.subscribeAutoTips(i18n.localeChange.pipe(tap(function (locale) {\n        return _this2.localeId = locale.locale;\n      })));\n      this.subscribeAutoTips((_a = this.nzFormDirective) === null || _a === void 0 ? void 0 : _a.getInputObservable('nzAutoTips'));\n      this.subscribeAutoTips((_b = this.nzFormDirective) === null || _b === void 0 ? void 0 : _b.getInputObservable('nzDisableAutoTips').pipe(filter(function () {\n        return _this2.nzDisableAutoTips === 'default';\n      })));\n    }\n\n    _createClass(NzFormControlComponent, [{\n      key: \"disableAutoTips\",\n      get: function get() {\n        var _a;\n\n        return this.nzDisableAutoTips !== 'default' ? toBoolean(this.nzDisableAutoTips) : (_a = this.nzFormDirective) === null || _a === void 0 ? void 0 : _a.nzDisableAutoTips;\n      }\n    }, {\n      key: \"nzHasFeedback\",\n      get: function get() {\n        return this._hasFeedback;\n      },\n      set: function set(value) {\n        this._hasFeedback = toBoolean(value);\n\n        if (this.nzFormItemComponent) {\n          this.nzFormItemComponent.setHasFeedback(this._hasFeedback);\n        }\n      }\n    }, {\n      key: \"nzValidateStatus\",\n      set: function set(value) {\n        if (value instanceof AbstractControl || value instanceof NgModel) {\n          this.validateControl = value;\n          this.validateString = null;\n          this.watchControl();\n        } else if (value instanceof FormControlName) {\n          this.validateControl = value.control;\n          this.validateString = null;\n          this.watchControl();\n        } else {\n          this.validateString = value;\n          this.validateControl = null;\n          this.setStatus();\n        }\n      }\n    }, {\n      key: \"watchControl\",\n      value: function watchControl() {\n        var _this3 = this;\n\n        this.validateChanges.unsubscribe();\n        /** miss detect https://github.com/angular/angular/issues/10887 **/\n\n        if (this.validateControl && this.validateControl.statusChanges) {\n          this.validateChanges = this.validateControl.statusChanges.pipe(startWith(null), takeUntil(this.destroyed$)).subscribe(function (_) {\n            if (!_this3.disableAutoTips) {\n              _this3.updateAutoErrorTip();\n            }\n\n            _this3.setStatus();\n\n            _this3.cdr.markForCheck();\n          });\n        }\n      }\n    }, {\n      key: \"setStatus\",\n      value: function setStatus() {\n        this.status = this.getControlStatus(this.validateString);\n        this.iconType = this.status ? iconTypeMap[this.status] : null;\n        this.innerTip = this.getInnerTip(this.status);\n\n        if (this.nzFormItemComponent) {\n          this.nzFormItemComponent.setWithHelpViaTips(!!this.innerTip);\n          this.nzFormItemComponent.setStatus(this.status);\n        }\n      }\n    }, {\n      key: \"getControlStatus\",\n      value: function getControlStatus(validateString) {\n        var status;\n\n        if (validateString === 'warning' || this.validateControlStatus('INVALID', 'warning')) {\n          status = 'warning';\n        } else if (validateString === 'error' || this.validateControlStatus('INVALID')) {\n          status = 'error';\n        } else if (validateString === 'validating' || validateString === 'pending' || this.validateControlStatus('PENDING')) {\n          status = 'validating';\n        } else if (validateString === 'success' || this.validateControlStatus('VALID')) {\n          status = 'success';\n        } else {\n          status = null;\n        }\n\n        return status;\n      }\n    }, {\n      key: \"validateControlStatus\",\n      value: function validateControlStatus(validStatus, statusType) {\n        if (!this.validateControl) {\n          return false;\n        } else {\n          var _this$validateControl = this.validateControl,\n              dirty = _this$validateControl.dirty,\n              touched = _this$validateControl.touched,\n              status = _this$validateControl.status;\n          return (!!dirty || !!touched) && (statusType ? this.validateControl.hasError(statusType) : status === validStatus);\n        }\n      }\n    }, {\n      key: \"getInnerTip\",\n      value: function getInnerTip(status) {\n        switch (status) {\n          case 'error':\n            return !this.disableAutoTips && this.autoErrorTip || this.nzErrorTip || null;\n\n          case 'validating':\n            return this.nzValidatingTip || null;\n\n          case 'success':\n            return this.nzSuccessTip || null;\n\n          case 'warning':\n            return this.nzWarningTip || null;\n\n          default:\n            return null;\n        }\n      }\n    }, {\n      key: \"updateAutoErrorTip\",\n      value: function updateAutoErrorTip() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n\n        if (this.validateControl) {\n          var errors = this.validateControl.errors || {};\n          var autoErrorTip = '';\n\n          for (var key in errors) {\n            if (errors.hasOwnProperty(key)) {\n              autoErrorTip = (_l = (_g = (_e = (_b = (_a = errors[key]) === null || _a === void 0 ? void 0 : _a[this.localeId]) !== null && _b !== void 0 ? _b : (_d = (_c = this.nzAutoTips) === null || _c === void 0 ? void 0 : _c[this.localeId]) === null || _d === void 0 ? void 0 : _d[key]) !== null && _e !== void 0 ? _e : (_f = this.nzAutoTips.default) === null || _f === void 0 ? void 0 : _f[key]) !== null && _g !== void 0 ? _g : (_k = (_j = (_h = this.nzFormDirective) === null || _h === void 0 ? void 0 : _h.nzAutoTips) === null || _j === void 0 ? void 0 : _j[this.localeId]) === null || _k === void 0 ? void 0 : _k[key]) !== null && _l !== void 0 ? _l : (_o = (_m = this.nzFormDirective) === null || _m === void 0 ? void 0 : _m.nzAutoTips.default) === null || _o === void 0 ? void 0 : _o[key];\n            }\n\n            if (!!autoErrorTip) {\n              break;\n            }\n          }\n\n          this.autoErrorTip = autoErrorTip;\n        }\n      }\n    }, {\n      key: \"subscribeAutoTips\",\n      value: function subscribeAutoTips(observable) {\n        var _this4 = this;\n\n        observable === null || observable === void 0 ? void 0 : observable.pipe(takeUntil(this.destroyed$)).subscribe(function () {\n          if (!_this4.disableAutoTips) {\n            _this4.updateAutoErrorTip();\n\n            _this4.setStatus();\n\n            _this4.cdr.markForCheck();\n          }\n        });\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var nzDisableAutoTips = changes.nzDisableAutoTips,\n            nzAutoTips = changes.nzAutoTips,\n            nzSuccessTip = changes.nzSuccessTip,\n            nzWarningTip = changes.nzWarningTip,\n            nzErrorTip = changes.nzErrorTip,\n            nzValidatingTip = changes.nzValidatingTip;\n\n        if (nzDisableAutoTips || nzAutoTips) {\n          this.updateAutoErrorTip();\n          this.setStatus();\n        } else if (nzSuccessTip || nzWarningTip || nzErrorTip || nzValidatingTip) {\n          this.setStatus();\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.setStatus();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        if (!this.validateControl && !this.validateString) {\n          if (this.defaultValidateControl instanceof FormControlDirective) {\n            this.nzValidateStatus = this.defaultValidateControl.control;\n          } else {\n            this.nzValidateStatus = this.defaultValidateControl;\n          }\n        }\n      }\n    }]);\n\n    return NzFormControlComponent;\n  }();\n\n  NzFormControlComponent.ɵfac = function NzFormControlComponent_Factory(t) {\n    return new (t || NzFormControlComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzFormItemComponent, 9), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NzI18nService), ɵngcc0.ɵɵdirectiveInject(NzFormDirective, 8));\n  };\n\n  NzFormControlComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzFormControlComponent,\n    selectors: [[\"nz-form-control\"]],\n    contentQueries: function NzFormControlComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgControl, 1);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.defaultValidateControl = _t.first);\n      }\n    },\n    inputs: {\n      nzAutoTips: \"nzAutoTips\",\n      nzDisableAutoTips: \"nzDisableAutoTips\",\n      nzHasFeedback: \"nzHasFeedback\",\n      nzValidateStatus: \"nzValidateStatus\",\n      nzSuccessTip: \"nzSuccessTip\",\n      nzWarningTip: \"nzWarningTip\",\n      nzErrorTip: \"nzErrorTip\",\n      nzValidatingTip: \"nzValidatingTip\",\n      nzExtra: \"nzExtra\"\n    },\n    exportAs: [\"nzFormControl\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"ant-form-item-control-input\"], [1, \"ant-form-item-control-input-content\"], [1, \"ant-form-item-children-icon\"], [\"nz-icon\", \"\", 3, \"nzType\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"ant-form-item-extra\", 4, \"ngIf\"], [\"nz-icon\", \"\", 3, \"nzType\"], [3, \"ngClass\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [1, \"ant-form-item-extra\"], [4, \"nzStringTemplateOutlet\"]],\n    template: function NzFormControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 2);\n        ɵngcc0.ɵɵtemplate(4, NzFormControlComponent_i_4_Template, 1, 1, \"i\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(5, NzFormControlComponent_div_5_Template, 3, 8, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, NzFormControlComponent_div_6_Template, 2, 1, \"div\", 5);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzHasFeedback && ctx.iconType);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.innerTip);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzExtra);\n      }\n    },\n    directives: [ɵngcc4.NgIf, ɵngcc5.NzIconDirective, ɵngcc4.NgClass, ɵngcc6.NzStringTemplateOutletDirective],\n    encapsulation: 2,\n    data: {\n      animation: [helpMotion]\n    },\n    changeDetection: 0\n  });\n  return NzFormControlComponent;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nfunction toTooltipIcon(value) {\n  var icon = typeof value === 'string' ? {\n    type: value\n  } : value;\n  return Object.assign(Object.assign({}, DefaultTooltipIcon), icon);\n}\n\nvar NzFormLabelComponent = /*@__PURE__*/function () {\n  var NzFormLabelComponent = /*#__PURE__*/function () {\n    function NzFormLabelComponent(elementRef, renderer, cdr, nzFormDirective) {\n      var _this5 = this;\n\n      _classCallCheck(this, NzFormLabelComponent);\n\n      this.cdr = cdr;\n      this.nzFormDirective = nzFormDirective;\n      this.nzRequired = false;\n      this.noColon = 'default';\n      this._tooltipIcon = 'default';\n      this.destroy$ = new Subject();\n      renderer.addClass(elementRef.nativeElement, 'ant-form-item-label');\n\n      if (this.nzFormDirective) {\n        this.nzFormDirective.getInputObservable('nzNoColon').pipe(filter(function () {\n          return _this5.noColon === 'default';\n        }), takeUntil(this.destroy$)).subscribe(function () {\n          return _this5.cdr.markForCheck();\n        });\n        this.nzFormDirective.getInputObservable('nzTooltipIcon').pipe(filter(function () {\n          return _this5._tooltipIcon === 'default';\n        }), takeUntil(this.destroy$)).subscribe(function () {\n          return _this5.cdr.markForCheck();\n        });\n      }\n    }\n\n    _createClass(NzFormLabelComponent, [{\n      key: \"nzNoColon\",\n      get: function get() {\n        var _a;\n\n        return this.noColon !== 'default' ? this.noColon : (_a = this.nzFormDirective) === null || _a === void 0 ? void 0 : _a.nzNoColon;\n      },\n      set: function set(value) {\n        this.noColon = toBoolean(value);\n      }\n    }, {\n      key: \"nzTooltipIcon\",\n      set: function set(value) {\n        this._tooltipIcon = toTooltipIcon(value);\n      } // due to 'get' and 'set' accessor must have the same type, so it was renamed to `tooltipIcon`\n\n    }, {\n      key: \"tooltipIcon\",\n      get: function get() {\n        var _a;\n\n        return this._tooltipIcon !== 'default' ? this._tooltipIcon : toTooltipIcon(((_a = this.nzFormDirective) === null || _a === void 0 ? void 0 : _a.nzTooltipIcon) || DefaultTooltipIcon);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzFormLabelComponent;\n  }();\n\n  NzFormLabelComponent.ɵfac = function NzFormLabelComponent_Factory(t) {\n    return new (t || NzFormLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NzFormDirective, 12));\n  };\n\n  NzFormLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzFormLabelComponent,\n    selectors: [[\"nz-form-label\"]],\n    inputs: {\n      nzRequired: \"nzRequired\",\n      nzNoColon: \"nzNoColon\",\n      nzTooltipIcon: \"nzTooltipIcon\",\n      nzFor: \"nzFor\",\n      nzTooltipTitle: \"nzTooltipTitle\"\n    },\n    exportAs: [\"nzFormLabel\"],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 6,\n    consts: [[\"class\", \"ant-form-item-tooltip\", \"nz-tooltip\", \"\", 3, \"nzTooltipTitle\", 4, \"ngIf\"], [\"nz-tooltip\", \"\", 1, \"ant-form-item-tooltip\", 3, \"nzTooltipTitle\"], [4, \"nzStringTemplateOutlet\"], [\"nz-icon\", \"\", 3, \"nzType\", \"nzTheme\"]],\n    template: function NzFormLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, NzFormLabelComponent_span_2_Template, 2, 2, \"span\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-form-item-no-colon\", ctx.nzNoColon)(\"ant-form-item-required\", ctx.nzRequired);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.nzFor);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.nzTooltipTitle);\n      }\n    },\n    directives: [ɵngcc4.NgIf, ɵngcc7.NzTooltipDirective, ɵngcc6.NzStringTemplateOutletDirective, ɵngcc5.NzIconDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzFormLabelComponent.prototype, \"nzRequired\", void 0);\n\n  return NzFormLabelComponent;\n}();\n\nvar NzFormSplitComponent = /*@__PURE__*/function () {\n  var NzFormSplitComponent = function NzFormSplitComponent(elementRef, renderer) {\n    _classCallCheck(this, NzFormSplitComponent);\n\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.renderer.addClass(this.elementRef.nativeElement, 'ant-form-split');\n  };\n\n  NzFormSplitComponent.ɵfac = function NzFormSplitComponent_Factory(t) {\n    return new (t || NzFormSplitComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NzFormSplitComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzFormSplitComponent,\n    selectors: [[\"nz-form-split\"]],\n    exportAs: [\"nzFormSplit\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzFormSplitComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzFormSplitComponent;\n}();\n\nvar NzFormTextComponent = /*@__PURE__*/function () {\n  var NzFormTextComponent = function NzFormTextComponent(elementRef, renderer) {\n    _classCallCheck(this, NzFormTextComponent);\n\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.renderer.addClass(this.elementRef.nativeElement, 'ant-form-text');\n  };\n\n  NzFormTextComponent.ɵfac = function NzFormTextComponent_Factory(t) {\n    return new (t || NzFormTextComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NzFormTextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzFormTextComponent,\n    selectors: [[\"nz-form-text\"]],\n    exportAs: [\"nzFormText\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzFormTextComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzFormTextComponent;\n}();\n\nvar NzFormModule = /*@__PURE__*/function () {\n  var NzFormModule = function NzFormModule() {\n    _classCallCheck(this, NzFormModule);\n  };\n\n  NzFormModule.ɵfac = function NzFormModule_Factory(t) {\n    return new (t || NzFormModule)();\n  };\n\n  NzFormModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzFormModule\n  });\n  NzFormModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[BidiModule, CommonModule, NzGridModule, NzIconModule, NzToolTipModule, LayoutModule, PlatformModule, NzOutletModule], NzGridModule]\n  });\n  return NzFormModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzFormModule, {\n    declarations: function declarations() {\n      return [NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzFormTextComponent, NzFormSplitComponent];\n    },\n    imports: function imports() {\n      return [BidiModule, CommonModule, NzGridModule, NzIconModule, NzToolTipModule, LayoutModule, PlatformModule, NzOutletModule];\n    },\n    exports: function exports() {\n      return [NzGridModule, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormControlComponent, NzFormTextComponent, NzFormSplitComponent];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultTooltipIcon, NzFormControlComponent, NzFormDirective, NzFormItemComponent, NzFormLabelComponent, NzFormModule, NzFormSplitComponent, NzFormTextComponent }; //# sourceMappingURL=ng-zorro-antd-form.js.map","map":null,"metadata":{},"sourceType":"module"}