{"ast":null,"code":"import _slicedToArray from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _assertThisInitialized from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nvar ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** ID used for the body container where all messages are appended. */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nvar nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\n\nvar messageRegistry = /*@__PURE__*/new Map();\n/** Container for all registered messages. */\n\nvar messagesContainer = null;\n\nvar AriaDescriber = /*@__PURE__*/function () {\n  var AriaDescriber = /*#__PURE__*/function () {\n    function AriaDescriber(_document) {\n      _classCallCheck(this, AriaDescriber);\n\n      this._document = _document;\n    }\n\n    _createClass(AriaDescriber, [{\n      key: \"describe\",\n      value: function describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n          return;\n        }\n\n        var key = getKey(message, role);\n\n        if (typeof message !== 'string') {\n          // We need to ensure that the element has an ID.\n          setMessageId(message);\n          messageRegistry.set(key, {\n            messageElement: message,\n            referenceCount: 0\n          });\n        } else if (!messageRegistry.has(key)) {\n          this._createMessageElement(message, role);\n        }\n\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n          this._addMessageReference(hostElement, key);\n        }\n      }\n    }, {\n      key: \"removeDescription\",\n      value: function removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n          return;\n        }\n\n        var key = getKey(message, role);\n\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n          this._removeMessageReference(hostElement, key);\n        } // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n        if (typeof message === 'string') {\n          var registeredMessage = messageRegistry.get(key);\n\n          if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(key);\n          }\n        }\n\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n          this._deleteMessagesContainer();\n        }\n      }\n      /** Unregisters all created message elements and removes the message container. */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"]\"));\n\n        for (var i = 0; i < describedElements.length; i++) {\n          this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n          describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n\n        if (messagesContainer) {\n          this._deleteMessagesContainer();\n        }\n\n        messageRegistry.clear();\n      }\n      /**\n       * Creates a new element in the visually hidden message container element with the message\n       * as its content and adds it to the message registry.\n       */\n\n    }, {\n      key: \"_createMessageElement\",\n      value: function _createMessageElement(message, role) {\n        var messageElement = this._document.createElement('div');\n\n        setMessageId(messageElement);\n        messageElement.textContent = message;\n\n        if (role) {\n          messageElement.setAttribute('role', role);\n        }\n\n        this._createMessagesContainer();\n\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(getKey(message, role), {\n          messageElement: messageElement,\n          referenceCount: 0\n        });\n      }\n      /** Deletes the message element from the global messages container. */\n\n    }, {\n      key: \"_deleteMessageElement\",\n      value: function _deleteMessageElement(key) {\n        var registeredMessage = messageRegistry.get(key);\n        var messageElement = registeredMessage && registeredMessage.messageElement;\n\n        if (messagesContainer && messageElement) {\n          messagesContainer.removeChild(messageElement);\n        }\n\n        messageRegistry.delete(key);\n      }\n      /** Creates the global container for all aria-describedby messages. */\n\n    }, {\n      key: \"_createMessagesContainer\",\n      value: function _createMessagesContainer() {\n        if (!messagesContainer) {\n          var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n          // already a container on the page, but we don't have a reference to it. Clear the\n          // old container so we don't get duplicates. Doing this, instead of emptying the previous\n          // container, should be slightly faster.\n\n\n          if (preExistingContainer && preExistingContainer.parentNode) {\n            preExistingContainer.parentNode.removeChild(preExistingContainer);\n          }\n\n          messagesContainer = this._document.createElement('div');\n          messagesContainer.id = MESSAGES_CONTAINER_ID; // We add `visibility: hidden` in order to prevent text in this container from\n          // being searchable by the browser's Ctrl + F functionality.\n          // Screen-readers will still read the description for elements with aria-describedby even\n          // when the description element is not visible.\n\n          messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n          // the description element doesn't impact page layout.\n\n          messagesContainer.classList.add('cdk-visually-hidden');\n\n          this._document.body.appendChild(messagesContainer);\n        }\n      }\n      /** Deletes the global messages container. */\n\n    }, {\n      key: \"_deleteMessagesContainer\",\n      value: function _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n          messagesContainer.parentNode.removeChild(messagesContainer);\n          messagesContainer = null;\n        }\n      }\n      /** Removes all cdk-describedby messages that are hosted through the element. */\n\n    }, {\n      key: \"_removeCdkDescribedByReferenceIds\",\n      value: function _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n          return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n        });\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n      }\n      /**\n       * Adds a message reference to the element using aria-describedby and increments the registered\n       * message's reference count.\n       */\n\n    }, {\n      key: \"_addMessageReference\",\n      value: function _addMessageReference(element, key) {\n        var registeredMessage = messageRegistry.get(key); // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n      }\n      /**\n       * Removes a message reference from the element using aria-describedby\n       * and decrements the registered message's reference count.\n       */\n\n    }, {\n      key: \"_removeMessageReference\",\n      value: function _removeMessageReference(element, key) {\n        var registeredMessage = messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n      /** Returns true if the element has been described by the provided message ID. */\n\n    }, {\n      key: \"_isElementDescribedByMessage\",\n      value: function _isElementDescribedByMessage(element, key) {\n        var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        var registeredMessage = messageRegistry.get(key);\n        var messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n      }\n      /** Determines whether a message can be described on a particular element. */\n\n    }, {\n      key: \"_canBeDescribed\",\n      value: function _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n          return false;\n        }\n\n        if (message && typeof message === 'object') {\n          // We'd have to make some assumptions about the description element's text, if the consumer\n          // passed in an element. Assume that if an element is passed in, the consumer has verified\n          // that it can be used as a description.\n          return true;\n        }\n\n        var trimmedMessage = message == null ? '' : \"\".concat(message).trim();\n        var ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n\n        return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n      }\n      /** Checks whether a node is an Element node. */\n\n    }, {\n      key: \"_isElementNode\",\n      value: function _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n      }\n    }]);\n\n    return AriaDescriber;\n  }();\n\n  AriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n    return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  AriaDescriber.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function AriaDescriber_Factory() {\n      return new AriaDescriber(ɵɵinject(DOCUMENT));\n    },\n    token: AriaDescriber,\n    providedIn: \"root\"\n  });\n  return AriaDescriber;\n}();\n/** Gets a key that can be used to look messages up in the registry. */\n\n\nfunction getKey(message, role) {\n  return typeof message === 'string' ? \"\".concat(role || '', \"/\").concat(message) : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\nfunction setMessageId(element) {\n  if (!element.id) {\n    element.id = \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(nextId++);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\n\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    }; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          var itemArray = newItems.toArray();\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n\n  }, {\n    key: \"withAllowedModifierKeys\",\n    value: function withAllowedModifierKeys(keys) {\n      this._allowedModifierKeys = keys;\n      return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (letter) {\n        return _this2._pressedLetters.push(letter);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          var index = (_this2._activeItemIndex + i) % items.length;\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n\n  }, {\n    key: \"withHomeAndEnd\",\n    value: function withHomeAndEnd() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._homeAndEnd = enabled;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      var previousActiveItem = this._activeItem;\n      this.updateActiveItem(item);\n\n      if (this._activeItem !== previousActiveItem) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      var _this3 = this;\n\n      var keyCode = event.keyCode;\n      var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n      var isModifierAllowed = modifiers.every(function (modifier) {\n        return !event[modifier] || _this3._allowedModifierKeys.indexOf(modifier) > -1;\n      });\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case HOME:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setFirstItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case END:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setLastItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n            // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n            // otherwise fall back to resolving alphanumeric characters via the keyCode.\n            if (event.key && event.key.length === 1) {\n              this._letterKeyStream.next(event.key.toLocaleUpperCase());\n            } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n              this._letterKeyStream.next(String.fromCharCode(keyCode));\n            }\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /** Index of the currently active item. */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /** The active item. */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n  }, {\n    key: \"isTyping\",\n    value: function isTyping() {\n      return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      var itemArray = this._getItemsArray();\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      var activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n      this._activeItem = activeItem == null ? null : activeItem;\n      this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value: function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this4;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this4 = _super2.apply(this, arguments);\n    _this4._origin = 'program';\n    return _this4;\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for the isFocusable method.\n */\n\n\nvar IsFocusableConfig = function IsFocusableConfig() {\n  _classCallCheck(this, IsFocusableConfig);\n\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  this.ignoreVisibility = false;\n};\n\nvar InteractivityChecker = /*@__PURE__*/function () {\n  var InteractivityChecker = /*#__PURE__*/function () {\n    function InteractivityChecker(_platform) {\n      _classCallCheck(this, InteractivityChecker);\n\n      this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n\n\n    _createClass(InteractivityChecker, [{\n      key: \"isDisabled\",\n      value: function isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n      }\n      /**\n       * Gets whether an element is visible for the purposes of interactivity.\n       *\n       * This will capture states like `display: none` and `visibility: hidden`, but not things like\n       * being clipped by an `overflow: hidden` parent or being outside the viewport.\n       *\n       * @returns Whether the element is visible.\n       */\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n      }\n      /**\n       * Gets whether an element can be reached via Tab key.\n       * Assumes that the element has already been checked with isFocusable.\n       *\n       * @param element Element to be checked.\n       * @returns Whether the element is tabbable.\n       */\n\n    }, {\n      key: \"isTabbable\",\n      value: function isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n          return false;\n        }\n\n        var frameElement = getFrameElement(getWindow(element));\n\n        if (frameElement) {\n          // Frame elements inherit their tabindex onto all child elements.\n          if (getTabIndexValue(frameElement) === -1) {\n            return false;\n          } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n          if (!this.isVisible(frameElement)) {\n            return false;\n          }\n        }\n\n        var nodeName = element.nodeName.toLowerCase();\n        var tabIndexValue = getTabIndexValue(element);\n\n        if (element.hasAttribute('contenteditable')) {\n          return tabIndexValue !== -1;\n        }\n\n        if (nodeName === 'iframe' || nodeName === 'object') {\n          // The frame or object's content may be tabbable depending on the content, but it's\n          // not possibly to reliably detect the content of the frames. We always consider such\n          // elements as non-tabbable.\n          return false;\n        } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n          return false;\n        }\n\n        if (nodeName === 'audio') {\n          // Audio elements without controls enabled are never tabbable, regardless\n          // of the tabindex attribute explicitly being set.\n          if (!element.hasAttribute('controls')) {\n            return false;\n          } // Audio elements with controls are by default tabbable unless the\n          // tabindex attribute is set to `-1` explicitly.\n\n\n          return tabIndexValue !== -1;\n        }\n\n        if (nodeName === 'video') {\n          // For all video elements, if the tabindex attribute is set to `-1`, the video\n          // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n          // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n          // tabindex attribute is the source of truth here.\n          if (tabIndexValue === -1) {\n            return false;\n          } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n          // video element is always tabbable (regardless of whether it has controls or not).\n\n\n          if (tabIndexValue !== null) {\n            return true;\n          } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n          // has controls enabled. Firefox is special as videos are always tabbable regardless\n          // of whether there are controls or not.\n\n\n          return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n\n        return element.tabIndex >= 0;\n      }\n      /**\n       * Gets whether an element can be focused by the user.\n       *\n       * @param element Element to be checked.\n       * @param config The config object with options to customize this method's behavior\n       * @returns Whether the element is focusable.\n       */\n\n    }, {\n      key: \"isFocusable\",\n      value: function isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n      }\n    }]);\n\n    return InteractivityChecker;\n  }();\n\n  InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n    return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  InteractivityChecker.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function InteractivityChecker_Factory() {\n      return new InteractivityChecker(ɵɵinject(Platform));\n    },\n    token: InteractivityChecker,\n    providedIn: \"root\"\n  });\n  return InteractivityChecker;\n}();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  var inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var _this5 = this;\n\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = function () {\n      return _this5.focusLastTabbableElement();\n    };\n\n    this.endAnchorListener = function () {\n      return _this5.focusFirstTabbableElement();\n    };\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var startAnchor = this._startAnchor;\n      var endAnchor = this._endAnchor;\n\n      if (startAnchor) {\n        startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n        if (startAnchor.parentNode) {\n          startAnchor.parentNode.removeChild(startAnchor);\n        }\n      }\n\n      if (endAnchor) {\n        endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n        if (endAnchor.parentNode) {\n          endAnchor.parentNode.removeChild(endAnchor);\n        }\n      }\n\n      this._startAnchor = this._endAnchor = null;\n      this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this6 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this6._startAnchor) {\n          _this6._startAnchor = _this6._createAnchor();\n\n          _this6._startAnchor.addEventListener('focus', _this6.startAnchorListener);\n        }\n\n        if (!_this6._endAnchor) {\n          _this6._endAnchor = _this6._createAnchor();\n\n          _this6._endAnchor.addEventListener('focus', _this6.endAnchorListener);\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusInitialElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady() {\n      var _this8 = this;\n\n      return new Promise(function (resolve) {\n        _this8._executeOnStable(function () {\n          return resolve(_this8.focusFirstTabbableElement());\n        });\n      });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady() {\n      var _this9 = this;\n\n      return new Promise(function (resolve) {\n        _this9._executeOnStable(function () {\n          return resolve(_this9.focusLastTabbableElement());\n        });\n      });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var markers = this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      for (var i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n        } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement() {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var redirectToElement = this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if (redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        } // Warn the consumer if the element they've pointed to\n        // isn't focusable, when not in production mode.\n\n\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n          console.warn(\"Element matching '[cdkFocusInitial]' is not focusable.\", redirectToElement);\n        }\n\n        if (!this._checker.isFocusable(redirectToElement)) {\n          var focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n          focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus();\n          return !!focusableChild;\n        }\n\n        redirectToElement.focus();\n        return true;\n      }\n\n      return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement() {\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement() {\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n      // back to `childNodes` which includes text nodes, comments etc.\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      } // Iterate in reverse DOM order.\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Creates an anchor element. */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      anchor.setAttribute('aria-hidden', 'true');\n      return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n\n  }, {\n    key: \"toggleAnchors\",\n    value: function toggleAnchors(enabled) {\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n        this._toggleAnchorTabIndex(enabled, this._endAnchor);\n      }\n    }\n    /** Executes a function when the zone is stable. */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n\nvar FocusTrapFactory = /*@__PURE__*/function () {\n  var FocusTrapFactory = /*#__PURE__*/function () {\n    function FocusTrapFactory(_checker, _ngZone, _document) {\n      _classCallCheck(this, FocusTrapFactory);\n\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n\n\n    _createClass(FocusTrapFactory, [{\n      key: \"create\",\n      value: function create(element) {\n        var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n      }\n    }]);\n\n    return FocusTrapFactory;\n  }();\n\n  FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n    return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  FocusTrapFactory.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function FocusTrapFactory_Factory() {\n      return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n    },\n    token: FocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return FocusTrapFactory;\n}();\n\nvar CdkTrapFocus = /*@__PURE__*/function () {\n  var CdkTrapFocus = /*#__PURE__*/function () {\n    function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {\n      _classCallCheck(this, CdkTrapFocus);\n\n      this._elementRef = _elementRef;\n      this._focusTrapFactory = _focusTrapFactory;\n      /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n      this._previouslyFocusedElement = null;\n      this._document = _document;\n      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n\n\n    _createClass(CdkTrapFocus, [{\n      key: \"enabled\",\n      get: function get() {\n        return this.focusTrap.enabled;\n      },\n      set: function set(value) {\n        this.focusTrap.enabled = coerceBooleanProperty(value);\n      }\n      /**\n       * Whether the directive should automatically move focus into the trapped region upon\n       * initialization and return focus to the previous activeElement upon destruction.\n       */\n\n    }, {\n      key: \"autoCapture\",\n      get: function get() {\n        return this._autoCapture;\n      },\n      set: function set(value) {\n        this._autoCapture = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n\n        if (this._previouslyFocusedElement) {\n          this._previouslyFocusedElement.focus();\n\n          this._previouslyFocusedElement = null;\n        }\n      }\n    }, {\n      key: \"ngAfterContentInit\",\n      value: function ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n\n        if (this.autoCapture) {\n          this._captureFocus();\n        }\n      }\n    }, {\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n          this.focusTrap.attachAnchors();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var autoCaptureChange = changes['autoCapture'];\n\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n          this._captureFocus();\n        }\n      }\n    }, {\n      key: \"_captureFocus\",\n      value: function _captureFocus() {\n        var _a, _b; // If the `activeElement` is inside a shadow root, `document.activeElement` will\n        // point to the shadow root so we have to descend into it ourselves.\n\n\n        var activeElement = (_a = this._document) === null || _a === void 0 ? void 0 : _a.activeElement;\n        this._previouslyFocusedElement = ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot) === null || _b === void 0 ? void 0 : _b.activeElement) || activeElement;\n        this.focusTrap.focusInitialElementWhenReady();\n      }\n    }]);\n\n    return CdkTrapFocus;\n  }();\n\n  CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n    return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  CdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTrapFocus,\n    selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n    inputs: {\n      enabled: [\"cdkTrapFocus\", \"enabled\"],\n      autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n    },\n    exportAs: [\"cdkTrapFocus\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return CdkTrapFocus;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nvar ConfigurableFocusTrap = /*#__PURE__*/function (_FocusTrap) {\n  _inherits(ConfigurableFocusTrap, _FocusTrap);\n\n  var _super3 = _createSuper(ConfigurableFocusTrap);\n\n  function ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    var _this10;\n\n    _classCallCheck(this, ConfigurableFocusTrap);\n\n    _this10 = _super3.call(this, _element, _checker, _ngZone, _document, config.defer);\n    _this10._focusTrapManager = _focusTrapManager;\n    _this10._inertStrategy = _inertStrategy;\n\n    _this10._focusTrapManager.register(_assertThisInitialized(_this10));\n\n    return _this10;\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  _createClass(ConfigurableFocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._enabled) {\n        this._focusTrapManager.register(this);\n      } else {\n        this._focusTrapManager.deregister(this);\n      }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._focusTrapManager.deregister(this);\n\n      _get(_getPrototypeOf(ConfigurableFocusTrap.prototype), \"destroy\", this).call(this);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_enable\",\n    value: function _enable() {\n      this._inertStrategy.preventFocus(this);\n\n      this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_disable\",\n    value: function _disable() {\n      this._inertStrategy.allowFocus(this);\n\n      this.toggleAnchors(false);\n    }\n  }]);\n\n  return ConfigurableFocusTrap;\n}(FocusTrap);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\n\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n\n  var curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\n\n\nfunction polyfillClosest(element, selector) {\n  var curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n\nvar hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\n\nvar EventListenerFocusTrapInertStrategy = /*#__PURE__*/function () {\n  function EventListenerFocusTrapInertStrategy() {\n    _classCallCheck(this, EventListenerFocusTrapInertStrategy);\n\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  _createClass(EventListenerFocusTrapInertStrategy, [{\n    key: \"preventFocus\",\n    value: function preventFocus(focusTrap) {\n      var _this11 = this;\n\n      // Ensure there's only one listener per document\n      if (this._listener) {\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n      }\n\n      this._listener = function (e) {\n        return _this11._trapFocus(focusTrap, e);\n      };\n\n      focusTrap._ngZone.runOutsideAngular(function () {\n        focusTrap._document.addEventListener('focus', _this11._listener, true);\n      });\n    }\n    /** Removes the event listener added in preventFocus. */\n\n  }, {\n    key: \"allowFocus\",\n    value: function allowFocus(focusTrap) {\n      if (!this._listener) {\n        return;\n      }\n\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n\n      this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus(focusTrap, event) {\n      var target = event.target;\n      var focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n      // with an element inside the FocusTrap, ex. mat-select.\n\n      if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n        // Some legacy FocusTrap usages have logic that focuses some element on the page\n        // just before FocusTrap is destroyed. For backwards compatibility, wait\n        // to be sure FocusTrap is still enabled before refocusing.\n        setTimeout(function () {\n          // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n          if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n            focusTrap.focusFirstTabbableElement();\n          }\n        });\n      }\n    }\n  }]);\n\n  return EventListenerFocusTrapInertStrategy;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\n\n\nvar ConfigurableFocusTrapConfig = function ConfigurableFocusTrapConfig() {\n  _classCallCheck(this, ConfigurableFocusTrapConfig);\n\n  /**\n   * Whether to defer the creation of FocusTrap elements to be\n   * done manually by the user. Default is to create them\n   * automatically.\n   */\n  this.defer = false;\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nvar FOCUS_TRAP_INERT_STRATEGY = /*@__PURE__*/new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\nvar FocusTrapManager = /*@__PURE__*/function () {\n  var FocusTrapManager = /*#__PURE__*/function () {\n    function FocusTrapManager() {\n      _classCallCheck(this, FocusTrapManager);\n\n      // A stack of the FocusTraps on the page. Only the FocusTrap at the\n      // top of the stack is active.\n      this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n\n\n    _createClass(FocusTrapManager, [{\n      key: \"register\",\n      value: function register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter(function (ft) {\n          return ft !== focusTrap;\n        });\n        var stack = this._focusTrapStack;\n\n        if (stack.length) {\n          stack[stack.length - 1]._disable();\n        }\n\n        stack.push(focusTrap);\n\n        focusTrap._enable();\n      }\n      /**\n       * Removes the FocusTrap from the stack, and activates the\n       * FocusTrap that is the new top of the stack.\n       */\n\n    }, {\n      key: \"deregister\",\n      value: function deregister(focusTrap) {\n        focusTrap._disable();\n\n        var stack = this._focusTrapStack;\n        var i = stack.indexOf(focusTrap);\n\n        if (i !== -1) {\n          stack.splice(i, 1);\n\n          if (stack.length) {\n            stack[stack.length - 1]._enable();\n          }\n        }\n      }\n    }]);\n\n    return FocusTrapManager;\n  }();\n\n  FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n    return new (t || FocusTrapManager)();\n  };\n\n  FocusTrapManager.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function FocusTrapManager_Factory() {\n      return new FocusTrapManager();\n    },\n    token: FocusTrapManager,\n    providedIn: \"root\"\n  });\n  return FocusTrapManager;\n}();\n\nvar ConfigurableFocusTrapFactory = /*@__PURE__*/function () {\n  var ConfigurableFocusTrapFactory = /*#__PURE__*/function () {\n    function ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n      _classCallCheck(this, ConfigurableFocusTrapFactory);\n\n      this._checker = _checker;\n      this._ngZone = _ngZone;\n      this._focusTrapManager = _focusTrapManager;\n      this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n      this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n\n    _createClass(ConfigurableFocusTrapFactory, [{\n      key: \"create\",\n      value: function create(element) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ConfigurableFocusTrapConfig();\n        var configObject;\n\n        if (typeof config === 'boolean') {\n          configObject = new ConfigurableFocusTrapConfig();\n          configObject.defer = config;\n        } else {\n          configObject = config;\n        }\n\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n      }\n    }]);\n\n    return ConfigurableFocusTrapFactory;\n  }();\n\n  ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n    return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  };\n\n  ConfigurableFocusTrapFactory.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function ConfigurableFocusTrapFactory_Factory() {\n      return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n    },\n    token: ConfigurableFocusTrapFactory,\n    providedIn: \"root\"\n  });\n  return ConfigurableFocusTrapFactory;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = /*@__PURE__*/new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nvar LIVE_ANNOUNCER_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\nvar LiveAnnouncer = /*@__PURE__*/function () {\n  var LiveAnnouncer = /*#__PURE__*/function () {\n    function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {\n      _classCallCheck(this, LiveAnnouncer);\n\n      this._ngZone = _ngZone;\n      this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n      // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n      // a class decorator causes TypeScript to preserve the constructor signature types.\n\n      this._document = _document;\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n\n    _createClass(LiveAnnouncer, [{\n      key: \"announce\",\n      value: function announce(message) {\n        var _this12 = this;\n\n        var defaultOptions = this._defaultOptions;\n        var politeness;\n        var duration;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        if (args.length === 1 && typeof args[0] === 'number') {\n          duration = args[0];\n        } else {\n          politeness = args[0];\n          duration = args[1];\n        }\n\n        this.clear();\n        clearTimeout(this._previousTimeout);\n\n        if (!politeness) {\n          politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n        }\n\n        if (duration == null && defaultOptions) {\n          duration = defaultOptions.duration;\n        } // TODO: ensure changing the politeness works on all environments we support.\n\n\n        this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n\n\n        return this._ngZone.runOutsideAngular(function () {\n          return new Promise(function (resolve) {\n            clearTimeout(_this12._previousTimeout);\n            _this12._previousTimeout = setTimeout(function () {\n              _this12._liveElement.textContent = message;\n              resolve();\n\n              if (typeof duration === 'number') {\n                _this12._previousTimeout = setTimeout(function () {\n                  return _this12.clear();\n                }, duration);\n              }\n            }, 100);\n          });\n        });\n      }\n      /**\n       * Clears the current text from the announcer element. Can be used to prevent\n       * screen readers from reading the text out again while the user is going\n       * through the page landmarks.\n       */\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        if (this._liveElement) {\n          this._liveElement.textContent = '';\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n\n        if (this._liveElement && this._liveElement.parentNode) {\n          this._liveElement.parentNode.removeChild(this._liveElement);\n\n          this._liveElement = null;\n        }\n      }\n    }, {\n      key: \"_createLiveElement\",\n      value: function _createLiveElement() {\n        var elementClass = 'cdk-live-announcer-element';\n\n        var previousElements = this._document.getElementsByClassName(elementClass);\n\n        var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n        for (var i = 0; i < previousElements.length; i++) {\n          previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n\n        this._document.body.appendChild(liveEl);\n\n        return liveEl;\n      }\n    }]);\n\n    return LiveAnnouncer;\n  }();\n\n  LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n    return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  };\n\n  LiveAnnouncer.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function LiveAnnouncer_Factory() {\n      return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n    },\n    token: LiveAnnouncer,\n    providedIn: \"root\"\n  });\n  return LiveAnnouncer;\n}();\n\nvar CdkAriaLive = /*@__PURE__*/function () {\n  var CdkAriaLive = /*#__PURE__*/function () {\n    function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n      _classCallCheck(this, CdkAriaLive);\n\n      this._elementRef = _elementRef;\n      this._liveAnnouncer = _liveAnnouncer;\n      this._contentObserver = _contentObserver;\n      this._ngZone = _ngZone;\n      this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n\n\n    _createClass(CdkAriaLive, [{\n      key: \"politeness\",\n      get: function get() {\n        return this._politeness;\n      },\n      set: function set(value) {\n        var _this13 = this;\n\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n        if (this._politeness === 'off') {\n          if (this._subscription) {\n            this._subscription.unsubscribe();\n\n            this._subscription = null;\n          }\n        } else if (!this._subscription) {\n          this._subscription = this._ngZone.runOutsideAngular(function () {\n            return _this13._contentObserver.observe(_this13._elementRef).subscribe(function () {\n              // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n              var elementText = _this13._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n              // changes which we don't want to announce.\n\n              if (elementText !== _this13._previousAnnouncedText) {\n                _this13._liveAnnouncer.announce(elementText, _this13._politeness);\n\n                _this13._previousAnnouncedText = elementText;\n              }\n            });\n          });\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n        }\n      }\n    }]);\n\n    return CdkAriaLive;\n  }();\n\n  CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n    return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkAriaLive,\n    selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n    inputs: {\n      politeness: [\"cdkAriaLive\", \"politeness\"]\n    },\n    exportAs: [\"cdkAriaLive\"]\n  });\n  return CdkAriaLive;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  // We can typically distinguish between these faked mousedown events and real mousedown events\n  // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\n  // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\n  // value to 0.\n  return event.buttons === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\n\n\nfunction isFakeTouchstartFromScreenReader(event) {\n  var touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n\n\nvar TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\n\nvar FOCUS_MONITOR_DEFAULT_OPTIONS = /*@__PURE__*/new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\n\nvar captureEventListenerOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n\nvar FocusMonitor = /*@__PURE__*/function () {\n  var FocusMonitor = /*#__PURE__*/function () {\n    function FocusMonitor(_ngZone, _platform,\n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n      var _this14 = this;\n\n      _classCallCheck(this, FocusMonitor);\n\n      this._ngZone = _ngZone;\n      this._platform = _platform;\n      /** The focus origin that the next focus event is a result of. */\n\n      this._origin = null;\n      /** Whether the window has just been focused. */\n\n      this._windowFocused = false;\n      /** Map of elements being monitored to their info. */\n\n      this._elementInfo = new Map();\n      /** The number of elements currently being monitored. */\n\n      this._monitoredElementCount = 0;\n      /**\n       * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n       * as well as the number of monitored elements that they contain. We have to treat focus/blur\n       * handlers differently from the rest of the events, because the browser won't emit events\n       * to the document when focus moves inside of a shadow root.\n       */\n\n      this._rootNodeFocusListenerCount = new Map();\n      /**\n       * Event listener for `keydown` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n      this._documentKeydownListener = function () {\n        // On keydown record the origin and clear any touch event that may be in progress.\n        _this14._lastTouchTarget = null;\n\n        _this14._setOriginForCurrentEventQueue('keyboard');\n      };\n      /**\n       * Event listener for `mousedown` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._documentMousedownListener = function (event) {\n        // On mousedown record the origin only if there is not touch\n        // target, since a mousedown can happen as a result of a touch event.\n        if (!_this14._lastTouchTarget) {\n          // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n          // Resolve the focus source to `keyboard` if we detect one of them.\n          var source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n\n          _this14._setOriginForCurrentEventQueue(source);\n        }\n      };\n      /**\n       * Event listener for `touchstart` events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._documentTouchstartListener = function (event) {\n        // Some screen readers will fire a fake `touchstart` event if an element is activated using\n        // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\n        if (!isFakeTouchstartFromScreenReader(event)) {\n          // When the touchstart event fires the focus event is not yet in the event queue. This means\n          // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n          // see if a focus happens.\n          if (_this14._touchTimeoutId != null) {\n            clearTimeout(_this14._touchTimeoutId);\n          }\n\n          _this14._lastTouchTarget = getTarget(event);\n          _this14._touchTimeoutId = setTimeout(function () {\n            return _this14._lastTouchTarget = null;\n          }, TOUCH_BUFFER_MS);\n        } else if (!_this14._lastTouchTarget) {\n          _this14._setOriginForCurrentEventQueue('keyboard');\n        }\n      };\n      /**\n       * Event listener for `focus` events on the window.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._windowFocusListener = function () {\n        // Make a note of when the window regains focus, so we can\n        // restore the origin info for the focused element.\n        _this14._windowFocused = true;\n        _this14._windowFocusTimeoutId = setTimeout(function () {\n          return _this14._windowFocused = false;\n        });\n      };\n      /**\n       * Event listener for `focus` and 'blur' events on the document.\n       * Needs to be an arrow function in order to preserve the context when it gets bound.\n       */\n\n\n      this._rootNodeFocusAndBlurListener = function (event) {\n        var target = getTarget(event);\n        var handler = event.type === 'focus' ? _this14._onFocus : _this14._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n        for (var element = target; element; element = element.parentElement) {\n          handler.call(_this14, event, element);\n        }\n      };\n\n      this._document = document;\n      this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n      /* IMMEDIATE */\n      ;\n    }\n\n    _createClass(FocusMonitor, [{\n      key: \"monitor\",\n      value: function monitor(element) {\n        var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n          return of(null);\n        } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n\n\n        var rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n        var cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n        if (cachedInfo) {\n          if (checkChildren) {\n            // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n            // observers into ones that behave as if `checkChildren` was turned on. We need a more\n            // robust solution.\n            cachedInfo.checkChildren = true;\n          }\n\n          return cachedInfo.subject;\n        } // Create monitored element info.\n\n\n        var info = {\n          checkChildren: checkChildren,\n          subject: new Subject(),\n          rootNode: rootNode\n        };\n\n        this._elementInfo.set(nativeElement, info);\n\n        this._registerGlobalListeners(info);\n\n        return info.subject;\n      }\n    }, {\n      key: \"stopMonitoring\",\n      value: function stopMonitoring(element) {\n        var nativeElement = coerceElement(element);\n\n        var elementInfo = this._elementInfo.get(nativeElement);\n\n        if (elementInfo) {\n          elementInfo.subject.complete();\n\n          this._setClasses(nativeElement);\n\n          this._elementInfo.delete(nativeElement);\n\n          this._removeGlobalListeners(elementInfo);\n        }\n      }\n    }, {\n      key: \"focusVia\",\n      value: function focusVia(element, origin, options) {\n        var _this15 = this;\n\n        var nativeElement = coerceElement(element);\n\n        var focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n\n\n        if (nativeElement === focusedElement) {\n          this._getClosestElementsInfo(nativeElement).forEach(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                currentElement = _ref2[0],\n                info = _ref2[1];\n\n            return _this15._originChanged(currentElement, origin, info);\n          });\n        } else {\n          this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n          if (typeof nativeElement.focus === 'function') {\n            nativeElement.focus(options);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this16 = this;\n\n        this._elementInfo.forEach(function (_info, element) {\n          return _this16.stopMonitoring(element);\n        });\n      }\n      /** Access injected document if available or fallback to global document reference */\n\n    }, {\n      key: \"_getDocument\",\n      value: function _getDocument() {\n        return this._document || document;\n      }\n      /** Use defaultView of injected document if available or fallback to global window reference */\n\n    }, {\n      key: \"_getWindow\",\n      value: function _getWindow() {\n        var doc = this._getDocument();\n\n        return doc.defaultView || window;\n      }\n    }, {\n      key: \"_toggleClass\",\n      value: function _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n          element.classList.add(className);\n        } else {\n          element.classList.remove(className);\n        }\n      }\n    }, {\n      key: \"_getFocusOrigin\",\n      value: function _getFocusOrigin(event) {\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (this._origin) {\n          return this._origin;\n        }\n\n        if (this._windowFocused && this._lastFocusOrigin) {\n          return this._lastFocusOrigin;\n        } else if (this._wasCausedByTouch(event)) {\n          return 'touch';\n        } else {\n          return 'program';\n        }\n      }\n      /**\n       * Sets the focus classes on the element based on the given focus origin.\n       * @param element The element to update the classes on.\n       * @param origin The focus origin.\n       */\n\n    }, {\n      key: \"_setClasses\",\n      value: function _setClasses(element, origin) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n      }\n      /**\n       * Sets the origin and schedules an async function to clear it at the end of the event queue.\n       * If the detection mode is 'eventual', the origin is never cleared.\n       * @param origin The origin to set.\n       */\n\n    }, {\n      key: \"_setOriginForCurrentEventQueue\",\n      value: function _setOriginForCurrentEventQueue(origin) {\n        var _this17 = this;\n\n        this._ngZone.runOutsideAngular(function () {\n          _this17._origin = origin;\n\n          if (_this17._detectionMode === 0\n          /* IMMEDIATE */\n          ) {\n              // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n              // tick after the interaction event fired. To ensure the focus origin is always correct,\n              // the focus origin will be determined at the beginning of the next tick.\n              _this17._originTimeoutId = setTimeout(function () {\n                return _this17._origin = null;\n              }, 1);\n            }\n        });\n      }\n      /**\n       * Checks whether the given focus event was caused by a touchstart event.\n       * @param event The focus event to check.\n       * @returns Whether the event was caused by a touch.\n       */\n\n    }, {\n      key: \"_wasCausedByTouch\",\n      value: function _wasCausedByTouch(event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        var focusTarget = getTarget(event);\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n      }\n      /**\n       * Handles focus events on a registered element.\n       * @param event The focus event.\n       * @param element The monitored element.\n       */\n\n    }, {\n      key: \"_onFocus\",\n      value: function _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        var elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {\n          return;\n        }\n\n        this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n      }\n      /**\n       * Handles blur events on a registered element.\n       * @param event The blur event.\n       * @param element The monitored element.\n       */\n\n    }, {\n      key: \"_onBlur\",\n      value: function _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        var elementInfo = this._elementInfo.get(element);\n\n        if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n          return;\n        }\n\n        this._setClasses(element);\n\n        this._emitOrigin(elementInfo.subject, null);\n      }\n    }, {\n      key: \"_emitOrigin\",\n      value: function _emitOrigin(subject, origin) {\n        this._ngZone.run(function () {\n          return subject.next(origin);\n        });\n      }\n    }, {\n      key: \"_registerGlobalListeners\",\n      value: function _registerGlobalListeners(elementInfo) {\n        var _this18 = this;\n\n        if (!this._platform.isBrowser) {\n          return;\n        }\n\n        var rootNode = elementInfo.rootNode;\n        var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n        if (!rootNodeFocusListeners) {\n          this._ngZone.runOutsideAngular(function () {\n            rootNode.addEventListener('focus', _this18._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            rootNode.addEventListener('blur', _this18._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          });\n        }\n\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n        if (++this._monitoredElementCount === 1) {\n          // Note: we listen to events in the capture phase so we\n          // can detect them even if the user stops propagation.\n          this._ngZone.runOutsideAngular(function () {\n            var document = _this18._getDocument();\n\n            var window = _this18._getWindow();\n\n            document.addEventListener('keydown', _this18._documentKeydownListener, captureEventListenerOptions);\n            document.addEventListener('mousedown', _this18._documentMousedownListener, captureEventListenerOptions);\n            document.addEventListener('touchstart', _this18._documentTouchstartListener, captureEventListenerOptions);\n            window.addEventListener('focus', _this18._windowFocusListener);\n          });\n        }\n      }\n    }, {\n      key: \"_removeGlobalListeners\",\n      value: function _removeGlobalListeners(elementInfo) {\n        var rootNode = elementInfo.rootNode;\n\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n          var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n          if (rootNodeFocusListeners > 1) {\n            this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n          } else {\n            rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n            this._rootNodeFocusListenerCount.delete(rootNode);\n          }\n        } // Unregister global listeners when last element is unmonitored.\n\n\n        if (! --this._monitoredElementCount) {\n          var _document2 = this._getDocument();\n\n          var _window = this._getWindow();\n\n          _document2.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n\n          _document2.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n\n          _document2.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n\n          _window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n\n          clearTimeout(this._windowFocusTimeoutId);\n          clearTimeout(this._touchTimeoutId);\n          clearTimeout(this._originTimeoutId);\n        }\n      }\n      /** Updates all the state on an element once its focus origin has changed. */\n\n    }, {\n      key: \"_originChanged\",\n      value: function _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n\n        this._emitOrigin(elementInfo.subject, origin);\n\n        this._lastFocusOrigin = origin;\n      }\n      /**\n       * Collects the `MonitoredElementInfo` of a particular element and\n       * all of its ancestors that have enabled `checkChildren`.\n       * @param element Element from which to start the search.\n       */\n\n    }, {\n      key: \"_getClosestElementsInfo\",\n      value: function _getClosestElementsInfo(element) {\n        var results = [];\n\n        this._elementInfo.forEach(function (info, currentElement) {\n          if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n            results.push([currentElement, info]);\n          }\n        });\n\n        return results;\n      }\n    }]);\n\n    return FocusMonitor;\n  }();\n\n  FocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n    return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  };\n\n  FocusMonitor.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function FocusMonitor_Factory() {\n      return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n    },\n    token: FocusMonitor,\n    providedIn: \"root\"\n  });\n  return FocusMonitor;\n}();\n/** Gets the target of an event, accounting for Shadow DOM. */\n\n\nfunction getTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n\nvar CdkMonitorFocus = /*@__PURE__*/function () {\n  var CdkMonitorFocus = /*#__PURE__*/function () {\n    function CdkMonitorFocus(_elementRef, _focusMonitor) {\n      _classCallCheck(this, CdkMonitorFocus);\n\n      this._elementRef = _elementRef;\n      this._focusMonitor = _focusMonitor;\n      this.cdkFocusChange = new EventEmitter();\n    }\n\n    _createClass(CdkMonitorFocus, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this19 = this;\n\n        var element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n          return _this19.cdkFocusChange.emit(origin);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n\n        if (this._monitorSubscription) {\n          this._monitorSubscription.unsubscribe();\n        }\n      }\n    }]);\n\n    return CdkMonitorFocus;\n  }();\n\n  CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n    return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n  };\n\n  CdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkMonitorFocus,\n    selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n    outputs: {\n      cdkFocusChange: \"cdkFocusChange\"\n    }\n  });\n  return CdkMonitorFocus;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nvar BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nvar WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nvar HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\nvar HighContrastModeDetector = /*@__PURE__*/function () {\n  var HighContrastModeDetector = /*#__PURE__*/function () {\n    function HighContrastModeDetector(_platform, document) {\n      _classCallCheck(this, HighContrastModeDetector);\n\n      this._platform = _platform;\n      this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n\n\n    _createClass(HighContrastModeDetector, [{\n      key: \"getHighContrastMode\",\n      value: function getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n          return 0\n          /* NONE */\n          ;\n        } // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n        var testElement = this._document.createElement('div');\n\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n\n        this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n        var documentWindow = this._document.defaultView || window;\n        var computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n        var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n        this._document.body.removeChild(testElement);\n\n        switch (computedColor) {\n          case 'rgb(0,0,0)':\n            return 2\n            /* WHITE_ON_BLACK */\n            ;\n\n          case 'rgb(255,255,255)':\n            return 1\n            /* BLACK_ON_WHITE */\n            ;\n        }\n\n        return 0\n        /* NONE */\n        ;\n      }\n      /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n    }, {\n      key: \"_applyBodyHighContrastModeCssClasses\",\n      value: function _applyBodyHighContrastModeCssClasses() {\n        if (this._platform.isBrowser && this._document.body) {\n          var bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n          bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n          bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n          var mode = this.getHighContrastMode();\n\n          if (mode === 1\n          /* BLACK_ON_WHITE */\n          ) {\n              bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n              bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            } else if (mode === 2\n          /* WHITE_ON_BLACK */\n          ) {\n              bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n              bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n      }\n    }]);\n\n    return HighContrastModeDetector;\n  }();\n\n  HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n    return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  HighContrastModeDetector.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function HighContrastModeDetector_Factory() {\n      return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT));\n    },\n    token: HighContrastModeDetector,\n    providedIn: \"root\"\n  });\n  return HighContrastModeDetector;\n}();\n\nvar A11yModule = /*@__PURE__*/function () {\n  var A11yModule = function A11yModule(highContrastModeDetector) {\n    _classCallCheck(this, A11yModule);\n\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  };\n\n  A11yModule.ɵfac = function A11yModule_Factory(t) {\n    return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n  };\n\n  A11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: A11yModule\n  });\n  A11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[PlatformModule, ObserversModule]]\n  });\n  return A11yModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function declarations() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function imports() {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b }; //# sourceMappingURL=a11y.js.map","map":null,"metadata":{},"sourceType":"module"}