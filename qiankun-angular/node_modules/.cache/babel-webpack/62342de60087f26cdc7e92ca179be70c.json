{"ast":null,"code":"import _slicedToArray from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot as _getShadowRoot2 } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\n\nfunction extendStyles(dest, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key] = source[key];\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  var userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\n\n\nfunction toggleVisibility(element, enable) {\n  var styles = element.style;\n  styles.position = enable ? '' : 'fixed';\n  styles.top = styles.opacity = enable ? '' : '0';\n  styles.left = enable ? '' : '-999em';\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  var computedStyle = getComputedStyle(element);\n  var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  var property = transitionedProperties.find(function (prop) {\n    return prop === 'transform' || prop === 'all';\n  }); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n\n  var propertyIndex = transitionedProperties.indexOf(property);\n  var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  var value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(function (part) {\n    return part.trim();\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\n\n\nfunction getMutableClientRect(element) {\n  var clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  var top = clientRect.top,\n      bottom = clientRect.bottom,\n      left = clientRect.left,\n      right = clientRect.right;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\n\n\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  var top = rect.top,\n      right = rect.right,\n      bottom = rect.bottom,\n      left = rect.left,\n      width = rect.width,\n      height = rect.height;\n  var xThreshold = width * threshold;\n  var yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\n\n\nvar ParentPositionTracker = /*#__PURE__*/function () {\n  function ParentPositionTracker(_document, _viewportRuler) {\n    _classCallCheck(this, ParentPositionTracker);\n\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    /** Cached positions of the scrollable parent elements. */\n\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n\n\n  _createClass(ParentPositionTracker, [{\n    key: \"clear\",\n    value: function clear() {\n      this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n\n  }, {\n    key: \"cache\",\n    value: function cache(elements) {\n      var _this = this;\n\n      this.clear();\n      this.positions.set(this._document, {\n        scrollPosition: this._viewportRuler.getViewportScrollPosition()\n      });\n      elements.forEach(function (element) {\n        _this.positions.set(element, {\n          scrollPosition: {\n            top: element.scrollTop,\n            left: element.scrollLeft\n          },\n          clientRect: getMutableClientRect(element)\n        });\n      });\n    }\n    /** Handles scrolling while a drag is taking place. */\n\n  }, {\n    key: \"handleScroll\",\n    value: function handleScroll(event) {\n      var target = event.target;\n      var cachedPosition = this.positions.get(target);\n\n      if (!cachedPosition) {\n        return null;\n      } // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n      // parent is the `document`, we use the `documentElement`, because IE doesn't support\n      // `contains` on the `document`.\n\n\n      var scrolledParentNode = target === this._document ? target.documentElement : target;\n      var scrollPosition = cachedPosition.scrollPosition;\n      var newTop;\n      var newLeft;\n\n      if (target === this._document) {\n        var viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n        newTop = viewportScrollPosition.top;\n        newLeft = viewportScrollPosition.left;\n      } else {\n        newTop = target.scrollTop;\n        newLeft = target.scrollLeft;\n      }\n\n      var topDifference = scrollPosition.top - newTop;\n      var leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll\n      // parents that are inside the element that was scrolled.\n\n      this.positions.forEach(function (position, node) {\n        if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n          adjustClientRect(position.clientRect, topDifference, leftDifference);\n        }\n      });\n      scrollPosition.top = newTop;\n      scrollPosition.left = newLeft;\n      return {\n        top: topDifference,\n        left: leftDifference\n      };\n    }\n  }]);\n\n  return ParentPositionTracker;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Creates a deep clone of an element. */\n\n\nfunction deepCloneNode(node) {\n  var clone = node.cloneNode(true);\n  var descendantsWithId = clone.querySelectorAll('[id]');\n  var nodeName = node.nodeName.toLowerCase(); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n\n  for (var i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\n\n\nfunction transferData(selector, node, clone, callback) {\n  var descendantElements = node.querySelectorAll(selector);\n\n  if (descendantElements.length) {\n    var cloneElements = clone.querySelectorAll(selector);\n\n    for (var i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n} // Counter for unique cloned radio button names.\n\n\nvar cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\n\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  } // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n\n\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = \"mat-clone-\".concat(clone.name, \"-\").concat(cloneUniqueId++);\n  }\n}\n/** Transfers the data of one canvas element to another. */\n\n\nfunction transferCanvasData(source, clone) {\n  var context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch (_a) {}\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options that can be used to bind a passive event listener. */\n\n\nvar passiveEventListenerOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\n\nvar activeEventListenerOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\n\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\n\nvar DragRef = /*#__PURE__*/function () {\n  function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    var _this2 = this;\n\n    _classCallCheck(this, DragRef);\n\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /** Emits when the item is being moved. */\n\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n\n    this._pointerDown = function (event) {\n      _this2.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n\n      if (_this2._handles.length) {\n        var targetHandle = _this2._handles.find(function (handle) {\n          var target = event.target;\n          return !!target && (target === handle || handle.contains(target));\n        });\n\n        if (targetHandle && !_this2._disabledHandles.has(targetHandle) && !_this2.disabled) {\n          _this2._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!_this2.disabled) {\n        _this2._initializeDragSequence(_this2._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n\n\n    this._pointerMove = function (event) {\n      var pointerPosition = _this2._getPointerPositionOnPage(event);\n\n      if (!_this2._hasStartedDragging) {\n        var distanceX = Math.abs(pointerPosition.x - _this2._pickupPositionOnPage.x);\n        var distanceY = Math.abs(pointerPosition.y - _this2._pickupPositionOnPage.y);\n        var isOverThreshold = distanceX + distanceY >= _this2._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (isOverThreshold) {\n          var isDelayElapsed = Date.now() >= _this2._dragStartTime + _this2._getDragStartDelay(event);\n\n          var container = _this2._dropContainer;\n\n          if (!isDelayElapsed) {\n            _this2._endDragSequence(event);\n\n            return;\n          } // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n\n\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            _this2._hasStartedDragging = true;\n\n            _this2._ngZone.run(function () {\n              return _this2._startDragSequence(event);\n            });\n          }\n        }\n\n        return;\n      } // We only need the preview dimensions if we have a boundary element.\n\n\n      if (_this2._boundaryElement) {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!_this2._previewRect || !_this2._previewRect.width && !_this2._previewRect.height) {\n          _this2._previewRect = (_this2._preview || _this2._rootElement).getBoundingClientRect();\n        }\n      } // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n\n\n      event.preventDefault();\n\n      var constrainedPointerPosition = _this2._getConstrainedPointerPosition(pointerPosition);\n\n      _this2._hasMoved = true;\n      _this2._lastKnownPointerPosition = pointerPosition;\n\n      _this2._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (_this2._dropContainer) {\n        _this2._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        var activeTransform = _this2._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - _this2._pickupPositionOnPage.x + _this2._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - _this2._pickupPositionOnPage.y + _this2._passiveTransform.y;\n\n        _this2._applyRootElementTransform(activeTransform.x, activeTransform.y); // Apply transform as attribute if dragging and svg element to work for IE\n\n\n        if (typeof SVGElement !== 'undefined' && _this2._rootElement instanceof SVGElement) {\n          var appliedTransform = \"translate(\".concat(activeTransform.x, \" \").concat(activeTransform.y, \")\");\n\n          _this2._rootElement.setAttribute('transform', appliedTransform);\n        }\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (_this2._moveEvents.observers.length) {\n        _this2._ngZone.run(function () {\n          _this2._moveEvents.next({\n            source: _this2,\n            pointerPosition: constrainedPointerPosition,\n            event: event,\n            distance: _this2._getDragDistance(constrainedPointerPosition),\n            delta: _this2._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n\n\n    this._pointerUp = function (event) {\n      _this2._endDragSequence(event);\n    };\n\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /** Whether starting to drag this element is disabled. */\n\n\n  _createClass(DragRef, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    },\n    set: function set(value) {\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._toggleNativeDragInteractions();\n\n        this._handles.forEach(function (handle) {\n          return toggleNativeDragInteractions(handle, newValue);\n        });\n      }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n\n  }, {\n    key: \"getPlaceholderElement\",\n    value: function getPlaceholderElement() {\n      return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n\n  }, {\n    key: \"getRootElement\",\n    value: function getRootElement() {\n      return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n\n  }, {\n    key: \"getVisibleElement\",\n    value: function getVisibleElement() {\n      return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n\n  }, {\n    key: \"withHandles\",\n    value: function withHandles(handles) {\n      var _this3 = this;\n\n      this._handles = handles.map(function (handle) {\n        return coerceElement(handle);\n      });\n\n      this._handles.forEach(function (handle) {\n        return toggleNativeDragInteractions(handle, _this3.disabled);\n      });\n\n      this._toggleNativeDragInteractions(); // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n      // the set, rather than iterate over it and filter out the destroyed handles, because while\n      // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n      // use an array internally which may throw an error.\n\n\n      var disabledHandles = new Set();\n\n      this._disabledHandles.forEach(function (handle) {\n        if (_this3._handles.indexOf(handle) > -1) {\n          disabledHandles.add(handle);\n        }\n      });\n\n      this._disabledHandles = disabledHandles;\n      return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n\n  }, {\n    key: \"withPreviewTemplate\",\n    value: function withPreviewTemplate(template) {\n      this._previewTemplate = template;\n      return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n\n  }, {\n    key: \"withPlaceholderTemplate\",\n    value: function withPlaceholderTemplate(template) {\n      this._placeholderTemplate = template;\n      return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n\n  }, {\n    key: \"withRootElement\",\n    value: function withRootElement(rootElement) {\n      var _this4 = this;\n\n      var element = coerceElement(rootElement);\n\n      if (element !== this._rootElement) {\n        if (this._rootElement) {\n          this._removeRootElementListeners(this._rootElement);\n        }\n\n        this._ngZone.runOutsideAngular(function () {\n          element.addEventListener('mousedown', _this4._pointerDown, activeEventListenerOptions);\n          element.addEventListener('touchstart', _this4._pointerDown, passiveEventListenerOptions);\n        });\n\n        this._initialTransform = undefined;\n        this._rootElement = element;\n      }\n\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        this._ownerSVGElement = this._rootElement.ownerSVGElement;\n      }\n\n      return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n\n  }, {\n    key: \"withBoundaryElement\",\n    value: function withBoundaryElement(boundaryElement) {\n      var _this5 = this;\n\n      this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n\n      this._resizeSubscription.unsubscribe();\n\n      if (boundaryElement) {\n        this._resizeSubscription = this._viewportRuler.change(10).subscribe(function () {\n          return _this5._containInsideBoundaryOnResize();\n        });\n      }\n\n      return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n\n  }, {\n    key: \"withParent\",\n    value: function withParent(parent) {\n      this._parentDragRef = parent;\n      return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n\n\n      if (this.isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        removeNode(this._rootElement);\n      }\n\n      removeNode(this._anchor);\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._dragDropRegistry.removeDragItem(this);\n\n      this._removeSubscriptions();\n\n      this.beforeStarted.complete();\n      this.started.complete();\n      this.released.complete();\n      this.ended.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n\n      this._moveEvents.complete();\n\n      this._handles = [];\n\n      this._disabledHandles.clear();\n\n      this._dropContainer = undefined;\n\n      this._resizeSubscription.unsubscribe();\n\n      this._parentPositions.clear();\n\n      this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._rootElement.style.transform = this._initialTransform || '';\n      this._activeTransform = {\n        x: 0,\n        y: 0\n      };\n      this._passiveTransform = {\n        x: 0,\n        y: 0\n      };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n\n  }, {\n    key: \"disableHandle\",\n    value: function disableHandle(handle) {\n      if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n        this._disabledHandles.add(handle);\n\n        toggleNativeDragInteractions(handle, true);\n      }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n\n  }, {\n    key: \"enableHandle\",\n    value: function enableHandle(handle) {\n      if (this._disabledHandles.has(handle)) {\n        this._disabledHandles.delete(handle);\n\n        toggleNativeDragInteractions(handle, this.disabled);\n      }\n    }\n    /** Sets the layout direction of the draggable item. */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      this._direction = direction;\n      return this;\n    }\n    /** Sets the container that the item is part of. */\n\n  }, {\n    key: \"_withDropContainer\",\n    value: function _withDropContainer(container) {\n      this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n\n  }, {\n    key: \"getFreeDragPosition\",\n    value: function getFreeDragPosition() {\n      var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n      return {\n        x: position.x,\n        y: position.y\n      };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n\n  }, {\n    key: \"setFreeDragPosition\",\n    value: function setFreeDragPosition(value) {\n      this._activeTransform = {\n        x: 0,\n        y: 0\n      };\n      this._passiveTransform.x = value.x;\n      this._passiveTransform.y = value.y;\n\n      if (!this._dropContainer) {\n        this._applyRootElementTransform(value.x, value.y);\n      }\n\n      return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n\n  }, {\n    key: \"_sortFromLastPointerPosition\",\n    value: function _sortFromLastPointerPosition() {\n      var position = this._lastKnownPointerPosition;\n\n      if (position && this._dropContainer) {\n        this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n      }\n    }\n    /** Unsubscribes from the global subscriptions. */\n\n  }, {\n    key: \"_removeSubscriptions\",\n    value: function _removeSubscriptions() {\n      this._pointerMoveSubscription.unsubscribe();\n\n      this._pointerUpSubscription.unsubscribe();\n\n      this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n\n  }, {\n    key: \"_destroyPreview\",\n    value: function _destroyPreview() {\n      if (this._preview) {\n        removeNode(this._preview);\n      }\n\n      if (this._previewRef) {\n        this._previewRef.destroy();\n      }\n\n      this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n\n  }, {\n    key: \"_destroyPlaceholder\",\n    value: function _destroyPlaceholder() {\n      if (this._placeholder) {\n        removeNode(this._placeholder);\n      }\n\n      if (this._placeholderRef) {\n        this._placeholderRef.destroy();\n      }\n\n      this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n\n  }, {\n    key: \"_endDragSequence\",\n    value: function _endDragSequence(event) {\n      var _this6 = this;\n\n      // Note that here we use `isDragging` from the service, rather than from `this`.\n      // The difference is that the one from the service reflects whether a dragging sequence\n      // has been initiated, whereas the one on `this` includes whether the user has passed\n      // the minimum dragging threshold.\n      if (!this._dragDropRegistry.isDragging(this)) {\n        return;\n      }\n\n      this._removeSubscriptions();\n\n      this._dragDropRegistry.stopDragging(this);\n\n      this._toggleNativeDragInteractions();\n\n      if (this._handles) {\n        this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n      }\n\n      if (!this._hasStartedDragging) {\n        return;\n      }\n\n      this.released.next({\n        source: this\n      });\n\n      if (this._dropContainer) {\n        // Stop scrolling immediately, instead of waiting for the animation to finish.\n        this._dropContainer._stopScrolling();\n\n        this._animatePreviewToPlaceholder().then(function () {\n          _this6._cleanupDragArtifacts(event);\n\n          _this6._cleanupCachedDimensions();\n\n          _this6._dragDropRegistry.stopDragging(_this6);\n        });\n      } else {\n        // Convert the active transform into a passive one. This means that next time\n        // the user starts dragging the item, its position will be calculated relatively\n        // to the new passive transform.\n        this._passiveTransform.x = this._activeTransform.x;\n        this._passiveTransform.y = this._activeTransform.y;\n\n        this._ngZone.run(function () {\n          _this6.ended.next({\n            source: _this6,\n            distance: _this6._getDragDistance(_this6._getPointerPositionOnPage(event))\n          });\n        });\n\n        this._cleanupCachedDimensions();\n\n        this._dragDropRegistry.stopDragging(this);\n      }\n    }\n    /** Starts the dragging sequence. */\n\n  }, {\n    key: \"_startDragSequence\",\n    value: function _startDragSequence(event) {\n      if (isTouchEvent(event)) {\n        this._lastTouchEventTime = Date.now();\n      }\n\n      this._toggleNativeDragInteractions();\n\n      var dropContainer = this._dropContainer;\n\n      if (dropContainer) {\n        var element = this._rootElement;\n        var parent = element.parentNode;\n\n        var preview = this._preview = this._createPreviewElement();\n\n        var placeholder = this._placeholder = this._createPlaceholderElement();\n\n        var anchor = this._anchor = this._anchor || this._document.createComment(''); // Needs to happen before the root element is moved.\n\n\n        var shadowRoot = this._getShadowRoot(); // Insert an anchor node so that we can restore the element's position in the DOM.\n\n\n        parent.insertBefore(anchor, element); // We move the element out at the end of the body and we make it hidden, because keeping it in\n        // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n        // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n        toggleVisibility(element, false);\n\n        this._document.body.appendChild(parent.replaceChild(placeholder, element));\n\n        getPreviewInsertionPoint(this._document, shadowRoot).appendChild(preview);\n        this.started.next({\n          source: this\n        }); // Emit before notifying the container.\n\n        dropContainer.start();\n        this._initialContainer = dropContainer;\n        this._initialIndex = dropContainer.getItemIndex(this);\n      } else {\n        this.started.next({\n          source: this\n        });\n        this._initialContainer = this._initialIndex = undefined;\n      } // Important to run after we've called `start` on the parent container\n      // so that it has had time to resolve its scrollable parents.\n\n\n      this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n\n  }, {\n    key: \"_initializeDragSequence\",\n    value: function _initializeDragSequence(referenceElement, event) {\n      var _this7 = this;\n\n      // Stop propagation if the item is inside another\n      // draggable so we don't start multiple drag sequences.\n      if (this._parentDragRef) {\n        event.stopPropagation();\n      }\n\n      var isDragging = this.isDragging();\n      var isTouchSequence = isTouchEvent(event);\n      var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n      var rootElement = this._rootElement;\n      var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now(); // If the event started from an element with the native HTML drag&drop, it'll interfere\n      // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n      // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n      // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n      // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n      // events from firing on touch devices.\n\n      if (event.target && event.target.draggable && event.type === 'mousedown') {\n        event.preventDefault();\n      } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n      if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n        return;\n      } // If we've got handles, we need to disable the tap highlight on the entire root element,\n      // otherwise iOS will still add it, even though all the drag interactions on the handle\n      // are disabled.\n\n\n      if (this._handles.length) {\n        this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n        rootElement.style.webkitTapHighlightColor = 'transparent';\n      }\n\n      this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch\n      // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n\n      this._removeSubscriptions();\n\n      this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n      this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n      this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(function (scrollEvent) {\n        _this7._updateOnScroll(scrollEvent);\n      });\n\n      if (this._boundaryElement) {\n        this._boundaryRect = getMutableClientRect(this._boundaryElement);\n      } // If we have a custom preview we can't know ahead of time how large it'll be so we position\n      // it next to the cursor. The exception is when the consumer has opted into making the preview\n      // the same size as the root element, in which case we do know the size.\n\n\n      var previewTemplate = this._previewTemplate;\n      this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n        x: 0,\n        y: 0\n      } : this._getPointerPositionInElement(referenceElement, event);\n\n      var pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n\n      this._pointerDirectionDelta = {\n        x: 0,\n        y: 0\n      };\n      this._pointerPositionAtLastDirectionChange = {\n        x: pointerPosition.x,\n        y: pointerPosition.y\n      };\n      this._dragStartTime = Date.now();\n\n      this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n\n  }, {\n    key: \"_cleanupDragArtifacts\",\n    value: function _cleanupDragArtifacts(event) {\n      var _this8 = this;\n\n      // Restore the element's visibility and insert it at its old position in the DOM.\n      // It's important that we maintain the position, because moving the element around in the DOM\n      // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n      // while moving the existing elements in all other cases.\n      toggleVisibility(this._rootElement, true);\n\n      this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n\n      this._destroyPreview();\n\n      this._destroyPlaceholder();\n\n      this._boundaryRect = this._previewRect = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n      this._ngZone.run(function () {\n        var container = _this8._dropContainer;\n        var currentIndex = container.getItemIndex(_this8);\n\n        var pointerPosition = _this8._getPointerPositionOnPage(event);\n\n        var distance = _this8._getDragDistance(_this8._getPointerPositionOnPage(event));\n\n        var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n\n        _this8.ended.next({\n          source: _this8,\n          distance: distance\n        });\n\n        _this8.dropped.next({\n          item: _this8,\n          currentIndex: currentIndex,\n          previousIndex: _this8._initialIndex,\n          container: container,\n          previousContainer: _this8._initialContainer,\n          isPointerOverContainer: isPointerOverContainer,\n          distance: distance\n        });\n\n        container.drop(_this8, currentIndex, _this8._initialIndex, _this8._initialContainer, isPointerOverContainer, distance);\n        _this8._dropContainer = _this8._initialContainer;\n      });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n\n  }, {\n    key: \"_updateActiveDropContainer\",\n    value: function _updateActiveDropContainer(_ref, _ref2) {\n      var _this9 = this;\n\n      var x = _ref.x,\n          y = _ref.y;\n      var rawX = _ref2.x,\n          rawY = _ref2.y;\n\n      // Drop container that draggable has been moved into.\n      var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its\n      // initial container, check whether the it's over the initial container. This handles the\n      // case where two containers are connected one way and the user tries to undo dragging an\n      // item into a new container.\n\n\n      if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n        newContainer = this._initialContainer;\n      }\n\n      if (newContainer && newContainer !== this._dropContainer) {\n        this._ngZone.run(function () {\n          // Notify the old container that the item has left.\n          _this9.exited.next({\n            item: _this9,\n            container: _this9._dropContainer\n          });\n\n          _this9._dropContainer.exit(_this9); // Notify the new container that the item has entered.\n\n\n          _this9._dropContainer = newContainer;\n\n          _this9._dropContainer.enter(_this9, x, y, newContainer === _this9._initialContainer && // If we're re-entering the initial container and sorting is disabled,\n          // put item the into its starting index to begin with.\n          newContainer.sortingDisabled ? _this9._initialIndex : undefined);\n\n          _this9.entered.next({\n            item: _this9,\n            container: newContainer,\n            currentIndex: newContainer.getItemIndex(_this9)\n          });\n        });\n      }\n\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      this._preview.style.transform = getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n\n  }, {\n    key: \"_createPreviewElement\",\n    value: function _createPreviewElement() {\n      var previewConfig = this._previewTemplate;\n      var previewClass = this.previewClass;\n      var previewTemplate = previewConfig ? previewConfig.template : null;\n      var preview;\n\n      if (previewTemplate && previewConfig) {\n        // Measure the element before we've inserted the preview\n        // since the insertion could throw off the measurement.\n        var rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n        var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n        viewRef.detectChanges();\n        preview = getRootNode(viewRef, this._document);\n        this._previewRef = viewRef;\n\n        if (previewConfig.matchSize) {\n          matchElementSize(preview, rootRect);\n        } else {\n          preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n      } else {\n        var element = this._rootElement;\n        preview = deepCloneNode(element);\n        matchElementSize(preview, element.getBoundingClientRect());\n      }\n\n      extendStyles(preview.style, {\n        // It's important that we disable the pointer events on the preview, because\n        // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n        pointerEvents: 'none',\n        // We have to reset the margin, because it can throw off positioning relative to the viewport.\n        margin: '0',\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        zIndex: \"\".concat(this._config.zIndex || 1000)\n      });\n      toggleNativeDragInteractions(preview, false);\n      preview.classList.add('cdk-drag-preview');\n      preview.setAttribute('dir', this._direction);\n\n      if (previewClass) {\n        if (Array.isArray(previewClass)) {\n          previewClass.forEach(function (className) {\n            return preview.classList.add(className);\n          });\n        } else {\n          preview.classList.add(previewClass);\n        }\n      }\n\n      return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n\n  }, {\n    key: \"_animatePreviewToPlaceholder\",\n    value: function _animatePreviewToPlaceholder() {\n      var _this10 = this;\n\n      // If the user hasn't moved yet, the transitionend event won't fire.\n      if (!this._hasMoved) {\n        return Promise.resolve();\n      }\n\n      var placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n      this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n      this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n      // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n      // apply its style, we take advantage of the available info to figure out whether we need to\n      // bind the event in the first place.\n\n      var duration = getTransformTransitionDurationInMs(this._preview);\n\n      if (duration === 0) {\n        return Promise.resolve();\n      }\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          var handler = function handler(event) {\n            if (!event || event.target === _this10._preview && event.propertyName === 'transform') {\n              _this10._preview.removeEventListener('transitionend', handler);\n\n              resolve();\n              clearTimeout(timeout);\n            }\n          }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n          // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n          // fire if the transition hasn't completed when it was supposed to.\n\n\n          var timeout = setTimeout(handler, duration * 1.5);\n\n          _this10._preview.addEventListener('transitionend', handler);\n        });\n      });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n\n  }, {\n    key: \"_createPlaceholderElement\",\n    value: function _createPlaceholderElement() {\n      var placeholderConfig = this._placeholderTemplate;\n      var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n      var placeholder;\n\n      if (placeholderTemplate) {\n        this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n\n        this._placeholderRef.detectChanges();\n\n        placeholder = getRootNode(this._placeholderRef, this._document);\n      } else {\n        placeholder = deepCloneNode(this._rootElement);\n      }\n\n      placeholder.classList.add('cdk-drag-placeholder');\n      return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n\n  }, {\n    key: \"_getPointerPositionInElement\",\n    value: function _getPointerPositionInElement(referenceElement, event) {\n      var elementRect = this._rootElement.getBoundingClientRect();\n\n      var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n      var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n      var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n\n      var scrollPosition = this._getViewportScrollPosition();\n\n      var x = point.pageX - referenceRect.left - scrollPosition.left;\n      var y = point.pageY - referenceRect.top - scrollPosition.top;\n      return {\n        x: referenceRect.left - elementRect.left + x,\n        y: referenceRect.top - elementRect.top + y\n      };\n    }\n    /** Determines the point of the page that was touched by the user. */\n\n  }, {\n    key: \"_getPointerPositionOnPage\",\n    value: function _getPointerPositionOnPage(event) {\n      var scrollPosition = this._getViewportScrollPosition();\n\n      var point = isTouchEvent(event) ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n      // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n      // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n      // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n      // throwing an error. The value returned here will be incorrect, but since this only\n      // breaks inside a developer tool and the value is only used for secondary information,\n      // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n      event.touches[0] || event.changedTouches[0] || {\n        pageX: 0,\n        pageY: 0\n      } : event;\n      var x = point.pageX - scrollPosition.left;\n      var y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n      // coordinate system\n\n      if (this._ownerSVGElement) {\n        var svgMatrix = this._ownerSVGElement.getScreenCTM();\n\n        if (svgMatrix) {\n          var svgPoint = this._ownerSVGElement.createSVGPoint();\n\n          svgPoint.x = x;\n          svgPoint.y = y;\n          return svgPoint.matrixTransform(svgMatrix.inverse());\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n\n  }, {\n    key: \"_getConstrainedPointerPosition\",\n    value: function _getConstrainedPointerPosition(point) {\n      var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n      var _ref3 = this.constrainPosition ? this.constrainPosition(point, this) : point,\n          x = _ref3.x,\n          y = _ref3.y;\n\n      if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n        y = this._pickupPositionOnPage.y;\n      } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n        x = this._pickupPositionOnPage.x;\n      }\n\n      if (this._boundaryRect) {\n        var _this$_pickupPosition = this._pickupPositionInElement,\n            pickupX = _this$_pickupPosition.x,\n            pickupY = _this$_pickupPosition.y;\n        var boundaryRect = this._boundaryRect;\n        var previewRect = this._previewRect;\n        var minY = boundaryRect.top + pickupY;\n        var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n        var minX = boundaryRect.left + pickupX;\n        var maxX = boundaryRect.right - (previewRect.width - pickupX);\n        x = clamp(x, minX, maxX);\n        y = clamp(y, minY, maxY);\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n\n  }, {\n    key: \"_updatePointerDirectionDelta\",\n    value: function _updatePointerDirectionDelta(pointerPositionOnPage) {\n      var x = pointerPositionOnPage.x,\n          y = pointerPositionOnPage.y;\n      var delta = this._pointerDirectionDelta;\n      var positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n      var changeX = Math.abs(x - positionSinceLastChange.x);\n      var changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n      // to change for every pixel, otherwise anything that depends on it can look erratic.\n      // To make the delta more consistent, we track how much the user has moved since the last\n      // delta change and we only update it after it has reached a certain threshold.\n\n      if (changeX > this._config.pointerDirectionChangeThreshold) {\n        delta.x = x > positionSinceLastChange.x ? 1 : -1;\n        positionSinceLastChange.x = x;\n      }\n\n      if (changeY > this._config.pointerDirectionChangeThreshold) {\n        delta.y = y > positionSinceLastChange.y ? 1 : -1;\n        positionSinceLastChange.y = y;\n      }\n\n      return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n\n  }, {\n    key: \"_toggleNativeDragInteractions\",\n    value: function _toggleNativeDragInteractions() {\n      if (!this._rootElement || !this._handles) {\n        return;\n      }\n\n      var shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n      if (shouldEnable !== this._nativeInteractionsEnabled) {\n        this._nativeInteractionsEnabled = shouldEnable;\n        toggleNativeDragInteractions(this._rootElement, shouldEnable);\n      }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n\n  }, {\n    key: \"_removeRootElementListeners\",\n    value: function _removeRootElementListeners(element) {\n      element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n\n  }, {\n    key: \"_applyRootElementTransform\",\n    value: function _applyRootElementTransform(x, y) {\n      var transform = getTransform(x, y); // Cache the previous transform amount only after the first drag sequence, because\n      // we don't want our own transforms to stack on top of each other.\n\n      if (this._initialTransform == null) {\n        this._initialTransform = this._rootElement.style.transform || '';\n      } // Preserve the previous `transform` value, if there was one. Note that we apply our own\n      // transform before the user's, because things like rotation can affect which direction\n      // the element will be translated towards.\n\n\n      this._rootElement.style.transform = this._initialTransform ? transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n\n  }, {\n    key: \"_getDragDistance\",\n    value: function _getDragDistance(currentPosition) {\n      var pickupPosition = this._pickupPositionOnPage;\n\n      if (pickupPosition) {\n        return {\n          x: currentPosition.x - pickupPosition.x,\n          y: currentPosition.y - pickupPosition.y\n        };\n      }\n\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n\n  }, {\n    key: \"_cleanupCachedDimensions\",\n    value: function _cleanupCachedDimensions() {\n      this._boundaryRect = this._previewRect = undefined;\n\n      this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n\n  }, {\n    key: \"_containInsideBoundaryOnResize\",\n    value: function _containInsideBoundaryOnResize() {\n      var _this$_passiveTransfo = this._passiveTransform,\n          x = _this$_passiveTransfo.x,\n          y = _this$_passiveTransfo.y;\n\n      if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n        return;\n      }\n\n      var boundaryRect = this._boundaryElement.getBoundingClientRect();\n\n      var elementRect = this._rootElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a\n      // different tab). Don't do anything in this case so we don't clear the user's position.\n\n\n      if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n        return;\n      }\n\n      var leftOverflow = boundaryRect.left - elementRect.left;\n      var rightOverflow = elementRect.right - boundaryRect.right;\n      var topOverflow = boundaryRect.top - elementRect.top;\n      var bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't\n      // do much to make it fit so we just anchor it to the left.\n\n      if (boundaryRect.width > elementRect.width) {\n        if (leftOverflow > 0) {\n          x += leftOverflow;\n        }\n\n        if (rightOverflow > 0) {\n          x -= rightOverflow;\n        }\n      } else {\n        x = 0;\n      } // If the element has become taller than the boundary, we can't\n      // do much to make it fit so we just anchor it to the top.\n\n\n      if (boundaryRect.height > elementRect.height) {\n        if (topOverflow > 0) {\n          y += topOverflow;\n        }\n\n        if (bottomOverflow > 0) {\n          y -= bottomOverflow;\n        }\n      } else {\n        y = 0;\n      }\n\n      if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n        this.setFreeDragPosition({\n          y: y,\n          x: x\n        });\n      }\n    }\n    /** Gets the drag start delay, based on the event type. */\n\n  }, {\n    key: \"_getDragStartDelay\",\n    value: function _getDragStartDelay(event) {\n      var value = this.dragStartDelay;\n\n      if (typeof value === 'number') {\n        return value;\n      } else if (isTouchEvent(event)) {\n        return value.touch;\n      }\n\n      return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n\n  }, {\n    key: \"_updateOnScroll\",\n    value: function _updateOnScroll(event) {\n      var scrollDifference = this._parentPositions.handleScroll(event);\n\n      if (scrollDifference) {\n        var target = event.target; // ClientRect dimensions are based on the scroll position of the page and its parent node so\n        // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n        // the `document` specifically since IE doesn't support `contains` on it.\n\n        if (this._boundaryRect && (target === this._document || target !== this._boundaryElement && target.contains(this._boundaryElement))) {\n          adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n        }\n\n        this._pickupPositionOnPage.x += scrollDifference.left;\n        this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because\n        // it isn't relative to the viewport like the preview inside a drop list.\n\n        if (!this._dropContainer) {\n          this._activeTransform.x -= scrollDifference.left;\n          this._activeTransform.y -= scrollDifference.top;\n\n          this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n        }\n      }\n    }\n    /** Gets the scroll position of the viewport. */\n\n  }, {\n    key: \"_getViewportScrollPosition\",\n    value: function _getViewportScrollPosition() {\n      var cachedPosition = this._parentPositions.positions.get(this._document);\n\n      return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n\n  }, {\n    key: \"_getShadowRoot\",\n    value: function _getShadowRoot() {\n      if (this._cachedShadowRoot === undefined) {\n        this._cachedShadowRoot = _getShadowRoot2(this._rootElement);\n      }\n\n      return this._cachedShadowRoot;\n    }\n  }]);\n\n  return DragRef;\n}();\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return \"translate3d(\".concat(Math.round(x), \"px, \").concat(Math.round(y), \"px, 0)\");\n}\n/** Clamps a value between a minimum and a maximum. */\n\n\nfunction clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\n\n\nfunction removeNode(node) {\n  if (node && node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n}\n/** Determines whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\n\n\nfunction getPreviewInsertionPoint(documentRef, shadowRoot) {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\n\n\nfunction getRootNode(viewRef, _document) {\n  var rootNodes = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n\n  var wrapper = _document.createElement('div');\n\n  rootNodes.forEach(function (node) {\n    return wrapper.appendChild(node);\n  });\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\n\n\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = \"\".concat(sourceRect.width, \"px\");\n  target.style.height = \"\".concat(sourceRect.height, \"px\");\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  var from = clamp$1(fromIndex, array.length - 1);\n  var to = clamp$1(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  var target = array[from];\n  var delta = to < from ? -1 : 1;\n\n  for (var i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  var from = clamp$1(currentIndex, currentArray.length - 1);\n  var to = clamp$1(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  var to = clamp$1(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\n\n\nfunction clamp$1(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\n\n\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\n\nvar SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\n\nvar DropListRef = /*#__PURE__*/function () {\n  function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    var _this11 = this;\n\n    _classCallCheck(this, DropListRef);\n\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = function () {\n      return true;\n    };\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = function () {\n      return true;\n    };\n    /** Emits right before dragging has started. */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new Subject();\n    /** Whether an item in the list is being dragged. */\n\n    this._isDragging = false;\n    /** Cache of the dimensions of all the items inside the container. */\n\n    this._itemPositions = [];\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occured and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n    /** Draggable items in the container. */\n\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n\n    this._siblings = [];\n    /** Direction in which the list is oriented. */\n\n    this._orientation = 'vertical';\n    /** Connected siblings that currently have a dragged item. */\n\n    this._activeSiblings = new Set();\n    /** Layout direction of the drop list. */\n\n    this._direction = 'ltr';\n    /** Subscription to the window being scrolled. */\n\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n\n    this._verticalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Horizontal direction in which the list is currently scrolling. */\n\n    this._horizontalScrollDirection = 0\n    /* NONE */\n    ;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n\n    this._startScrollInterval = function () {\n      _this11._stopScrolling();\n\n      interval(0, animationFrameScheduler).pipe(takeUntil(_this11._stopScrollTimers)).subscribe(function () {\n        var node = _this11._scrollNode;\n        var scrollStep = _this11.autoScrollStep;\n\n        if (_this11._verticalScrollDirection === 1\n        /* UP */\n        ) {\n            incrementVerticalScroll(node, -scrollStep);\n          } else if (_this11._verticalScrollDirection === 2\n        /* DOWN */\n        ) {\n            incrementVerticalScroll(node, scrollStep);\n          }\n\n        if (_this11._horizontalScrollDirection === 1\n        /* LEFT */\n        ) {\n            incrementHorizontalScroll(node, -scrollStep);\n          } else if (_this11._horizontalScrollDirection === 2\n        /* RIGHT */\n        ) {\n            incrementHorizontalScroll(node, scrollStep);\n          }\n      });\n    };\n\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n  }\n  /** Removes the drop list functionality from the DOM element. */\n\n\n  _createClass(DropListRef, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._stopScrolling();\n\n      this._stopScrollTimers.complete();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this.beforeStarted.complete();\n      this.entered.complete();\n      this.exited.complete();\n      this.dropped.complete();\n      this.sorted.complete();\n\n      this._activeSiblings.clear();\n\n      this._scrollNode = null;\n\n      this._parentPositions.clear();\n\n      this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._isDragging;\n    }\n    /** Starts dragging an item. */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._draggingStarted();\n\n      this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter(item, pointerX, pointerY, index) {\n      this._draggingStarted(); // If sorting is disabled, we want the item to return to its starting\n      // position if the user is returning it to its initial container.\n\n\n      var newIndex;\n\n      if (index == null) {\n        newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n        if (newIndex === -1) {\n          // We use the coordinates of where the item entered the drop\n          // zone to figure out at which index it should be inserted.\n          newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n      } else {\n        newIndex = index;\n      }\n\n      var activeDraggables = this._activeDraggables;\n      var currentIndex = activeDraggables.indexOf(item);\n      var placeholder = item.getPlaceholderElement();\n      var newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,\n      // it means that we're trying to restore the item to its initial position. In this\n      // case we should use the next item from the list as the reference.\n\n      if (newPositionReference === item) {\n        newPositionReference = activeDraggables[newIndex + 1];\n      } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n      // into another container and back again), we have to ensure that it isn't duplicated.\n\n\n      if (currentIndex > -1) {\n        activeDraggables.splice(currentIndex, 1);\n      } // Don't use items that are being dragged as a reference, because\n      // their element has been moved down to the bottom of the body.\n\n\n      if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n        var element = newPositionReference.getRootElement();\n        element.parentElement.insertBefore(placeholder, element);\n        activeDraggables.splice(newIndex, 0, item);\n      } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n        var reference = activeDraggables[0].getRootElement();\n        reference.parentNode.insertBefore(placeholder, reference);\n        activeDraggables.unshift(item);\n      } else {\n        coerceElement(this.element).appendChild(placeholder);\n        activeDraggables.push(item);\n      } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n      placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,\n      // but we need to refresh them since the amount of items has changed and also parent rects.\n\n      this._cacheItemPositions();\n\n      this._cacheParentPositions(); // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n\n\n      this._notifyReceivingSiblings();\n\n      this.entered.next({\n        item: item,\n        container: this,\n        currentIndex: this.getItemIndex(item)\n      });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit(item) {\n      this._reset();\n\n      this.exited.next({\n        item: item,\n        container: this\n      });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n\n  }, {\n    key: \"drop\",\n    value: function drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance) {\n      this._reset();\n\n      this.dropped.next({\n        item: item,\n        currentIndex: currentIndex,\n        previousIndex: previousIndex,\n        container: this,\n        previousContainer: previousContainer,\n        isPointerOverContainer: isPointerOverContainer,\n        distance: distance\n      });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n\n  }, {\n    key: \"withItems\",\n    value: function withItems(items) {\n      var _this12 = this;\n\n      var previousItems = this._draggables;\n      this._draggables = items;\n      items.forEach(function (item) {\n        return item._withDropContainer(_this12);\n      });\n\n      if (this.isDragging()) {\n        var draggedItems = previousItems.filter(function (item) {\n          return item.isDragging();\n        }); // If all of the items being dragged were removed\n        // from the list, abort the current drag sequence.\n\n        if (draggedItems.every(function (item) {\n          return items.indexOf(item) === -1;\n        })) {\n          this._reset();\n        } else {\n          this._cacheItems();\n        }\n      }\n\n      return this;\n    }\n    /** Sets the layout direction of the drop list. */\n\n  }, {\n    key: \"withDirection\",\n    value: function withDirection(direction) {\n      this._direction = direction;\n      return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n\n  }, {\n    key: \"connectedTo\",\n    value: function connectedTo(_connectedTo) {\n      this._siblings = _connectedTo.slice();\n      return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n\n  }, {\n    key: \"withOrientation\",\n    value: function withOrientation(orientation) {\n      this._orientation = orientation;\n      return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n\n  }, {\n    key: \"withScrollableParents\",\n    value: function withScrollableParents(elements) {\n      var element = coerceElement(this.element); // We always allow the current element to be scrollable\n      // so we need to ensure that it's in the array.\n\n      this._scrollableElements = elements.indexOf(element) === -1 ? [element].concat(_toConsumableArray(elements)) : elements.slice();\n      return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n\n  }, {\n    key: \"getScrollableParents\",\n    value: function getScrollableParents() {\n      return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n\n  }, {\n    key: \"getItemIndex\",\n    value: function getItemIndex(item) {\n      if (!this._isDragging) {\n        return this._draggables.indexOf(item);\n      } // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n      // The rest of the logic still stands no matter what orientation we're in, however\n      // we need to invert the array when determining the index.\n\n\n      var items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n      return findIndex(items, function (currentItem) {\n        return currentItem.drag === item;\n      });\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n\n  }, {\n    key: \"isReceiving\",\n    value: function isReceiving() {\n      return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n\n  }, {\n    key: \"_sortItem\",\n    value: function _sortItem(item, pointerX, pointerY, pointerDelta) {\n      // Don't sort the item if sorting is disabled or it's out of range.\n      if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        return;\n      }\n\n      var siblings = this._itemPositions;\n\n      var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n      if (newIndex === -1 && siblings.length > 0) {\n        return;\n      }\n\n      var isHorizontal = this._orientation === 'horizontal';\n      var currentIndex = findIndex(siblings, function (currentItem) {\n        return currentItem.drag === item;\n      });\n      var siblingAtNewPosition = siblings[newIndex];\n      var currentPosition = siblings[currentIndex].clientRect;\n      var newPosition = siblingAtNewPosition.clientRect;\n      var delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.\n\n      var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n\n      var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n      // We use this to check whether an item has been moved as a result of the sorting.\n\n\n      var oldOrder = siblings.slice(); // Shuffle the array in place.\n\n      moveItemInArray(siblings, currentIndex, newIndex);\n      this.sorted.next({\n        previousIndex: currentIndex,\n        currentIndex: newIndex,\n        container: this,\n        item: item\n      });\n      siblings.forEach(function (sibling, index) {\n        // Don't do anything if the position hasn't changed.\n        if (oldOrder[index] === sibling) {\n          return;\n        }\n\n        var isDraggedItem = sibling.drag === item;\n        var offset = isDraggedItem ? itemOffset : siblingOffset;\n        var elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n        sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n        // client rects to reflect their new position, as well as swap their positions in the cache.\n        // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n        // elements may be mid-animation which will give us a wrong result.\n\n        if (isHorizontal) {\n          // Round the transforms since some browsers will\n          // blur the elements, for sub-pixel transforms.\n          elementToOffset.style.transform = \"translate3d(\".concat(Math.round(sibling.offset), \"px, 0, 0)\");\n          adjustClientRect(sibling.clientRect, 0, offset);\n        } else {\n          elementToOffset.style.transform = \"translate3d(0, \".concat(Math.round(sibling.offset), \"px, 0)\");\n          adjustClientRect(sibling.clientRect, offset, 0);\n        }\n      }); // Note that it's important that we do this after the client rects have been adjusted.\n\n      this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n      this._previousSwap.drag = siblingAtNewPosition.drag;\n      this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n\n  }, {\n    key: \"_startScrollingIfNecessary\",\n    value: function _startScrollingIfNecessary(pointerX, pointerY) {\n      var _this13 = this;\n\n      if (this.autoScrollDisabled) {\n        return;\n      }\n\n      var scrollNode;\n      var verticalScrollDirection = 0\n      /* NONE */\n      ;\n      var horizontalScrollDirection = 0\n      /* NONE */\n      ; // Check whether we should start scrolling any of the parent containers.\n\n      this._parentPositions.positions.forEach(function (position, element) {\n        // We have special handling for the `document` below. Also this would be\n        // nicer with a  for...of loop, but it requires changing a compiler flag.\n        if (element === _this13._document || !position.clientRect || scrollNode) {\n          return;\n        }\n\n        if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n          var _getElementScrollDire = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n\n          var _getElementScrollDire2 = _slicedToArray(_getElementScrollDire, 2);\n\n          verticalScrollDirection = _getElementScrollDire2[0];\n          horizontalScrollDirection = _getElementScrollDire2[1];\n\n          if (verticalScrollDirection || horizontalScrollDirection) {\n            scrollNode = element;\n          }\n        }\n      }); // Otherwise check if we can start scrolling the viewport.\n\n\n      if (!verticalScrollDirection && !horizontalScrollDirection) {\n        var _this$_viewportRuler$ = this._viewportRuler.getViewportSize(),\n            width = _this$_viewportRuler$.width,\n            height = _this$_viewportRuler$.height;\n\n        var clientRect = {\n          width: width,\n          height: height,\n          top: 0,\n          right: width,\n          bottom: height,\n          left: 0\n        };\n        verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n        horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n        scrollNode = window;\n      }\n\n      if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n        this._verticalScrollDirection = verticalScrollDirection;\n        this._horizontalScrollDirection = horizontalScrollDirection;\n        this._scrollNode = scrollNode;\n\n        if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n          this._ngZone.runOutsideAngular(this._startScrollInterval);\n        } else {\n          this._stopScrolling();\n        }\n      }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n\n  }, {\n    key: \"_stopScrolling\",\n    value: function _stopScrolling() {\n      this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n\n  }, {\n    key: \"_draggingStarted\",\n    value: function _draggingStarted() {\n      var styles = coerceElement(this.element).style;\n      this.beforeStarted.next();\n      this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n      // scrolling. The browser seems to round the value based on the snapping points which means\n      // that we can't increment/decrement the scroll position.\n\n      this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n      styles.scrollSnapType = styles.msScrollSnapType = 'none';\n\n      this._cacheItems();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n\n  }, {\n    key: \"_cacheParentPositions\",\n    value: function _cacheParentPositions() {\n      var element = coerceElement(this.element);\n\n      this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`\n      // so we can take advantage of the cached `ClientRect`.\n\n\n      this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n\n  }, {\n    key: \"_cacheItemPositions\",\n    value: function _cacheItemPositions() {\n      var isHorizontal = this._orientation === 'horizontal';\n      this._itemPositions = this._activeDraggables.map(function (drag) {\n        var elementToMeasure = drag.getVisibleElement();\n        return {\n          drag: drag,\n          offset: 0,\n          clientRect: getMutableClientRect(elementToMeasure)\n        };\n      }).sort(function (a, b) {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n      });\n    }\n    /** Resets the container to its initial state. */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var _this14 = this;\n\n      this._isDragging = false;\n      var styles = coerceElement(this.element).style;\n      styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap; // TODO(crisbeto): may have to wait for the animations to finish.\n\n      this._activeDraggables.forEach(function (item) {\n        var rootElement = item.getRootElement();\n\n        if (rootElement) {\n          rootElement.style.transform = '';\n        }\n      });\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._stopReceiving(_this14);\n      });\n\n      this._activeDraggables = [];\n      this._itemPositions = [];\n      this._previousSwap.drag = null;\n      this._previousSwap.delta = 0;\n      this._previousSwap.overlaps = false;\n\n      this._stopScrolling();\n\n      this._viewportScrollSubscription.unsubscribe();\n\n      this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n\n  }, {\n    key: \"_getSiblingOffsetPx\",\n    value: function _getSiblingOffsetPx(currentIndex, siblings, delta) {\n      var isHorizontal = this._orientation === 'horizontal';\n      var currentPosition = siblings[currentIndex].clientRect;\n      var immediateSibling = siblings[currentIndex + delta * -1];\n      var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n      if (immediateSibling) {\n        var start = isHorizontal ? 'left' : 'top';\n        var end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n        // after it in the direction in which the user is dragging, or vice versa. We add it to the\n        // offset in order to push the element to where it will be when it's inline and is influenced\n        // by the `margin` of its siblings.\n\n        if (delta === -1) {\n          siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n        } else {\n          siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n        }\n      }\n\n      return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n\n  }, {\n    key: \"_getItemOffsetPx\",\n    value: function _getItemOffsetPx(currentPosition, newPosition, delta) {\n      var isHorizontal = this._orientation === 'horizontal';\n      var itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n      if (delta === -1) {\n        itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n      }\n\n      return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n\n  }, {\n    key: \"_shouldEnterAsFirstChild\",\n    value: function _shouldEnterAsFirstChild(pointerX, pointerY) {\n      if (!this._activeDraggables.length) {\n        return false;\n      }\n\n      var itemPositions = this._itemPositions;\n      var isHorizontal = this._orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n      // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n\n      var reversed = itemPositions[0].drag !== this._activeDraggables[0];\n\n      if (reversed) {\n        var lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n        return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n      } else {\n        var firstItemRect = itemPositions[0].clientRect;\n        return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n      }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n\n  }, {\n    key: \"_getItemIndexFromPointerPosition\",\n    value: function _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n      var _this15 = this;\n\n      var isHorizontal = this._orientation === 'horizontal';\n      var index = findIndex(this._itemPositions, function (_ref4, _, array) {\n        var drag = _ref4.drag,\n            clientRect = _ref4.clientRect;\n\n        if (drag === item) {\n          // If there's only one item left in the container, it must be\n          // the dragged item itself so we use it as a reference.\n          return array.length < 2;\n        }\n\n        if (delta) {\n          var direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left\n          // the item after we made the swap, and they didn't change the direction in which they're\n          // dragging, we don't consider it a direction swap.\n\n          if (drag === _this15._previousSwap.drag && _this15._previousSwap.overlaps && direction === _this15._previousSwap.delta) {\n            return false;\n          }\n        }\n\n        return isHorizontal ? // Round these down since most browsers report client rects with\n        // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n        pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n      });\n      return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n\n  }, {\n    key: \"_cacheItems\",\n    value: function _cacheItems() {\n      this._activeDraggables = this._draggables.slice();\n\n      this._cacheItemPositions();\n\n      this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n\n  }, {\n    key: \"_isOverContainer\",\n    value: function _isOverContainer(x, y) {\n      return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n\n  }, {\n    key: \"_getSiblingContainerFromPosition\",\n    value: function _getSiblingContainerFromPosition(item, x, y) {\n      return this._siblings.find(function (sibling) {\n        return sibling._canReceive(item, x, y);\n      });\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n\n  }, {\n    key: \"_canReceive\",\n    value: function _canReceive(item, x, y) {\n      if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n        return false;\n      }\n\n      var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then\n      // the client rect is probably scrolled out of the view.\n\n\n      if (!elementFromPoint) {\n        return false;\n      }\n\n      var nativeElement = coerceElement(this.element); // The `ClientRect`, that we're using to find the container over which the user is\n      // hovering, doesn't give us any information on whether the element has been scrolled\n      // out of the view or whether it's overlapping with other containers. This means that\n      // we could end up transferring the item into a container that's invisible or is positioned\n      // below another one. We use the result from `elementFromPoint` to get the top-most element\n      // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n      return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n\n  }, {\n    key: \"_startReceiving\",\n    value: function _startReceiving(sibling, items) {\n      var _this16 = this;\n\n      var activeSiblings = this._activeSiblings;\n\n      if (!activeSiblings.has(sibling) && items.every(function (item) {\n        // Note that we have to add an exception to the `enterPredicate` for items that started off\n        // in this drop list. The drag ref has logic that allows an item to return to its initial\n        // container, if it has left the initial container and none of the connected containers\n        // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n        return _this16.enterPredicate(item, _this16) || _this16._draggables.indexOf(item) > -1;\n      })) {\n        activeSiblings.add(sibling);\n\n        this._cacheParentPositions();\n\n        this._listenToScrollEvents();\n      }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n\n  }, {\n    key: \"_stopReceiving\",\n    value: function _stopReceiving(sibling) {\n      this._activeSiblings.delete(sibling);\n\n      this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n\n  }, {\n    key: \"_listenToScrollEvents\",\n    value: function _listenToScrollEvents() {\n      var _this17 = this;\n\n      this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {\n        if (_this17.isDragging()) {\n          var scrollDifference = _this17._parentPositions.handleScroll(event);\n\n          if (scrollDifference) {\n            // Since we know the amount that the user has scrolled we can shift all of the\n            // client rectangles ourselves. This is cheaper than re-measuring everything and\n            // we can avoid inconsistent behavior where we might be measuring the element before\n            // its position has changed.\n            _this17._itemPositions.forEach(function (_ref5) {\n              var clientRect = _ref5.clientRect;\n              adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n            }); // We need two loops for this, because we want all of the cached\n            // positions to be up-to-date before we re-sort the item.\n\n\n            _this17._itemPositions.forEach(function (_ref6) {\n              var drag = _ref6.drag;\n\n              if (_this17._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n              }\n            });\n          }\n        } else if (_this17.isReceiving()) {\n          _this17._cacheParentPositions();\n        }\n      });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n\n  }, {\n    key: \"_getShadowRoot\",\n    value: function _getShadowRoot() {\n      if (!this._cachedShadowRoot) {\n        var shadowRoot = _getShadowRoot2(coerceElement(this.element));\n\n        this._cachedShadowRoot = shadowRoot || this._document;\n      }\n\n      return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n\n  }, {\n    key: \"_notifyReceivingSiblings\",\n    value: function _notifyReceivingSiblings() {\n      var _this18 = this;\n\n      var draggedItems = this._activeDraggables.filter(function (item) {\n        return item.isDragging();\n      });\n\n      this._siblings.forEach(function (sibling) {\n        return sibling._startReceiving(_this18, draggedItems);\n      });\n    }\n  }]);\n\n  return DropListRef;\n}();\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\n\n\nfunction findIndex(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementVerticalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollTop += amount;\n  }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\n\n\nfunction incrementHorizontalScroll(node, amount) {\n  if (node === window) {\n    node.scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    node.scrollLeft += amount;\n  }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  var top = clientRect.top,\n      bottom = clientRect.bottom,\n      height = clientRect.height;\n  var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1\n    /* UP */\n    ;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2\n    /* DOWN */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\n\n\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  var left = clientRect.left,\n      right = clientRect.right,\n      width = clientRect.width;\n  var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1\n    /* LEFT */\n    ;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2\n    /* RIGHT */\n    ;\n  }\n\n  return 0\n  /* NONE */\n  ;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  var verticalScrollDirection = 0\n  /* NONE */\n  ;\n  var horizontalScrollDirection = 0\n  /* NONE */\n  ; // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n\n  if (computedVertical) {\n    var scrollTop = element.scrollTop;\n\n    if (computedVertical === 1\n    /* UP */\n    ) {\n        if (scrollTop > 0) {\n          verticalScrollDirection = 1\n          /* UP */\n          ;\n        }\n      } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2\n      /* DOWN */\n      ;\n    }\n  }\n\n  if (computedHorizontal) {\n    var scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === 1\n    /* LEFT */\n    ) {\n        if (scrollLeft > 0) {\n          horizontalScrollDirection = 1\n          /* LEFT */\n          ;\n        }\n      } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2\n      /* RIGHT */\n      ;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event options that can be used to bind an active, capturing event. */\n\n\nvar activeCapturingEventOptions = /*@__PURE__*/normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\nvar DragDropRegistry = /*@__PURE__*/function () {\n  var DragDropRegistry = /*#__PURE__*/function () {\n    function DragDropRegistry(_ngZone, _document) {\n      var _this19 = this;\n\n      _classCallCheck(this, DragDropRegistry);\n\n      this._ngZone = _ngZone;\n      /** Registered drop container instances. */\n\n      this._dropInstances = new Set();\n      /** Registered drag item instances. */\n\n      this._dragInstances = new Set();\n      /** Drag item instances that are currently being dragged. */\n\n      this._activeDragInstances = [];\n      /** Keeps track of the event listeners that we've bound to the `document`. */\n\n      this._globalListeners = new Map();\n      /**\n       * Predicate function to check if an item is being dragged.  Moved out into a property,\n       * because it'll be called a lot and we don't want to create a new function every time.\n       */\n\n      this._draggingPredicate = function (item) {\n        return item.isDragging();\n      };\n      /**\n       * Emits the `touchmove` or `mousemove` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n\n      this.pointerMove = new Subject();\n      /**\n       * Emits the `touchend` or `mouseup` events that are dispatched\n       * while the user is dragging a drag item instance.\n       */\n\n      this.pointerUp = new Subject();\n      /** Emits when the viewport has been scrolled while the user is dragging an item. */\n\n      this.scroll = new Subject();\n      /**\n       * Event listener that will prevent the default browser action while the user is dragging.\n       * @param event Event whose default action should be prevented.\n       */\n\n      this._preventDefaultWhileDragging = function (event) {\n        if (_this19._activeDragInstances.length > 0) {\n          event.preventDefault();\n        }\n      };\n      /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n\n\n      this._persistentTouchmoveListener = function (event) {\n        if (_this19._activeDragInstances.length > 0) {\n          // Note that we only want to prevent the default action after dragging has actually started.\n          // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n          // but it could be pushed back if the user has set up a drag delay or threshold.\n          if (_this19._activeDragInstances.some(_this19._draggingPredicate)) {\n            event.preventDefault();\n          }\n\n          _this19.pointerMove.next(event);\n        }\n      };\n\n      this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n\n\n    _createClass(DragDropRegistry, [{\n      key: \"registerDropContainer\",\n      value: function registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n          this._dropInstances.add(drop);\n        }\n      }\n      /** Adds a drag item instance to the registry. */\n\n    }, {\n      key: \"registerDragItem\",\n      value: function registerDragItem(drag) {\n        var _this20 = this;\n\n        this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n        if (this._dragInstances.size === 1) {\n          this._ngZone.runOutsideAngular(function () {\n            // The event handler has to be explicitly active,\n            // because newer browsers make it passive by default.\n            _this20._document.addEventListener('touchmove', _this20._persistentTouchmoveListener, activeCapturingEventOptions);\n          });\n        }\n      }\n      /** Removes a drop container from the registry. */\n\n    }, {\n      key: \"removeDropContainer\",\n      value: function removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n      }\n      /** Removes a drag item instance from the registry. */\n\n    }, {\n      key: \"removeDragItem\",\n      value: function removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n\n        this.stopDragging(drag);\n\n        if (this._dragInstances.size === 0) {\n          this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n      }\n      /**\n       * Starts the dragging sequence for a drag instance.\n       * @param drag Drag instance which is being dragged.\n       * @param event Event that initiated the dragging.\n       */\n\n    }, {\n      key: \"startDragging\",\n      value: function startDragging(drag, event) {\n        var _this21 = this;\n\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n          return;\n        }\n\n        this._activeDragInstances.push(drag);\n\n        if (this._activeDragInstances.length === 1) {\n          var _isTouchEvent = event.type.startsWith('touch'); // We explicitly bind __active__ listeners here, because newer browsers will default to\n          // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n          // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n\n          this._globalListeners.set(_isTouchEvent ? 'touchend' : 'mouseup', {\n            handler: function handler(e) {\n              return _this21.pointerUp.next(e);\n            },\n            options: true\n          }).set('scroll', {\n            handler: function handler(e) {\n              return _this21.scroll.next(e);\n            },\n            // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n            // the document. See https://github.com/angular/components/issues/17144.\n            options: true\n          }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n          // on Safari so we need to prevent the selection event as well. Alternatively this can\n          // be done by setting `user-select: none` on the `body`, however it has causes a style\n          // recalculation which can be expensive on pages with a lot of elements.\n          .set('selectstart', {\n            handler: this._preventDefaultWhileDragging,\n            options: activeCapturingEventOptions\n          }); // We don't have to bind a move event for touch drag sequences, because\n          // we already have a persistent global one bound from `registerDragItem`.\n\n\n          if (!_isTouchEvent) {\n            this._globalListeners.set('mousemove', {\n              handler: function handler(e) {\n                return _this21.pointerMove.next(e);\n              },\n              options: activeCapturingEventOptions\n            });\n          }\n\n          this._ngZone.runOutsideAngular(function () {\n            _this21._globalListeners.forEach(function (config, name) {\n              _this21._document.addEventListener(name, config.handler, config.options);\n            });\n          });\n        }\n      }\n      /** Stops dragging a drag item instance. */\n\n    }, {\n      key: \"stopDragging\",\n      value: function stopDragging(drag) {\n        var index = this._activeDragInstances.indexOf(drag);\n\n        if (index > -1) {\n          this._activeDragInstances.splice(index, 1);\n\n          if (this._activeDragInstances.length === 0) {\n            this._clearGlobalListeners();\n          }\n        }\n      }\n      /** Gets whether a drag item instance is currently being dragged. */\n\n    }, {\n      key: \"isDragging\",\n      value: function isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _this22 = this;\n\n        this._dragInstances.forEach(function (instance) {\n          return _this22.removeDragItem(instance);\n        });\n\n        this._dropInstances.forEach(function (instance) {\n          return _this22.removeDropContainer(instance);\n        });\n\n        this._clearGlobalListeners();\n\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n      }\n      /** Clears out the global event listeners from the `document`. */\n\n    }, {\n      key: \"_clearGlobalListeners\",\n      value: function _clearGlobalListeners() {\n        var _this23 = this;\n\n        this._globalListeners.forEach(function (config, name) {\n          _this23._document.removeEventListener(name, config.handler, config.options);\n        });\n\n        this._globalListeners.clear();\n      }\n    }]);\n\n    return DragDropRegistry;\n  }();\n\n  DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n    return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  DragDropRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function DragDropRegistry_Factory() {\n      return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n    },\n    token: DragDropRegistry,\n    providedIn: \"root\"\n  });\n  return DragDropRegistry;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default configuration to be used when creating a `DragRef`. */\n\n\nvar DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\nvar DragDrop = /*@__PURE__*/function () {\n  var DragDrop = /*#__PURE__*/function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n      _classCallCheck(this, DragDrop);\n\n      this._document = _document;\n      this._ngZone = _ngZone;\n      this._viewportRuler = _viewportRuler;\n      this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n\n\n    _createClass(DragDrop, [{\n      key: \"createDrag\",\n      value: function createDrag(element) {\n        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n      }\n      /**\n       * Turns an element into a drop list.\n       * @param element Element to which to attach the drop list functionality.\n       */\n\n    }, {\n      key: \"createDropList\",\n      value: function createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n      }\n    }]);\n\n    return DragDrop;\n  }();\n\n  DragDrop.ɵfac = function DragDrop_Factory(t) {\n    return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry));\n  };\n\n  DragDrop.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function DragDrop_Factory() {\n      return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry));\n    },\n    token: DragDrop,\n    providedIn: \"root\"\n  });\n  return DragDrop;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\n\n\nvar CDK_DRAG_PARENT = /*@__PURE__*/new InjectionToken('CDK_DRAG_PARENT');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar CDK_DROP_LIST_GROUP = /*@__PURE__*/new InjectionToken('CdkDropListGroup');\n\nvar CdkDropListGroup = /*@__PURE__*/function () {\n  var CdkDropListGroup = /*#__PURE__*/function () {\n    function CdkDropListGroup() {\n      _classCallCheck(this, CdkDropListGroup);\n\n      /** Drop lists registered inside the group. */\n      this._items = new Set();\n      this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n\n\n    _createClass(CdkDropListGroup, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._items.clear();\n      }\n    }]);\n\n    return CdkDropListGroup;\n  }();\n\n  CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n    return new (t || CdkDropListGroup)();\n  };\n\n  CdkDropListGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropListGroup,\n    selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n    inputs: {\n      disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n    },\n    exportAs: [\"cdkDropListGroup\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DROP_LIST_GROUP,\n      useExisting: CdkDropListGroup\n    }])]\n  });\n  return CdkDropListGroup;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\n\n\nvar CDK_DRAG_CONFIG = /*@__PURE__*/new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\n\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(\"\".concat(name, \" must be attached to an element node. \") + \"Currently attached to \\\"\".concat(node.nodeName, \"\\\".\"));\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique ids for drop zones. */\n\n\nvar _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar CDK_DROP_LIST = /*@__PURE__*/new InjectionToken('CdkDropList');\nvar ɵ0 = undefined;\n\nvar CdkDropList = /*@__PURE__*/function () {\n  var CdkDropList = /*#__PURE__*/function () {\n    function CdkDropList(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n      var _this24 = this;\n\n      _classCallCheck(this, CdkDropList);\n\n      this.element = element;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._scrollDispatcher = _scrollDispatcher;\n      this._dir = _dir;\n      this._group = _group;\n      /** Emits when the list has been destroyed. */\n\n      this._destroyed = new Subject();\n      /**\n       * Other draggable containers that this container is connected to and into which the\n       * container's items can be transferred. Can either be references to other drop containers,\n       * or their unique IDs.\n       */\n\n      this.connectedTo = [];\n      /**\n       * Unique ID for the drop zone. Can be used as a reference\n       * in the `connectedTo` of another `CdkDropList`.\n       */\n\n      this.id = \"cdk-drop-list-\".concat(_uniqueIdCounter++);\n      /**\n       * Function that is used to determine whether an item\n       * is allowed to be moved into a drop container.\n       */\n\n      this.enterPredicate = function () {\n        return true;\n      };\n      /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n      this.sortPredicate = function () {\n        return true;\n      };\n      /** Emits when the user drops an item inside the container. */\n\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits when the user has moved a new drag item into this container.\n       */\n\n      this.entered = new EventEmitter();\n      /**\n       * Emits when the user removes an item from the container\n       * by dragging it into another container.\n       */\n\n      this.exited = new EventEmitter();\n      /** Emits as the user is swapping items while actively dragging. */\n\n      this.sorted = new EventEmitter();\n      /**\n       * Keeps track of the items that are registered with this container. Historically we used to\n       * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n       * well which means that we can't handle cases like dragging the headers of a `mat-table`\n       * correctly. What we do instead is to have the items register themselves with the container\n       * and then we sort them based on their position in the DOM.\n       */\n\n      this._unsortedItems = new Set();\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDropList');\n      }\n\n      this._dropListRef = dragDrop.createDropList(element);\n      this._dropListRef.data = this;\n\n      if (config) {\n        this._assignDefaults(config);\n      }\n\n      this._dropListRef.enterPredicate = function (drag, drop) {\n        return _this24.enterPredicate(drag.data, drop.data);\n      };\n\n      this._dropListRef.sortPredicate = function (index, drag, drop) {\n        return _this24.sortPredicate(index, drag.data, drop.data);\n      };\n\n      this._setupInputSyncSubscription(this._dropListRef);\n\n      this._handleEvents(this._dropListRef);\n\n      CdkDropList._dropLists.push(this);\n\n      if (_group) {\n        _group._items.add(this);\n      }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n\n    _createClass(CdkDropList, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || !!this._group && this._group.disabled;\n      },\n      set: function set(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n      }\n      /** Registers an items with the drop list. */\n\n    }, {\n      key: \"addItem\",\n      value: function addItem(item) {\n        this._unsortedItems.add(item);\n\n        if (this._dropListRef.isDragging()) {\n          this._syncItemsWithRef();\n        }\n      }\n      /** Removes an item from the drop list. */\n\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(item) {\n        this._unsortedItems.delete(item);\n\n        if (this._dropListRef.isDragging()) {\n          this._syncItemsWithRef();\n        }\n      }\n      /** Gets the registered items in the list, sorted by their position in the DOM. */\n\n    }, {\n      key: \"getSortedItems\",\n      value: function getSortedItems() {\n        return Array.from(this._unsortedItems).sort(function (a, b) {\n          var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n          // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n          // tslint:disable-next-line:no-bitwise\n\n\n          return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var index = CdkDropList._dropLists.indexOf(this);\n\n        if (index > -1) {\n          CdkDropList._dropLists.splice(index, 1);\n        }\n\n        if (this._group) {\n          this._group._items.delete(this);\n        }\n\n        this._unsortedItems.clear();\n\n        this._dropListRef.dispose();\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n      }\n      /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n\n    }, {\n      key: \"_setupInputSyncSubscription\",\n      value: function _setupInputSyncSubscription(ref) {\n        var _this25 = this;\n\n        if (this._dir) {\n          this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(function (value) {\n            return ref.withDirection(value);\n          });\n        }\n\n        ref.beforeStarted.subscribe(function () {\n          var siblings = coerceArray(_this25.connectedTo).map(function (drop) {\n            if (typeof drop === 'string') {\n              var correspondingDropList = CdkDropList._dropLists.find(function (list) {\n                return list.id === drop;\n              });\n\n              if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                console.warn(\"CdkDropList could not find connected drop list with id \\\"\".concat(drop, \"\\\"\"));\n              }\n\n              return correspondingDropList;\n            }\n\n            return drop;\n          });\n\n          if (_this25._group) {\n            _this25._group._items.forEach(function (drop) {\n              if (siblings.indexOf(drop) === -1) {\n                siblings.push(drop);\n              }\n            });\n          } // Note that we resolve the scrollable parents here so that we delay the resolution\n          // as long as possible, ensuring that the element is in its final place in the DOM.\n\n\n          if (!_this25._scrollableParentsResolved) {\n            var scrollableParents = _this25._scrollDispatcher.getAncestorScrollContainers(_this25.element).map(function (scrollable) {\n              return scrollable.getElementRef().nativeElement;\n            });\n\n            _this25._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents\n            // shouldn't be able to change without the drop list being destroyed.\n\n\n            _this25._scrollableParentsResolved = true;\n          }\n\n          ref.disabled = _this25.disabled;\n          ref.lockAxis = _this25.lockAxis;\n          ref.sortingDisabled = coerceBooleanProperty(_this25.sortingDisabled);\n          ref.autoScrollDisabled = coerceBooleanProperty(_this25.autoScrollDisabled);\n          ref.autoScrollStep = coerceNumberProperty(_this25.autoScrollStep, 2);\n          ref.connectedTo(siblings.filter(function (drop) {\n            return drop && drop !== _this25;\n          }).map(function (list) {\n            return list._dropListRef;\n          })).withOrientation(_this25.orientation);\n        });\n      }\n      /** Handles events from the underlying DropListRef. */\n\n    }, {\n      key: \"_handleEvents\",\n      value: function _handleEvents(ref) {\n        var _this26 = this;\n\n        ref.beforeStarted.subscribe(function () {\n          _this26._syncItemsWithRef();\n\n          _this26._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n          _this26.entered.emit({\n            container: _this26,\n            item: event.item.data,\n            currentIndex: event.currentIndex\n          });\n        });\n        ref.exited.subscribe(function (event) {\n          _this26.exited.emit({\n            container: _this26,\n            item: event.item.data\n          });\n\n          _this26._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(function (event) {\n          _this26.sorted.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            container: _this26,\n            item: event.item.data\n          });\n        });\n        ref.dropped.subscribe(function (event) {\n          _this26.dropped.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            previousContainer: event.previousContainer.data,\n            container: event.container.data,\n            item: event.item.data,\n            isPointerOverContainer: event.isPointerOverContainer,\n            distance: event.distance\n          }); // Mark for check since all of these events run outside of change\n          // detection and we're not guaranteed for something else to have triggered it.\n\n\n          _this26._changeDetectorRef.markForCheck();\n        });\n      }\n      /** Assigns the default input values based on a provided config object. */\n\n    }, {\n      key: \"_assignDefaults\",\n      value: function _assignDefaults(config) {\n        var lockAxis = config.lockAxis,\n            draggingDisabled = config.draggingDisabled,\n            sortingDisabled = config.sortingDisabled,\n            listAutoScrollDisabled = config.listAutoScrollDisabled,\n            listOrientation = config.listOrientation;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n\n        if (lockAxis) {\n          this.lockAxis = lockAxis;\n        }\n      }\n      /** Syncs up the registered drag items with underlying drop list ref. */\n\n    }, {\n      key: \"_syncItemsWithRef\",\n      value: function _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(function (item) {\n          return item._dragRef;\n        }));\n      }\n    }]);\n\n    return CdkDropList;\n  }();\n\n  CdkDropList.ɵfac = function CdkDropList_Factory(t) {\n    return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n  };\n\n  CdkDropList.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDropList,\n    selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n    hostAttrs: [1, \"cdk-drop-list\"],\n    hostVars: 7,\n    hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n      }\n    },\n    inputs: {\n      connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n      id: \"id\",\n      enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n      sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n      disabled: [\"cdkDropListDisabled\", \"disabled\"],\n      sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n      autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n      orientation: [\"cdkDropListOrientation\", \"orientation\"],\n      lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n      data: [\"cdkDropListData\", \"data\"],\n      autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n    },\n    outputs: {\n      dropped: \"cdkDropListDropped\",\n      entered: \"cdkDropListEntered\",\n      exited: \"cdkDropListExited\",\n      sorted: \"cdkDropListSorted\"\n    },\n    exportAs: [\"cdkDropList\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n    {\n      provide: CDK_DROP_LIST_GROUP,\n      useValue: ɵ0\n    }, {\n      provide: CDK_DROP_LIST,\n      useExisting: CdkDropList\n    }])]\n  });\n  /** Keeps track of the drop lists that are currently on the page. */\n\n  CdkDropList._dropLists = [];\n  return CdkDropList;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_HANDLE = /*@__PURE__*/new InjectionToken('CdkDragHandle');\n\nvar CdkDragHandle = /*@__PURE__*/function () {\n  var CdkDragHandle = /*#__PURE__*/function () {\n    function CdkDragHandle(element, parentDrag) {\n      _classCallCheck(this, CdkDragHandle);\n\n      this.element = element;\n      /** Emits when the state of the handle has changed. */\n\n      this._stateChanges = new Subject();\n      this._disabled = false;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        assertElementNode(element.nativeElement, 'cdkDragHandle');\n      }\n\n      this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n\n\n    _createClass(CdkDragHandle, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n\n        this._stateChanges.next(this);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._stateChanges.complete();\n      }\n    }]);\n\n    return CdkDragHandle;\n  }();\n\n  CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n    return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDragHandle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragHandle,\n    selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n    hostAttrs: [1, \"cdk-drag-handle\"],\n    inputs: {\n      disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_HANDLE,\n      useExisting: CdkDragHandle\n    }])]\n  });\n  return CdkDragHandle;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_PLACEHOLDER = /*@__PURE__*/new InjectionToken('CdkDragPlaceholder');\n\nvar CdkDragPlaceholder = /*@__PURE__*/function () {\n  var CdkDragPlaceholder = function CdkDragPlaceholder(templateRef) {\n    _classCallCheck(this, CdkDragPlaceholder);\n\n    this.templateRef = templateRef;\n  };\n\n  CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n    return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPlaceholder.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPlaceholder,\n    selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n    inputs: {\n      data: \"data\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PLACEHOLDER,\n      useExisting: CdkDragPlaceholder\n    }])]\n  });\n  return CdkDragPlaceholder;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar CDK_DRAG_PREVIEW = /*@__PURE__*/new InjectionToken('CdkDragPreview');\n\nvar CdkDragPreview = /*@__PURE__*/function () {\n  var CdkDragPreview = /*#__PURE__*/function () {\n    function CdkDragPreview(templateRef) {\n      _classCallCheck(this, CdkDragPreview);\n\n      this.templateRef = templateRef;\n      this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n\n\n    _createClass(CdkDragPreview, [{\n      key: \"matchSize\",\n      get: function get() {\n        return this._matchSize;\n      },\n      set: function set(value) {\n        this._matchSize = coerceBooleanProperty(value);\n      }\n    }]);\n\n    return CdkDragPreview;\n  }();\n\n  CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n    return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  CdkDragPreview.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDragPreview,\n    selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n    inputs: {\n      matchSize: \"matchSize\",\n      data: \"data\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PREVIEW,\n      useExisting: CdkDragPreview\n    }])]\n  });\n  return CdkDragPreview;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar DRAG_HOST_CLASS = 'cdk-drag';\n\nvar CdkDrag = /*@__PURE__*/function () {\n  var CdkDrag = /*#__PURE__*/function () {\n    function CdkDrag(\n    /** Element that the draggable is attached to. */\n    element,\n    /** Droppable container that the draggable is a part of. */\n    dropContainer,\n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n      var _this27 = this;\n\n      _classCallCheck(this, CdkDrag);\n\n      this.element = element;\n      this.dropContainer = dropContainer;\n      this._ngZone = _ngZone;\n      this._viewContainerRef = _viewContainerRef;\n      this._dir = _dir;\n      this._changeDetectorRef = _changeDetectorRef;\n      this._selfHandle = _selfHandle;\n      this._parentDrag = _parentDrag;\n      this._destroyed = new Subject();\n      /** Emits when the user starts dragging the item. */\n\n      this.started = new EventEmitter();\n      /** Emits when the user has released a drag item, before any animations have started. */\n\n      this.released = new EventEmitter();\n      /** Emits when the user stops dragging an item in the container. */\n\n      this.ended = new EventEmitter();\n      /** Emits when the user has moved the item into a new container. */\n\n      this.entered = new EventEmitter();\n      /** Emits when the user removes the item its container by dragging it into another container. */\n\n      this.exited = new EventEmitter();\n      /** Emits when the user drops the item inside a container. */\n\n      this.dropped = new EventEmitter();\n      /**\n       * Emits as the user is dragging the item. Use with caution,\n       * because this event will fire for every pixel that the user has dragged.\n       */\n\n      this.moved = new Observable(function (observer) {\n        var subscription = _this27._dragRef.moved.pipe(map(function (movedEvent) {\n          return {\n            source: _this27,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance\n          };\n        })).subscribe(observer);\n\n        return function () {\n          subscription.unsubscribe();\n        };\n      });\n      this._dragRef = dragDrop.createDrag(element, {\n        dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n        pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n        zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n      });\n      this._dragRef.data = this; // We have to keep track of the drag instances in order to be able to match an element to\n      // a drag instance. We can't go through the global registry of `DragRef`, because the root\n      // element could be different.\n\n      CdkDrag._dragInstances.push(this);\n\n      if (config) {\n        this._assignDefaults(config);\n      } // Note that usually the container is assigned when the drop list is picks up the item, but in\n      // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n      // where there are no items on the first change detection pass, but the items get picked up as\n      // soon as the user triggers another pass by dragging. This is a problem, because the item would\n      // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n      // is too late since the two modes save different kinds of information. We work around it by\n      // assigning the drop container both from here and the list.\n\n\n      if (dropContainer) {\n        this._dragRef._withDropContainer(dropContainer._dropListRef);\n\n        dropContainer.addItem(this);\n      }\n\n      this._syncInputs(this._dragRef);\n\n      this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n\n\n    _createClass(CdkDrag, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled || this.dropContainer && this.dropContainer.disabled;\n      },\n      set: function set(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n      }\n      /**\n       * Returns the element that is being used as a placeholder\n       * while the current element is being dragged.\n       */\n\n    }, {\n      key: \"getPlaceholderElement\",\n      value: function getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n      }\n      /** Returns the root draggable element. */\n\n    }, {\n      key: \"getRootElement\",\n      value: function getRootElement() {\n        return this._dragRef.getRootElement();\n      }\n      /** Resets a standalone drag item to its initial position. */\n\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this._dragRef.reset();\n      }\n      /**\n       * Gets the pixel coordinates of the draggable outside of a drop container.\n       */\n\n    }, {\n      key: \"getFreeDragPosition\",\n      value: function getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this28 = this;\n\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          _this28._updateRootElement(); // Listen for any newly-added handles.\n\n\n          _this28._handles.changes.pipe(startWith(_this28._handles), // Sync the new handles with the DragRef.\n          tap(function (handles) {\n            var childHandleElements = handles.filter(function (handle) {\n              return handle._parentDrag === _this28;\n            }).map(function (handle) {\n              return handle.element;\n            }); // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n\n            if (_this28._selfHandle && _this28.rootElementSelector) {\n              childHandleElements.push(_this28.element);\n            }\n\n            _this28._dragRef.withHandles(childHandleElements);\n          }), // Listen if the state of any of the handles changes.\n          switchMap(function (handles) {\n            return merge.apply(void 0, _toConsumableArray(handles.map(function (item) {\n              return item._stateChanges.pipe(startWith(item));\n            })));\n          }), takeUntil(_this28._destroyed)).subscribe(function (handleInstance) {\n            // Enabled/disable the handle that changed in the DragRef.\n            var dragRef = _this28._dragRef;\n            var handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n          });\n\n          if (_this28.freeDragPosition) {\n            _this28._dragRef.setFreeDragPosition(_this28.freeDragPosition);\n          }\n        });\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var rootSelectorChange = changes['rootElementSelector'];\n        var positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n          this._updateRootElement();\n        } // Skip the first change since it's being handled in `ngAfterViewInit`.\n\n\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.dropContainer) {\n          this.dropContainer.removeItem(this);\n        }\n\n        var index = CdkDrag._dragInstances.indexOf(this);\n\n        if (index > -1) {\n          CdkDrag._dragInstances.splice(index, 1);\n        }\n\n        this._destroyed.next();\n\n        this._destroyed.complete();\n\n        this._dragRef.dispose();\n      }\n      /** Syncs the root element with the `DragRef`. */\n\n    }, {\n      key: \"_updateRootElement\",\n      value: function _updateRootElement() {\n        var element = this.element.nativeElement;\n        var rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          assertElementNode(rootElement, 'cdkDrag');\n        }\n\n        this._dragRef.withRootElement(rootElement || element);\n      }\n      /** Gets the boundary element, based on the `boundaryElement` value. */\n\n    }, {\n      key: \"_getBoundaryElement\",\n      value: function _getBoundaryElement() {\n        var boundary = this.boundaryElement;\n\n        if (!boundary) {\n          return null;\n        }\n\n        if (typeof boundary === 'string') {\n          return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n\n        var element = coerceElement(boundary);\n\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !element.contains(this.element.nativeElement)) {\n          throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n\n        return element;\n      }\n      /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n\n    }, {\n      key: \"_syncInputs\",\n      value: function _syncInputs(ref) {\n        var _this29 = this;\n\n        ref.beforeStarted.subscribe(function () {\n          if (!ref.isDragging()) {\n            var dir = _this29._dir;\n            var dragStartDelay = _this29.dragStartDelay;\n            var placeholder = _this29._placeholderTemplate ? {\n              template: _this29._placeholderTemplate.templateRef,\n              context: _this29._placeholderTemplate.data,\n              viewContainer: _this29._viewContainerRef\n            } : null;\n            var preview = _this29._previewTemplate ? {\n              template: _this29._previewTemplate.templateRef,\n              context: _this29._previewTemplate.data,\n              matchSize: _this29._previewTemplate.matchSize,\n              viewContainer: _this29._viewContainerRef\n            } : null;\n            ref.disabled = _this29.disabled;\n            ref.lockAxis = _this29.lockAxis;\n            ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n            ref.constrainPosition = _this29.constrainPosition;\n            ref.previewClass = _this29.previewClass;\n            ref.withBoundaryElement(_this29._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview);\n\n            if (dir) {\n              ref.withDirection(dir.value);\n            }\n          }\n        }); // This only needs to be resolved once.\n\n        ref.beforeStarted.pipe(take(1)).subscribe(function () {\n          var _a, _b; // If we managed to resolve a parent through DI, use it.\n\n\n          if (_this29._parentDrag) {\n            ref.withParent(_this29._parentDrag._dragRef);\n            return;\n          } // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n          // the item was projected into another item by something like `ngTemplateOutlet`.\n\n\n          var parent = _this29.element.nativeElement.parentElement;\n\n          while (parent) {\n            // `classList` needs to be null checked, because IE doesn't have it on some elements.\n            if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n              ref.withParent(((_b = CdkDrag._dragInstances.find(function (drag) {\n                return drag.element.nativeElement === parent;\n              })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n              break;\n            }\n\n            parent = parent.parentElement;\n          }\n        });\n      }\n      /** Handles the events from the underlying `DragRef`. */\n\n    }, {\n      key: \"_handleEvents\",\n      value: function _handleEvents(ref) {\n        var _this30 = this;\n\n        ref.started.subscribe(function () {\n          _this30.started.emit({\n            source: _this30\n          }); // Since all of these events run outside of change detection,\n          // we need to ensure that everything is marked correctly.\n\n\n          _this30._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(function () {\n          _this30.released.emit({\n            source: _this30\n          });\n        });\n        ref.ended.subscribe(function (event) {\n          _this30.ended.emit({\n            source: _this30,\n            distance: event.distance\n          }); // Since all of these events run outside of change detection,\n          // we need to ensure that everything is marked correctly.\n\n\n          _this30._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n          _this30.entered.emit({\n            container: event.container.data,\n            item: _this30,\n            currentIndex: event.currentIndex\n          });\n        });\n        ref.exited.subscribe(function (event) {\n          _this30.exited.emit({\n            container: event.container.data,\n            item: _this30\n          });\n        });\n        ref.dropped.subscribe(function (event) {\n          _this30.dropped.emit({\n            previousIndex: event.previousIndex,\n            currentIndex: event.currentIndex,\n            previousContainer: event.previousContainer.data,\n            container: event.container.data,\n            isPointerOverContainer: event.isPointerOverContainer,\n            item: _this30,\n            distance: event.distance\n          });\n        });\n      }\n      /** Assigns the default input values based on a provided config object. */\n\n    }, {\n      key: \"_assignDefaults\",\n      value: function _assignDefaults(config) {\n        var lockAxis = config.lockAxis,\n            dragStartDelay = config.dragStartDelay,\n            constrainPosition = config.constrainPosition,\n            previewClass = config.previewClass,\n            boundaryElement = config.boundaryElement,\n            draggingDisabled = config.draggingDisabled,\n            rootElementSelector = config.rootElementSelector;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n\n        if (lockAxis) {\n          this.lockAxis = lockAxis;\n        }\n\n        if (constrainPosition) {\n          this.constrainPosition = constrainPosition;\n        }\n\n        if (previewClass) {\n          this.previewClass = previewClass;\n        }\n\n        if (boundaryElement) {\n          this.boundaryElement = boundaryElement;\n        }\n\n        if (rootElementSelector) {\n          this.rootElementSelector = rootElementSelector;\n        }\n      }\n    }]);\n\n    return CdkDrag;\n  }();\n\n  CdkDrag.ɵfac = function CdkDrag_Factory(t) {\n    return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n  };\n\n  CdkDrag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkDrag,\n    selectors: [[\"\", \"cdkDrag\", \"\"]],\n    contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 1);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n      }\n    },\n    hostAttrs: [1, \"cdk-drag\"],\n    hostVars: 4,\n    hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n      }\n    },\n    inputs: {\n      disabled: [\"cdkDragDisabled\", \"disabled\"],\n      dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n      lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n      constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n      previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n      boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n      rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n      data: [\"cdkDragData\", \"data\"],\n      freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"]\n    },\n    outputs: {\n      started: \"cdkDragStarted\",\n      released: \"cdkDragReleased\",\n      ended: \"cdkDragEnded\",\n      entered: \"cdkDragEntered\",\n      exited: \"cdkDragExited\",\n      dropped: \"cdkDragDropped\",\n      moved: \"cdkDragMoved\"\n    },\n    exportAs: [\"cdkDrag\"],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: CDK_DRAG_PARENT,\n      useExisting: CdkDrag\n    }]), ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  CdkDrag._dragInstances = [];\n  return CdkDrag;\n}();\n/** Gets the closest ancestor of an element that matches a selector. */\n\n\nfunction getClosestMatchingAncestor(element, selector) {\n  var currentElement = element.parentElement;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) : currentElement.msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n\nvar DragDropModule = /*@__PURE__*/function () {\n  var DragDropModule = function DragDropModule() {\n    _classCallCheck(this, DragDropModule);\n  };\n\n  DragDropModule.ɵfac = function DragDropModule_Factory(t) {\n    return new (t || DragDropModule)();\n  };\n\n  DragDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: DragDropModule\n  });\n  DragDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [DragDrop],\n    imports: [CdkScrollableModule]\n  });\n  return DragDropModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, {\n    declarations: function declarations() {\n      return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem }; //# sourceMappingURL=drag-drop.js.map","map":null,"metadata":{},"sourceType":"module"}