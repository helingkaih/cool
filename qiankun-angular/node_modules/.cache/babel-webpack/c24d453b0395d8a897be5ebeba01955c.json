{"ast":null,"code":"import _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Injectable, NgZone, Inject, EventEmitter, Directive, ElementRef, Renderer2, Input, Output, Component, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { Platform } from '@angular/cdk/platform';\nimport { isTouchEvent, ensureInBounds, InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"*\"];\n\nfunction NzResizeHandlesComponent_nz_resize_handle_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"nz-resize-handle\", 1);\n  }\n\n  if (rf & 2) {\n    var dir_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"nzDirection\", dir_r1);\n  }\n}\n\nfunction getEventWithPoint(event) {\n  return isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n}\n\nvar NzResizableService = /*@__PURE__*/function () {\n  var NzResizableService = /*#__PURE__*/function () {\n    function NzResizableService(ngZone, document) {\n      _classCallCheck(this, NzResizableService);\n\n      this.ngZone = ngZone;\n      this.listeners = new Map();\n      this.handleMouseDown$ = new Subject();\n      this.documentMouseUp$ = new Subject();\n      this.documentMouseMove$ = new Subject();\n      this.mouseEntered$ = new Subject();\n      this.document = document;\n    }\n\n    _createClass(NzResizableService, [{\n      key: \"startResizing\",\n      value: function startResizing(event) {\n        var _this = this;\n\n        var _isTouchEvent = isTouchEvent(event);\n\n        this.clearListeners();\n        var moveEvent = _isTouchEvent ? 'touchmove' : 'mousemove';\n        var upEvent = _isTouchEvent ? 'touchend' : 'mouseup';\n\n        var moveEventHandler = function moveEventHandler(e) {\n          _this.documentMouseMove$.next(e);\n        };\n\n        var upEventHandler = function upEventHandler(e) {\n          _this.documentMouseUp$.next(e);\n\n          _this.clearListeners();\n        };\n\n        this.listeners.set(moveEvent, moveEventHandler);\n        this.listeners.set(upEvent, upEventHandler);\n        this.ngZone.runOutsideAngular(function () {\n          _this.listeners.forEach(function (handler, name) {\n            _this.document.addEventListener(name, handler);\n          });\n        });\n      }\n    }, {\n      key: \"clearListeners\",\n      value: function clearListeners() {\n        var _this2 = this;\n\n        this.listeners.forEach(function (handler, name) {\n          _this2.document.removeEventListener(name, handler);\n        });\n        this.listeners.clear();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.handleMouseDown$.complete();\n        this.documentMouseUp$.complete();\n        this.documentMouseMove$.complete();\n        this.mouseEntered$.complete();\n        this.clearListeners();\n      }\n    }]);\n\n    return NzResizableService;\n  }();\n\n  NzResizableService.ɵfac = function NzResizableService_Factory(t) {\n    return new (t || NzResizableService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  NzResizableService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n    token: NzResizableService,\n    factory: NzResizableService.ɵfac\n  });\n  return NzResizableService;\n}();\n\nvar NzResizableDirective = /*@__PURE__*/function () {\n  var NzResizableDirective = /*#__PURE__*/function () {\n    function NzResizableDirective(elementRef, renderer, nzResizableService, platform, ngZone) {\n      var _this3 = this;\n\n      _classCallCheck(this, NzResizableDirective);\n\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.nzResizableService = nzResizableService;\n      this.platform = platform;\n      this.ngZone = ngZone;\n      this.nzBounds = 'parent';\n      this.nzMinHeight = 40;\n      this.nzMinWidth = 40;\n      this.nzGridColumnCount = -1;\n      this.nzMaxColumn = -1;\n      this.nzMinColumn = -1;\n      this.nzLockAspectRatio = false;\n      this.nzPreview = false;\n      this.nzDisabled = false;\n      this.nzResize = new EventEmitter();\n      this.nzResizeEnd = new EventEmitter();\n      this.nzResizeStart = new EventEmitter();\n      this.resizing = false;\n      this.currentHandleEvent = null;\n      this.ghostElement = null;\n      this.sizeCache = null;\n      this.destroy$ = new Subject(); // TODO: move to host after View Engine deprecation\n\n      this.elementRef.nativeElement.classList.add('nz-resizable');\n      this.nzResizableService.handleMouseDown$.pipe(takeUntil(this.destroy$)).subscribe(function (event) {\n        if (_this3.nzDisabled) {\n          return;\n        }\n\n        _this3.resizing = true;\n\n        _this3.nzResizableService.startResizing(event.mouseEvent);\n\n        _this3.currentHandleEvent = event;\n\n        _this3.setCursor();\n\n        _this3.nzResizeStart.emit({\n          mouseEvent: event.mouseEvent\n        });\n\n        _this3.elRect = _this3.el.getBoundingClientRect();\n      });\n      this.nzResizableService.documentMouseUp$.pipe(takeUntil(this.destroy$)).subscribe(function (event) {\n        if (_this3.resizing) {\n          _this3.resizing = false;\n\n          _this3.nzResizableService.documentMouseUp$.next();\n\n          _this3.endResize(event);\n        }\n      });\n      this.nzResizableService.documentMouseMove$.pipe(takeUntil(this.destroy$)).subscribe(function (event) {\n        if (_this3.resizing) {\n          _this3.resize(event);\n        }\n      });\n    }\n\n    _createClass(NzResizableDirective, [{\n      key: \"onMouseenter\",\n      value: function onMouseenter() {\n        this.nzResizableService.mouseEntered$.next(true);\n      }\n    }, {\n      key: \"onMouseleave\",\n      value: function onMouseleave() {\n        this.nzResizableService.mouseEntered$.next(false);\n      }\n    }, {\n      key: \"setPosition\",\n      value: function setPosition() {\n        var position = getComputedStyle(this.el).position;\n\n        if (position === 'static' || !position) {\n          this.renderer.setStyle(this.el, 'position', 'relative');\n        }\n      }\n    }, {\n      key: \"calcSize\",\n      value: function calcSize(width, height, ratio) {\n        var newWidth;\n        var newHeight;\n        var maxWidth;\n        var maxHeight;\n        var col = 0;\n        var spanWidth = 0;\n        var minWidth = this.nzMinWidth;\n        var boundWidth = Infinity;\n        var boundHeight = Infinity;\n\n        if (this.nzBounds === 'parent') {\n          var parent = this.renderer.parentNode(this.el);\n\n          if (parent instanceof HTMLElement) {\n            var parentRect = parent.getBoundingClientRect();\n            boundWidth = parentRect.width;\n            boundHeight = parentRect.height;\n          }\n        } else if (this.nzBounds === 'window') {\n          if (typeof window !== 'undefined') {\n            boundWidth = window.innerWidth;\n            boundHeight = window.innerHeight;\n          }\n        } else if (this.nzBounds && this.nzBounds.nativeElement && this.nzBounds.nativeElement instanceof HTMLElement) {\n          var boundsRect = this.nzBounds.nativeElement.getBoundingClientRect();\n          boundWidth = boundsRect.width;\n          boundHeight = boundsRect.height;\n        }\n\n        maxWidth = ensureInBounds(this.nzMaxWidth, boundWidth);\n        maxHeight = ensureInBounds(this.nzMaxHeight, boundHeight);\n\n        if (this.nzGridColumnCount !== -1) {\n          spanWidth = maxWidth / this.nzGridColumnCount;\n          minWidth = this.nzMinColumn !== -1 ? spanWidth * this.nzMinColumn : minWidth;\n          maxWidth = this.nzMaxColumn !== -1 ? spanWidth * this.nzMaxColumn : maxWidth;\n        }\n\n        if (ratio !== -1) {\n          if (/(left|right)/i.test(this.currentHandleEvent.direction)) {\n            newWidth = Math.min(Math.max(width, minWidth), maxWidth);\n            newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);\n\n            if (newHeight >= maxHeight || newHeight <= this.nzMinHeight) {\n              newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);\n            }\n          } else {\n            newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);\n            newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);\n\n            if (newWidth >= maxWidth || newWidth <= minWidth) {\n              newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);\n            }\n          }\n        } else {\n          newWidth = Math.min(Math.max(width, minWidth), maxWidth);\n          newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);\n        }\n\n        if (this.nzGridColumnCount !== -1) {\n          col = Math.round(newWidth / spanWidth);\n          newWidth = col * spanWidth;\n        }\n\n        return {\n          col: col,\n          width: newWidth,\n          height: newHeight\n        };\n      }\n    }, {\n      key: \"setCursor\",\n      value: function setCursor() {\n        switch (this.currentHandleEvent.direction) {\n          case 'left':\n          case 'right':\n            this.renderer.setStyle(document.body, 'cursor', 'ew-resize');\n            break;\n\n          case 'top':\n          case 'bottom':\n            this.renderer.setStyle(document.body, 'cursor', 'ns-resize');\n            break;\n\n          case 'topLeft':\n          case 'bottomRight':\n            this.renderer.setStyle(document.body, 'cursor', 'nwse-resize');\n            break;\n\n          case 'topRight':\n          case 'bottomLeft':\n            this.renderer.setStyle(document.body, 'cursor', 'nesw-resize');\n            break;\n        }\n\n        this.renderer.setStyle(document.body, 'user-select', 'none');\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(event) {\n        var _this4 = this;\n\n        var elRect = this.elRect;\n        var resizeEvent = getEventWithPoint(event);\n        var handleEvent = getEventWithPoint(this.currentHandleEvent.mouseEvent);\n        var width = elRect.width;\n        var height = elRect.height;\n        var ratio = this.nzLockAspectRatio ? width / height : -1;\n\n        switch (this.currentHandleEvent.direction) {\n          case 'bottomRight':\n            width = resizeEvent.clientX - elRect.left;\n            height = resizeEvent.clientY - elRect.top;\n            break;\n\n          case 'bottomLeft':\n            width = elRect.width + handleEvent.clientX - resizeEvent.clientX;\n            height = resizeEvent.clientY - elRect.top;\n            break;\n\n          case 'topRight':\n            width = resizeEvent.clientX - elRect.left;\n            height = elRect.height + handleEvent.clientY - resizeEvent.clientY;\n            break;\n\n          case 'topLeft':\n            width = elRect.width + handleEvent.clientX - resizeEvent.clientX;\n            height = elRect.height + handleEvent.clientY - resizeEvent.clientY;\n            break;\n\n          case 'top':\n            height = elRect.height + handleEvent.clientY - resizeEvent.clientY;\n            break;\n\n          case 'right':\n            width = resizeEvent.clientX - elRect.left;\n            break;\n\n          case 'bottom':\n            height = resizeEvent.clientY - elRect.top;\n            break;\n\n          case 'left':\n            width = elRect.width + handleEvent.clientX - resizeEvent.clientX;\n        }\n\n        var size = this.calcSize(width, height, ratio);\n        this.sizeCache = Object.assign({}, size);\n        this.ngZone.run(function () {\n          _this4.nzResize.emit(Object.assign(Object.assign({}, size), {\n            mouseEvent: event\n          }));\n        });\n\n        if (this.nzPreview) {\n          this.previewResize(size);\n        }\n      }\n    }, {\n      key: \"endResize\",\n      value: function endResize(event) {\n        var _this5 = this;\n\n        this.renderer.setStyle(document.body, 'cursor', '');\n        this.renderer.setStyle(document.body, 'user-select', '');\n        this.removeGhostElement();\n        var size = this.sizeCache ? Object.assign({}, this.sizeCache) : {\n          width: this.elRect.width,\n          height: this.elRect.height\n        };\n        this.ngZone.run(function () {\n          _this5.nzResizeEnd.emit(Object.assign(Object.assign({}, size), {\n            mouseEvent: event\n          }));\n        });\n        this.sizeCache = null;\n        this.currentHandleEvent = null;\n      }\n    }, {\n      key: \"previewResize\",\n      value: function previewResize(_ref) {\n        var width = _ref.width,\n            height = _ref.height;\n        this.createGhostElement();\n        this.renderer.setStyle(this.ghostElement, 'width', \"\".concat(width, \"px\"));\n        this.renderer.setStyle(this.ghostElement, 'height', \"\".concat(height, \"px\"));\n      }\n    }, {\n      key: \"createGhostElement\",\n      value: function createGhostElement() {\n        if (!this.ghostElement) {\n          this.ghostElement = this.renderer.createElement('div');\n          this.renderer.setAttribute(this.ghostElement, 'class', 'nz-resizable-preview');\n        }\n\n        this.renderer.appendChild(this.el, this.ghostElement);\n      }\n    }, {\n      key: \"removeGhostElement\",\n      value: function removeGhostElement() {\n        if (this.ghostElement) {\n          this.renderer.removeChild(this.el, this.ghostElement);\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        if (this.platform.isBrowser) {\n          this.el = this.elementRef.nativeElement;\n          this.setPosition();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.ghostElement = null;\n        this.sizeCache = null;\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzResizableDirective;\n  }();\n\n  NzResizableDirective.ɵfac = function NzResizableDirective_Factory(t) {\n    return new (t || NzResizableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NzResizableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  NzResizableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: NzResizableDirective,\n    selectors: [[\"\", \"nz-resizable\", \"\"]],\n    hostVars: 4,\n    hostBindings: function NzResizableDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function NzResizableDirective_mouseenter_HostBindingHandler() {\n          return ctx.onMouseenter();\n        })(\"mouseleave\", function NzResizableDirective_mouseleave_HostBindingHandler() {\n          return ctx.onMouseleave();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"nz-resizable-resizing\", ctx.resizing)(\"nz-resizable-disabled\", ctx.nzDisabled);\n      }\n    },\n    inputs: {\n      nzBounds: \"nzBounds\",\n      nzMinHeight: \"nzMinHeight\",\n      nzMinWidth: \"nzMinWidth\",\n      nzGridColumnCount: \"nzGridColumnCount\",\n      nzMaxColumn: \"nzMaxColumn\",\n      nzMinColumn: \"nzMinColumn\",\n      nzLockAspectRatio: \"nzLockAspectRatio\",\n      nzPreview: \"nzPreview\",\n      nzDisabled: \"nzDisabled\",\n      nzMaxHeight: \"nzMaxHeight\",\n      nzMaxWidth: \"nzMaxWidth\"\n    },\n    outputs: {\n      nzResize: \"nzResize\",\n      nzResizeEnd: \"nzResizeEnd\",\n      nzResizeStart: \"nzResizeStart\"\n    },\n    exportAs: [\"nzResizable\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([NzResizableService])]\n  });\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzResizableDirective.prototype, \"nzLockAspectRatio\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzResizableDirective.prototype, \"nzPreview\", void 0);\n\n  __decorate([InputBoolean(), __metadata(\"design:type\", Boolean)], NzResizableDirective.prototype, \"nzDisabled\", void 0);\n\n  return NzResizableDirective;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar NzResizeHandleMouseDownEvent = function NzResizeHandleMouseDownEvent(direction, mouseEvent) {\n  _classCallCheck(this, NzResizeHandleMouseDownEvent);\n\n  this.direction = direction;\n  this.mouseEvent = mouseEvent;\n};\n\nvar NzResizeHandleComponent = /*@__PURE__*/function () {\n  var NzResizeHandleComponent = /*#__PURE__*/function () {\n    function NzResizeHandleComponent(nzResizableService, cdr, elementRef) {\n      _classCallCheck(this, NzResizeHandleComponent);\n\n      this.nzResizableService = nzResizableService;\n      this.cdr = cdr;\n      this.elementRef = elementRef;\n      this.nzDirection = 'bottomRight';\n      this.nzMouseDown = new EventEmitter();\n      this.entered = false;\n      this.destroy$ = new Subject(); // TODO: move to host after View Engine deprecation\n\n      this.elementRef.nativeElement.classList.add('nz-resizable-handle');\n    }\n\n    _createClass(NzResizeHandleComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this6 = this;\n\n        this.nzResizableService.mouseEntered$.pipe(takeUntil(this.destroy$)).subscribe(function (entered) {\n          _this6.entered = entered;\n\n          _this6.cdr.markForCheck();\n        });\n      }\n    }, {\n      key: \"onMousedown\",\n      value: function onMousedown(event) {\n        this.nzResizableService.handleMouseDown$.next(new NzResizeHandleMouseDownEvent(this.nzDirection, event));\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n      }\n    }]);\n\n    return NzResizeHandleComponent;\n  }();\n\n  NzResizeHandleComponent.ɵfac = function NzResizeHandleComponent_Factory(t) {\n    return new (t || NzResizeHandleComponent)(ɵngcc0.ɵɵdirectiveInject(NzResizableService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NzResizeHandleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzResizeHandleComponent,\n    selectors: [[\"nz-resize-handle\"], [\"\", \"nz-resize-handle\", \"\"]],\n    hostVars: 18,\n    hostBindings: function NzResizeHandleComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function NzResizeHandleComponent_mousedown_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        })(\"touchstart\", function NzResizeHandleComponent_touchstart_HostBindingHandler($event) {\n          return ctx.onMousedown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"nz-resizable-handle-top\", ctx.nzDirection === \"top\")(\"nz-resizable-handle-right\", ctx.nzDirection === \"right\")(\"nz-resizable-handle-bottom\", ctx.nzDirection === \"bottom\")(\"nz-resizable-handle-left\", ctx.nzDirection === \"left\")(\"nz-resizable-handle-topRight\", ctx.nzDirection === \"topRight\")(\"nz-resizable-handle-bottomRight\", ctx.nzDirection === \"bottomRight\")(\"nz-resizable-handle-bottomLeft\", ctx.nzDirection === \"bottomLeft\")(\"nz-resizable-handle-topLeft\", ctx.nzDirection === \"topLeft\")(\"nz-resizable-handle-box-hover\", ctx.entered);\n      }\n    },\n    inputs: {\n      nzDirection: \"nzDirection\"\n    },\n    outputs: {\n      nzMouseDown: \"nzMouseDown\"\n    },\n    exportAs: [\"nzResizeHandle\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function NzResizeHandleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzResizeHandleComponent;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar DEFAULT_RESIZE_DIRECTION = ['bottomRight', 'topRight', 'bottomLeft', 'topLeft', 'bottom', 'right', 'top', 'left'];\n\nvar NzResizeHandlesComponent = /*@__PURE__*/function () {\n  var NzResizeHandlesComponent = /*#__PURE__*/function () {\n    function NzResizeHandlesComponent() {\n      _classCallCheck(this, NzResizeHandlesComponent);\n\n      this.nzDirections = DEFAULT_RESIZE_DIRECTION;\n      this.directions = new Set(this.nzDirections);\n    }\n\n    _createClass(NzResizeHandlesComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes.nzDirections) {\n          this.directions = new Set(changes.nzDirections.currentValue);\n        }\n      }\n    }]);\n\n    return NzResizeHandlesComponent;\n  }();\n\n  NzResizeHandlesComponent.ɵfac = function NzResizeHandlesComponent_Factory(t) {\n    return new (t || NzResizeHandlesComponent)();\n  };\n\n  NzResizeHandlesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n    type: NzResizeHandlesComponent,\n    selectors: [[\"nz-resize-handles\"]],\n    inputs: {\n      nzDirections: \"nzDirections\"\n    },\n    exportAs: [\"nzResizeHandles\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"nzDirection\", 4, \"ngFor\", \"ngForOf\"], [3, \"nzDirection\"]],\n    template: function NzResizeHandlesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzResizeHandlesComponent_nz_resize_handle_0_Template, 1, 1, \"nz-resize-handle\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.directions);\n      }\n    },\n    directives: [ɵngcc2.NgForOf, NzResizeHandleComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NzResizeHandlesComponent;\n}();\n\nvar NzResizableModule = /*@__PURE__*/function () {\n  var NzResizableModule = function NzResizableModule() {\n    _classCallCheck(this, NzResizableModule);\n  };\n\n  NzResizableModule.ɵfac = function NzResizableModule_Factory(t) {\n    return new (t || NzResizableModule)();\n  };\n\n  NzResizableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzResizableModule\n  });\n  NzResizableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NzResizableModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzResizableModule, {\n    declarations: function declarations() {\n      return [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_RESIZE_DIRECTION, NzResizableDirective, NzResizableModule, NzResizableService, NzResizeHandleComponent, NzResizeHandleMouseDownEvent, NzResizeHandlesComponent, getEventWithPoint }; //# sourceMappingURL=ng-zorro-antd-resizable.js.map","map":null,"metadata":{},"sourceType":"module"}