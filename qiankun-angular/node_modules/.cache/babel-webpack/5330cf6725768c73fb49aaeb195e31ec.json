{"ast":null,"code":"import _toConsumableArray from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:/qiankun/qiankun-angular/node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { CommonModule } from '@angular/common';\nimport { Pipe, NgModule } from '@angular/core';\nimport { sum, isNumberFinite, toDecimal, isNil } from 'ng-zorro-antd/core/util';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\n\nvar NzAggregatePipe = /*@__PURE__*/function () {\n  var NzAggregatePipe = /*#__PURE__*/function () {\n    function NzAggregatePipe() {\n      _classCallCheck(this, NzAggregatePipe);\n    }\n\n    _createClass(NzAggregatePipe, [{\n      key: \"transform\",\n      value: function transform(value, method) {\n        if (!Array.isArray(value)) {\n          return value;\n        }\n\n        if (value.length === 0) {\n          return undefined;\n        }\n\n        switch (method) {\n          case 'sum':\n            return sum(value);\n\n          case 'avg':\n            return sum(value) / value.length;\n\n          case 'max':\n            return Math.max.apply(Math, _toConsumableArray(value));\n\n          case 'min':\n            return Math.min.apply(Math, _toConsumableArray(value));\n\n          default:\n            throw Error(\"Invalid Pipe Arguments: Aggregate pipe doesn't support this type\");\n        }\n      }\n    }]);\n\n    return NzAggregatePipe;\n  }();\n\n  NzAggregatePipe.ɵfac = function NzAggregatePipe_Factory(t) {\n    return new (t || NzAggregatePipe)();\n  };\n\n  NzAggregatePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzAggregate\",\n    type: NzAggregatePipe,\n    pure: true\n  });\n  return NzAggregatePipe;\n}();\n\nvar NzBytesPipe = /*@__PURE__*/function () {\n  var NzBytesPipe = /*#__PURE__*/function () {\n    function NzBytesPipe() {\n      _classCallCheck(this, NzBytesPipe);\n    }\n\n    _createClass(NzBytesPipe, [{\n      key: \"transform\",\n      value: function transform(input) {\n        var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'B';\n        var to = arguments.length > 3 ? arguments[3] : undefined;\n\n        if (!(isNumberFinite(input) && isNumberFinite(decimal) && decimal % 1 === 0 && decimal >= 0)) {\n          return input;\n        }\n\n        var bytes = input;\n        var unit = from;\n\n        while (unit !== 'B') {\n          bytes *= 1024;\n          unit = NzBytesPipe.formats[unit].prev;\n        }\n\n        if (to) {\n          var format = NzBytesPipe.formats[to];\n          var result = toDecimal(NzBytesPipe.calculateResult(format, bytes), decimal);\n          return NzBytesPipe.formatResult(result, to);\n        }\n\n        for (var key in NzBytesPipe.formats) {\n          if (NzBytesPipe.formats.hasOwnProperty(key)) {\n            var _format = NzBytesPipe.formats[key];\n\n            if (bytes < _format.max) {\n              var _result = toDecimal(NzBytesPipe.calculateResult(_format, bytes), decimal);\n\n              return NzBytesPipe.formatResult(_result, key);\n            }\n          }\n        }\n      }\n    }], [{\n      key: \"formatResult\",\n      value: function formatResult(result, unit) {\n        return \"\".concat(result, \" \").concat(unit);\n      }\n    }, {\n      key: \"calculateResult\",\n      value: function calculateResult(format, bytes) {\n        var prev = format.prev ? NzBytesPipe.formats[format.prev] : undefined;\n        return prev ? bytes / prev.max : bytes;\n      }\n    }]);\n\n    return NzBytesPipe;\n  }();\n\n  NzBytesPipe.ɵfac = function NzBytesPipe_Factory(t) {\n    return new (t || NzBytesPipe)();\n  };\n\n  NzBytesPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzBytes\",\n    type: NzBytesPipe,\n    pure: true\n  });\n  NzBytesPipe.formats = {\n    B: {\n      max: 1024\n    },\n    kB: {\n      max: Math.pow(1024, 2),\n      prev: 'B'\n    },\n    KB: {\n      max: Math.pow(1024, 2),\n      prev: 'B'\n    },\n    MB: {\n      max: Math.pow(1024, 3),\n      prev: 'kB'\n    },\n    GB: {\n      max: Math.pow(1024, 4),\n      prev: 'MB'\n    },\n    TB: {\n      max: Number.MAX_SAFE_INTEGER,\n      prev: 'GB'\n    }\n  };\n  return NzBytesPipe;\n}();\n\nvar NzToCssUnitPipe = /*@__PURE__*/function () {\n  var NzToCssUnitPipe = /*#__PURE__*/function () {\n    function NzToCssUnitPipe() {\n      _classCallCheck(this, NzToCssUnitPipe);\n    }\n\n    _createClass(NzToCssUnitPipe, [{\n      key: \"transform\",\n      value: function transform(value) {\n        var defaultUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';\n        var absoluteLengthUnit = ['cm', 'mm', 'Q', 'in', 'pc', 'pt', 'px'];\n        var relativeLengthUnit = ['em', 'ex', 'ch', 'rem', '1h', 'vw', 'vh', 'vmin', 'vmax'];\n        var percentagesUnit = ['%'];\n        var listOfUnit = [].concat(absoluteLengthUnit, relativeLengthUnit, percentagesUnit);\n        var unit = 'px';\n\n        if (listOfUnit.some(function (u) {\n          return u === defaultUnit;\n        })) {\n          unit = defaultUnit;\n        }\n\n        return typeof value === 'number' ? \"\".concat(value).concat(unit) : \"\".concat(value);\n      }\n    }]);\n\n    return NzToCssUnitPipe;\n  }();\n\n  NzToCssUnitPipe.ɵfac = function NzToCssUnitPipe_Factory(t) {\n    return new (t || NzToCssUnitPipe)();\n  };\n\n  NzToCssUnitPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzToCssUnit\",\n    type: NzToCssUnitPipe,\n    pure: true\n  });\n  return NzToCssUnitPipe;\n}();\n\nvar NzEllipsisPipe = /*@__PURE__*/function () {\n  var NzEllipsisPipe = /*#__PURE__*/function () {\n    function NzEllipsisPipe() {\n      _classCallCheck(this, NzEllipsisPipe);\n    }\n\n    _createClass(NzEllipsisPipe, [{\n      key: \"transform\",\n      value: function transform(value, length) {\n        var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n        if (typeof value !== 'string') {\n          return value;\n        }\n\n        var len = typeof length === 'undefined' ? value.length : length;\n\n        if (value.length <= len) {\n          return value;\n        }\n\n        return value.substring(0, len) + suffix;\n      }\n    }]);\n\n    return NzEllipsisPipe;\n  }();\n\n  NzEllipsisPipe.ɵfac = function NzEllipsisPipe_Factory(t) {\n    return new (t || NzEllipsisPipe)();\n  };\n\n  NzEllipsisPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzEllipsis\",\n    type: NzEllipsisPipe,\n    pure: true\n  });\n  return NzEllipsisPipe;\n}();\n\nvar NzSafeNullPipe = /*@__PURE__*/function () {\n  var NzSafeNullPipe = /*#__PURE__*/function () {\n    function NzSafeNullPipe() {\n      _classCallCheck(this, NzSafeNullPipe);\n    }\n\n    _createClass(NzSafeNullPipe, [{\n      key: \"transform\",\n      value: function transform(value) {\n        var replace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n        if (isNil(value)) {\n          return replace;\n        }\n\n        return value;\n      }\n    }]);\n\n    return NzSafeNullPipe;\n  }();\n\n  NzSafeNullPipe.ɵfac = function NzSafeNullPipe_Factory(t) {\n    return new (t || NzSafeNullPipe)();\n  };\n\n  NzSafeNullPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzSafeNull\",\n    type: NzSafeNullPipe,\n    pure: true\n  });\n  return NzSafeNullPipe;\n}();\n\nvar NzSanitizerPipe = /*@__PURE__*/function () {\n  var NzSanitizerPipe = /*#__PURE__*/function () {\n    function NzSanitizerPipe(sanitizer) {\n      _classCallCheck(this, NzSanitizerPipe);\n\n      this.sanitizer = sanitizer;\n    }\n\n    _createClass(NzSanitizerPipe, [{\n      key: \"transform\",\n      value: function transform(value) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'html';\n\n        switch (type) {\n          case 'html':\n            return this.sanitizer.bypassSecurityTrustHtml(value);\n\n          case 'style':\n            return this.sanitizer.bypassSecurityTrustStyle(value);\n\n          case 'url':\n            return this.sanitizer.bypassSecurityTrustUrl(value);\n\n          case 'resourceUrl':\n            return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\n          default:\n            throw new Error(\"Invalid safe type specified\");\n        }\n      }\n    }]);\n\n    return NzSanitizerPipe;\n  }();\n\n  NzSanitizerPipe.ɵfac = function NzSanitizerPipe_Factory(t) {\n    return new (t || NzSanitizerPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer));\n  };\n\n  NzSanitizerPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzSanitizer\",\n    type: NzSanitizerPipe,\n    pure: true\n  });\n  return NzSanitizerPipe;\n}();\n\nvar NzTrimPipe = /*@__PURE__*/function () {\n  var NzTrimPipe = /*#__PURE__*/function () {\n    function NzTrimPipe() {\n      _classCallCheck(this, NzTrimPipe);\n    }\n\n    _createClass(NzTrimPipe, [{\n      key: \"transform\",\n      value: // TODO(chensimeng) trimEnd, trimStart\n      function transform(text) {\n        return text.trim();\n      }\n    }]);\n\n    return NzTrimPipe;\n  }();\n\n  NzTrimPipe.ɵfac = function NzTrimPipe_Factory(t) {\n    return new (t || NzTrimPipe)();\n  };\n\n  NzTrimPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({\n    name: \"nzTrim\",\n    type: NzTrimPipe,\n    pure: true\n  });\n  return NzTrimPipe;\n}();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n\nvar pipes = [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n\nvar NzPipesModule = /*@__PURE__*/function () {\n  var NzPipesModule = function NzPipesModule() {\n    _classCallCheck(this, NzPipesModule);\n  };\n\n  NzPipesModule.ɵfac = function NzPipesModule_Factory(t) {\n    return new (t || NzPipesModule)();\n  };\n\n  NzPipesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n    type: NzPipesModule\n  });\n  NzPipesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NzPipesModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzPipesModule, {\n    declarations: function declarations() {\n      return [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NzToCssUnitPipe, NzSafeNullPipe, NzSanitizerPipe, NzTrimPipe, NzBytesPipe, NzAggregatePipe, NzEllipsisPipe];\n    }\n  });\n})();\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NzAggregatePipe, NzBytesPipe, NzEllipsisPipe, NzPipesModule, NzSafeNullPipe, NzSanitizerPipe, NzToCssUnitPipe, NzTrimPipe }; //# sourceMappingURL=ng-zorro-antd-pipes.js.map","map":null,"metadata":{},"sourceType":"module"}