{"version":3,"file":"ng-zorro-antd-tree-view.js","sources":["../../components/tree-view/checkbox.ts","../../components/tree-view/tree.ts","../../components/tree-view/node.ts","../../components/tree-view/utils.ts","../../components/tree-view/indent.ts","../../components/tree-view/option.ts","../../components/tree-view/outlet.ts","../../components/tree-view/padding.ts","../../components/tree-view/toggle.ts","../../components/tree-view/tree-view.ts","../../components/tree-view/tree-virtual-scroll-view.ts","../../components/tree-view/tree-view.module.ts","../../components/tree-view/data-source.ts","../../components/tree-view/public-api.ts","../../components/tree-view/ng-zorro-antd-tree-view.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\n\n@Component({\n  selector: 'nz-tree-node-checkbox:not([builtin])',\n  template: `\n    <span class=\"ant-tree-checkbox-inner\"></span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  host: {\n    class: 'ant-tree-checkbox',\n    '[class.ant-tree-checkbox-checked]': `nzChecked`,\n    '[class.ant-tree-checkbox-indeterminate]': `nzIndeterminate`,\n    '[class.ant-tree-checkbox-disabled]': `nzDisabled`,\n    '(click)': 'onClick($event)'\n  }\n})\nexport class NzTreeNodeCheckboxComponent {\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n\n  @Input() nzChecked?: boolean;\n  @Input() nzIndeterminate?: boolean;\n  @Input() @InputBoolean() nzDisabled?: boolean;\n  @Output() readonly nzClick = new EventEmitter<MouseEvent>();\n\n  onClick(e: MouseEvent): void {\n    if (!this.nzDisabled) {\n      this.nzClick.emit(e);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { DataSource } from '@angular/cdk/collections';\nimport { CdkTree, TreeControl } from '@angular/cdk/tree';\nimport {\n  ChangeDetectorRef,\n  Component,\n  Host,\n  Input,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewContainerRef\n} from '@angular/core';\nimport { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({ template: '' })\n// tslint:disable-next-line: component-class-suffix\nexport class NzTreeView<T> extends CdkTree<T> implements OnInit, OnDestroy {\n  static ngAcceptInputType_nzDirectoryTree: BooleanInput;\n  static ngAcceptInputType_nzBlockNode: BooleanInput;\n\n  private destroy$ = new Subject();\n  dir: Direction = 'ltr';\n  _dataSourceChanged = new Subject<void>();\n  @Input('nzTreeControl') treeControl!: TreeControl<T, NzSafeAny>;\n  @Input('nzDataSource')\n  get dataSource(): DataSource<T> | Observable<T[]> | T[] {\n    return super.dataSource;\n  }\n  set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]) {\n    super.dataSource = dataSource;\n  }\n  @Input() @InputBoolean() nzDirectoryTree = false;\n  @Input() @InputBoolean() nzBlockNode = false;\n\n  constructor(\n    protected differs: IterableDiffers,\n    protected changeDetectorRef: ChangeDetectorRef,\n    @Host() @Optional() public noAnimation?: NzNoAnimationDirective,\n    @Optional() private directionality?: Directionality\n  ) {\n    super(differs, changeDetectorRef);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    if (this.directionality) {\n      this.dir = this.directionality.value;\n      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction: Direction) => {\n        this.dir = direction;\n        this.changeDetectorRef.detectChanges();\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  renderNodeChanges(data: T[] | ReadonlyArray<T>, dataDiffer?: IterableDiffer<T>, viewContainer?: ViewContainerRef, parentData?: T): void {\n    super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n    this._dataSourceChanged.next();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChange,\n  SimpleChanges,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { NzTreeView } from './tree';\n\nexport interface NzTreeVirtualNodeData<T> {\n  data: T;\n  context: CdkTreeNodeOutletContext<T>;\n  nodeDef: CdkTreeNodeDef<T>;\n}\n\n@Component({\n  selector: 'nz-tree-node:not([builtin])',\n  exportAs: 'nzTreeNode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{ provide: CdkTreeNode, useExisting: NzTreeNodeComponent }],\n  template: `\n    <nz-tree-node-indents [indents]=\"indents\" *ngIf=\"indents.length\"></nz-tree-node-indents>\n    <ng-content select=\"nz-tree-node-toggle, [nz-tree-node-toggle]\"></ng-content>\n    <nz-tree-node-toggle class=\"nz-tree-leaf-line-icon\" *ngIf=\"indents.length && isLeaf\" nzTreeNodeNoopToggle>\n      <span class=\"ant-tree-switcher-leaf-line\"></span>\n    </nz-tree-node-toggle>\n    <ng-content select=\"nz-tree-node-checkbox\"></ng-content>\n    <ng-content select=\"nz-tree-node-option\"></ng-content>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class.ant-tree-treenode-switcher-open]': 'isExpanded',\n    '[class.ant-tree-treenode-switcher-close]': '!isExpanded'\n  }\n})\nexport class NzTreeNodeComponent<T> extends CdkTreeNode<T> implements OnDestroy, OnInit {\n  indents: boolean[] = [];\n  disabled = false;\n  selected = false;\n  isLeaf = false;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected tree: NzTreeView<T>,\n    private renderer: Renderer2,\n    private cdr: ChangeDetectorRef\n  ) {\n    super(elementRef, tree);\n    this._elementRef.nativeElement.classList.add('ant-tree-treenode');\n  }\n\n  ngOnInit(): void {\n    this.isLeaf = !this.tree.treeControl.isExpandable(this.data);\n  }\n\n  disable(): void {\n    this.disabled = true;\n    this.updateDisabledClass();\n  }\n\n  enable(): void {\n    this.disabled = false;\n    this.updateDisabledClass();\n  }\n\n  select(): void {\n    this.selected = true;\n    this.updateSelectedClass();\n  }\n\n  deselect(): void {\n    this.selected = false;\n    this.updateSelectedClass();\n  }\n\n  setIndents(indents: boolean[]): void {\n    this.indents = indents;\n    this.cdr.markForCheck();\n  }\n\n  private updateSelectedClass(): void {\n    if (this.selected) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-selected');\n    }\n  }\n\n  private updateDisabledClass(): void {\n    if (this.disabled) {\n      this.renderer.addClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    } else {\n      this.renderer.removeClass(this.elementRef.nativeElement, 'ant-tree-treenode-disabled');\n    }\n  }\n}\n\n@Directive({\n  selector: '[nzTreeNodeDef]',\n  providers: [{ provide: CdkTreeNodeDef, useExisting: NzTreeNodeDefDirective }]\n})\nexport class NzTreeNodeDefDirective<T> extends CdkTreeNodeDef<T> {\n  @Input('nzTreeNodeDefWhen') when!: (index: number, nodeData: T) => boolean;\n}\n\n@Directive({\n  selector: '[nzTreeVirtualScrollNodeOutlet]'\n})\nexport class NzTreeVirtualScrollNodeOutletDirective<T> implements OnChanges {\n  private _viewRef: EmbeddedViewRef<NzSafeAny> | null = null;\n  @Input() data!: NzTreeVirtualNodeData<T>;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const recreateView = this.shouldRecreateView(changes);\n    if (recreateView) {\n      const viewContainerRef = this._viewContainerRef;\n\n      if (this._viewRef) {\n        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));\n      }\n\n      this._viewRef = this.data ? viewContainerRef.createEmbeddedView(this.data.nodeDef.template, this.data.context) : null;\n\n      if (CdkTreeNode.mostRecentTreeNode && this._viewRef) {\n        CdkTreeNode.mostRecentTreeNode.data = this.data.data;\n      }\n    } else if (this._viewRef && this.data.context) {\n      this.updateExistingContext(this.data.context);\n    }\n  }\n\n  private shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes.data;\n    return !!changes.data || (ctxChange && this.hasContextShapeChanged(ctxChange));\n  }\n\n  private hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (const propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  }\n\n  private updateExistingContext(ctx: NzSafeAny): void {\n    for (const propName of Object.keys(ctx)) {\n      this._viewRef!.context[propName] = (this.data.context as NzSafeAny)[propName];\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport function getParent<T>(nodes: T[], node: T, getLevel: (dataNode: T) => number): T | null {\n  let index = nodes.indexOf(node);\n  if (index < 0) {\n    return null;\n  }\n  const level = getLevel(node);\n  for (index--; index >= 0; index--) {\n    const preLevel = getLevel(nodes[index]);\n    if (preLevel + 1 === level) {\n      return nodes[index];\n    }\n    if (preLevel + 1 < level) {\n      return null;\n    }\n  }\n  return null;\n}\n\nexport function getNextSibling<T>(nodes: T[], node: T, getLevel: (dataNode: T) => number, _index?: number): T | null {\n  let index = typeof _index !== 'undefined' ? _index : nodes.indexOf(node);\n  if (index < 0) {\n    return null;\n  }\n  const level = getLevel(node);\n\n  for (index++; index < nodes.length; index++) {\n    const nextLevel = getLevel(nodes[index]);\n    if (nextLevel < level) {\n      return null;\n    }\n    if (nextLevel === level) {\n      return nodes[index];\n    }\n  }\n  return null;\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, Input, OnDestroy } from '@angular/core';\nimport { animationFrameScheduler, asapScheduler, merge, Subscription } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\nimport { NzTreeNodeComponent } from './node';\nimport { NzTreeView } from './tree';\n\nimport { getNextSibling, getParent } from './utils';\n\n/**\n * [true, false, false, true] => 1001\n */\nfunction booleanArrayToString(arr: boolean[]): string {\n  return arr.map(i => (i ? 1 : 0)).join('');\n}\n\nconst BUILD_INDENTS_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n@Component({\n  selector: 'nz-tree-node-indents',\n  template: `\n    <span class=\"ant-tree-indent-unit\" [class.ant-tree-indent-unit-end]=\"!isEnd\" *ngFor=\"let isEnd of indents\"></span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'ant-tree-indent'\n  }\n})\nexport class NzTreeNodeIndentsComponent {\n  @Input() indents: boolean[] = [];\n}\n\n@Directive({\n  selector: 'nz-tree-node[nzTreeNodeIndentLine]',\n  host: {\n    class: 'ant-tree-show-line',\n    '[class.ant-tree-treenode-leaf-last]': 'isLast && isLeaf'\n  }\n})\nexport class NzTreeNodeIndentLineDirective<T> implements OnDestroy {\n  isLast: boolean | 'unset' = 'unset';\n  isLeaf = false;\n  private preNodeRef: T | null = null;\n  private nextNodeRef: T | null = null;\n  private currentIndents: string = '';\n  private changeSubscription: Subscription;\n\n  constructor(private treeNode: NzTreeNodeComponent<T>, private tree: NzTreeView<T>, private cdr: ChangeDetectorRef) {\n    this.buildIndents();\n    this.checkLast();\n\n    /**\n     * The dependent data (TreeControl.dataNodes) can be set after node instantiation,\n     * and setting the indents can cause frame rate loss if it is set too often.\n     */\n    this.changeSubscription = merge(this.treeNode._dataChanges, tree._dataSourceChanged)\n      .pipe(auditTime(0, BUILD_INDENTS_SCHEDULER))\n      .subscribe(() => {\n        this.buildIndents();\n        this.checkAdjacent();\n        this.cdr.markForCheck();\n      });\n  }\n\n  private getIndents(): boolean[] {\n    const indents = [];\n    const nodes = this.tree.treeControl.dataNodes;\n    const getLevel = this.tree.treeControl.getLevel;\n    let parent = getParent(nodes, this.treeNode.data, getLevel);\n    while (parent) {\n      const parentNextSibling = getNextSibling(nodes, parent, getLevel);\n      if (parentNextSibling) {\n        indents.unshift(true);\n      } else {\n        indents.unshift(false);\n      }\n      parent = getParent(nodes, parent, getLevel);\n    }\n    return indents;\n  }\n\n  private buildIndents(): void {\n    if (this.treeNode.data) {\n      const indents = this.getIndents();\n      const diffString = booleanArrayToString(indents);\n      if (diffString !== this.currentIndents) {\n        this.treeNode.setIndents(this.getIndents());\n        this.currentIndents = diffString;\n      }\n    }\n  }\n\n  /**\n   * We need to add an class name for the last child node,\n   * this result can also be affected when the adjacent nodes are changed.\n   */\n  private checkAdjacent(): void {\n    const nodes = this.tree.treeControl.dataNodes;\n    const index = nodes.indexOf(this.treeNode.data);\n    const preNode = nodes[index - 1] || null;\n    const nextNode = nodes[index + 1] || null;\n    if (this.nextNodeRef !== nextNode || this.preNodeRef !== preNode) {\n      this.checkLast(index);\n    }\n    this.preNodeRef = preNode;\n    this.nextNodeRef = nextNode;\n  }\n\n  private checkLast(index?: number): void {\n    const nodes = this.tree.treeControl.dataNodes;\n    this.isLeaf = this.treeNode.isLeaf;\n    this.isLast = !getNextSibling(nodes, this.treeNode.data, this.tree.treeControl.getLevel, index);\n  }\n\n  ngOnDestroy(): void {\n    this.preNodeRef = null;\n    this.nextNodeRef = null;\n    this.changeSubscription.unsubscribe();\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\n\nimport { NzTreeNodeComponent } from './node';\n\n@Component({\n  selector: 'nz-tree-node-option',\n  template: `\n    <span class=\"ant-tree-title\"><ng-content></ng-content></span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'ant-tree-node-content-wrapper',\n    '[class.ant-tree-node-content-wrapper-open]': 'isExpanded',\n    '[class.ant-tree-node-selected]': 'nzSelected',\n    '(click)': 'onClick($event)'\n  }\n})\nexport class NzTreeNodeOptionComponent<T> implements OnChanges {\n  static ngAcceptInputType_nzSelected: BooleanInput;\n  static ngAcceptInputType_nzDisabled: BooleanInput;\n\n  @Input() @InputBoolean() nzSelected = false;\n  @Input() @InputBoolean() nzDisabled = false;\n  @Output() readonly nzClick = new EventEmitter<MouseEvent>();\n\n  constructor(private treeNode: NzTreeNodeComponent<T>) {}\n\n  get isExpanded(): boolean {\n    return this.treeNode.isExpanded;\n  }\n\n  onClick(e: MouseEvent): void {\n    if (!this.nzDisabled) {\n      this.nzClick.emit(e);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzDisabled, nzSelected } = changes;\n    if (nzDisabled) {\n      if (nzDisabled.currentValue) {\n        this.treeNode.disable();\n      } else {\n        this.treeNode.enable();\n      }\n    }\n\n    if (nzSelected) {\n      if (nzSelected.currentValue) {\n        this.treeNode.select();\n      } else {\n        this.treeNode.deselect();\n      }\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkTreeNodeOutlet, CDK_TREE_NODE_OUTLET_NODE } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef } from '@angular/core';\n\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\n@Directive({\n  selector: '[nzTreeNodeOutlet]',\n  providers: [\n    {\n      provide: CdkTreeNodeOutlet,\n      useExisting: NzTreeNodeOutletDirective\n    }\n  ]\n})\nexport class NzTreeNodeOutletDirective implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef, @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: NzSafeAny) {}\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkTreeNodePadding } from '@angular/cdk/tree';\nimport { Directive, Input } from '@angular/core';\n\n@Directive({\n  selector: '[nzTreeNodePadding]',\n  providers: [{ provide: CdkTreeNodePadding, useExisting: NzTreeNodePaddingDirective }]\n})\nexport class NzTreeNodePaddingDirective<T> extends CdkTreeNodePadding<T> {\n  _indent = 24;\n\n  @Input('nzTreeNodePadding')\n  get level(): number {\n    return this._level;\n  }\n  set level(value: number) {\n    this._setLevelInput(value);\n  }\n\n  @Input('nzTreeNodePaddingIndent')\n  get indent(): number | string {\n    return this._indent;\n  }\n  set indent(indent: number | string) {\n    this._setIndentInput(indent);\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkTreeNodeToggle } from '@angular/cdk/tree';\nimport { Directive, Input } from '@angular/core';\nimport { BooleanInput } from 'ng-zorro-antd/core/types';\n\n@Directive({\n  selector: 'nz-tree-node-toggle[nzTreeNodeNoopToggle], [nzTreeNodeNoopToggle]',\n  host: {\n    class: 'ant-tree-switcher ant-tree-switcher-noop'\n  }\n})\nexport class NzTreeNodeNoopToggleDirective {}\n\n@Directive({\n  selector: 'nz-tree-node-toggle:not([nzTreeNodeNoopToggle]), [nzTreeNodeToggle]',\n  providers: [{ provide: CdkTreeNodeToggle, useExisting: NzTreeNodeToggleDirective }],\n  host: {\n    class: 'ant-tree-switcher',\n    '[class.ant-tree-switcher_open]': 'isExpanded',\n    '[class.ant-tree-switcher_close]': '!isExpanded'\n  }\n})\nexport class NzTreeNodeToggleDirective<T> extends CdkTreeNodeToggle<T> {\n  static ngAcceptInputType_recursive: BooleanInput;\n  @Input('nzTreeNodeToggleRecursive')\n  get recursive(): boolean {\n    return this._recursive;\n  }\n  set recursive(value: boolean) {\n    this._recursive = coerceBooleanProperty(value);\n  }\n\n  get isExpanded(): boolean {\n    return this._treeNode.isExpanded;\n  }\n}\n\n@Directive({\n  selector: '[nz-icon][nzTreeNodeToggleRotateIcon]',\n  host: {\n    class: 'ant-tree-switcher-icon'\n  }\n})\nexport class NzTreeNodeToggleRotateIconDirective {}\n\n@Directive({\n  selector: '[nz-icon][nzTreeNodeToggleActiveIcon]',\n  host: {\n    class: 'ant-tree-switcher-loading-icon'\n  }\n})\nexport class NzTreeNodeToggleActiveIconDirective {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkTree } from '@angular/cdk/tree';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { treeCollapseMotion } from 'ng-zorro-antd/core/animation';\n\nimport { NzTreeNodeOutletDirective } from './outlet';\nimport { NzTreeView } from './tree';\n\n@Component({\n  selector: 'nz-tree-view',\n  exportAs: 'nzTreeView',\n  template: `\n    <div class=\"ant-tree-list-holder\">\n      <div\n        [@.disabled]=\"!_afterViewInit || noAnimation?.nzNoAnimation\"\n        [@treeCollapseMotion]=\"_nodeOutlet.viewContainer.length\"\n        class=\"ant-tree-list-holder-inner\"\n      >\n        <ng-container nzTreeNodeOutlet></ng-container>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: CdkTree, useExisting: NzTreeViewComponent },\n    { provide: NzTreeView, useExisting: NzTreeViewComponent }\n  ],\n  host: {\n    class: 'ant-tree',\n    '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n    '[class.ant-tree-directory]': 'nzDirectoryTree',\n    '[class.ant-tree-rtl]': `dir === 'rtl'`\n  },\n  animations: [treeCollapseMotion]\n})\nexport class NzTreeViewComponent<T> extends NzTreeView<T> implements AfterViewInit {\n  @ViewChild(NzTreeNodeOutletDirective, { static: true }) nodeOutlet!: NzTreeNodeOutletDirective;\n  _afterViewInit = false;\n  ngAfterViewInit(): void {\n    Promise.resolve().then(() => {\n      this._afterViewInit = true;\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\nimport { CdkTree, CdkTreeNodeOutletContext } from '@angular/cdk/tree';\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { warnDeprecation } from 'ng-zorro-antd/core/logger';\n\nimport { NzTreeVirtualNodeData } from './node';\nimport { NzTreeNodeOutletDirective } from './outlet';\n\nimport { NzTreeView } from './tree';\n\nconst DEFAULT_SIZE = 28;\n\n@Component({\n  selector: 'nz-tree-virtual-scroll-view',\n  exportAs: 'nzTreeVirtualScrollView',\n  template: `\n    <div class=\"ant-tree-list\">\n      <cdk-virtual-scroll-viewport\n        class=\"ant-tree-list-holder\"\n        [itemSize]=\"itemSize\"\n        [minBufferPx]=\"nzMinBufferPx\"\n        [maxBufferPx]=\"nzMaxBufferPx\"\n      >\n        <ng-container *cdkVirtualFor=\"let item of nodes; let i = index\">\n          <ng-template nzTreeVirtualScrollNodeOutlet [data]=\"item\"></ng-template>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    </div>\n    <ng-container nzTreeNodeOutlet></ng-container>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: NzTreeView, useExisting: NzTreeVirtualScrollViewComponent },\n    { provide: CdkTree, useExisting: NzTreeVirtualScrollViewComponent }\n  ],\n  host: {\n    class: 'ant-tree',\n    '[class.ant-tree-block-node]': 'nzDirectoryTree || nzBlockNode',\n    '[class.ant-tree-directory]': 'nzDirectoryTree',\n    '[class.ant-tree-rtl]': `dir === 'rtl'`\n  }\n})\nexport class NzTreeVirtualScrollViewComponent<T> extends NzTreeView<T> implements OnChanges {\n  itemSize = DEFAULT_SIZE;\n\n  @ViewChild(NzTreeNodeOutletDirective, { static: true }) readonly nodeOutlet!: NzTreeNodeOutletDirective;\n  @ViewChild(CdkVirtualScrollViewport, { static: true }) readonly virtualScrollViewport!: CdkVirtualScrollViewport;\n\n  /**\n   * @deprecated use `nzItemSize` instead\n   * @breaking-change 12.0.0\n   */\n  @Input() nzNodeWidth = DEFAULT_SIZE;\n\n  @Input() nzItemSize = DEFAULT_SIZE;\n  @Input() nzMinBufferPx = DEFAULT_SIZE * 5;\n  @Input() nzMaxBufferPx = DEFAULT_SIZE * 10;\n\n  nodes: Array<NzTreeVirtualNodeData<T>> = [];\n\n  renderNodeChanges(data: T[] | ReadonlyArray<T>): void {\n    this.nodes = new Array(...data).map((n, i) => this.createNode(n, i));\n  }\n\n  private createNode(nodeData: T, index: number): NzTreeVirtualNodeData<T> {\n    const node = this._getNodeDef(nodeData, index);\n    const context = new CdkTreeNodeOutletContext<T>(nodeData);\n    if (this.treeControl.getLevel) {\n      context.level = this.treeControl.getLevel(nodeData);\n    } else {\n      context.level = 0;\n    }\n    return {\n      data: nodeData,\n      context,\n      nodeDef: node\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const { nzNodeWidth, nzItemSize } = changes;\n    if (nzNodeWidth) {\n      warnDeprecation('`nzNodeWidth` in nz-tree-virtual-scroll-view will be removed in 12.0.0, please use `nzItemSize` instead.');\n      this.itemSize = nzNodeWidth.currentValue;\n    }\n    if (nzItemSize) {\n      this.itemSize = nzItemSize.currentValue;\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\n\nimport { NzTreeNodeCheckboxComponent } from './checkbox';\nimport { NzTreeNodeIndentLineDirective, NzTreeNodeIndentsComponent } from './indent';\nimport { NzTreeNodeComponent, NzTreeNodeDefDirective, NzTreeVirtualScrollNodeOutletDirective } from './node';\nimport { NzTreeNodeOptionComponent } from './option';\nimport { NzTreeNodeOutletDirective } from './outlet';\nimport { NzTreeNodePaddingDirective } from './padding';\nimport {\n  NzTreeNodeNoopToggleDirective,\n  NzTreeNodeToggleActiveIconDirective,\n  NzTreeNodeToggleDirective,\n  NzTreeNodeToggleRotateIconDirective\n} from './toggle';\nimport { NzTreeView } from './tree';\nimport { NzTreeViewComponent } from './tree-view';\nimport { NzTreeVirtualScrollViewComponent } from './tree-virtual-scroll-view';\n\nconst treeWithControlComponents = [\n  NzTreeView,\n  NzTreeNodeOutletDirective,\n  NzTreeViewComponent,\n  NzTreeNodeDefDirective,\n  NzTreeNodeComponent,\n  NzTreeNodeToggleDirective,\n  NzTreeNodePaddingDirective,\n  NzTreeNodeToggleRotateIconDirective,\n  NzTreeNodeToggleActiveIconDirective,\n  NzTreeNodeOptionComponent,\n  NzTreeNodeNoopToggleDirective,\n  NzTreeNodeCheckboxComponent,\n  NzTreeNodeIndentsComponent,\n  NzTreeVirtualScrollViewComponent,\n  NzTreeVirtualScrollNodeOutletDirective,\n  NzTreeNodeIndentLineDirective\n];\n\n@NgModule({\n  imports: [BidiModule, CommonModule, NzNoAnimationModule, ScrollingModule],\n  declarations: [treeWithControlComponents],\n  exports: [treeWithControlComponents]\n})\nexport class NzTreeViewModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { FlatTreeControl, TreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\nexport class NzTreeFlattener<T, F, K = F> {\n  constructor(\n    public transformFunction: (node: T, level: number) => F,\n    public getLevel: (node: F) => number,\n    public isExpandable: (node: F) => boolean,\n    public getChildren: (node: T) => Observable<T[]> | T[] | undefined | null\n  ) {}\n\n  private flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this.flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this.flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  private flattenChildren(children: T[], level: number, resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      const childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index !== children.length - 1);\n      this.flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    const resultNodes: F[] = [];\n    structuredData.forEach(node => this.flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F, K>): F[] {\n    const results: F[] = [];\n    const currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\nexport class NzTreeFlatDataSource<T, F, K = F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n\n  constructor(private _treeControl: FlatTreeControl<F, K>, private _treeFlattener: NzTreeFlattener<T, F, K>, initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this.flatNodes();\n  }\n\n  setData(value: T[]): void {\n    this._data.next(value);\n    this.flatNodes();\n  }\n\n  getData(): T[] {\n    return this._data.getValue();\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n    return merge(...changes).pipe(\n      map(() => {\n        this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n        return this._expandedData.value;\n      })\n    );\n  }\n\n  disconnect(): void {\n    // no op\n  }\n\n  private flatNodes(): void {\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.getData()));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport * from './tree-view.module';\nexport * from './checkbox';\nexport * from './utils';\nexport * from './data-source';\nexport * from './indent';\nexport * from './node';\nexport * from './option';\nexport * from './outlet';\nexport * from './padding';\nexport * from './toggle';\nexport * from './tree-view';\nexport * from './tree-virtual-scroll-view';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NzTreeView as ɵa} from './tree';"]}